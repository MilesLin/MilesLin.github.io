<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miles&#39;s Journey</title>
  <subtitle>Dot Net Tourist</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mileslin.github.io/"/>
  <updated>2017-01-31T14:55:39.253Z</updated>
  <id>https://mileslin.github.io/</id>
  
  <author>
    <name>Miles</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welecome to Miles&#39;s Journey</title>
    <link href="https://mileslin.github.io/2100/12/Welecome-to-Miles-s-Journey/"/>
    <id>https://mileslin.github.io/2100/12/Welecome-to-Miles-s-Journey/</id>
    <published>2100-12-31T15:59:59.000Z</published>
    <updated>2017-01-31T14:55:39.253Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog.</p>
<a id="more"></a>
<p>I’m Miles, from Taiwan and I’m a web developer.</p>
<p>There are many new techniques coming out each year. I really need a blog to record what I learn.</p>
<p>This blog is exactly that. To share my web development experiences, problems with work, new techniques, Angular2, .NET MVC.. etc,. I will share all of these here.</p>
<p>I’m enthusiastic about learning languages, like Japanese and English, and jogging. I’ve participated in several half marathons. I’ll sometimes discuss these topics in my blog as well, but my main focus will be web developing.</p>
<p>Anyway, if my posts can help you solve some problems, that’s my goal.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Protecting Routes with Guards</title>
    <link href="https://mileslin.github.io/2017/02/Protecting-Routes-with-Guards/"/>
    <id>https://mileslin.github.io/2017/02/Protecting-Routes-with-Guards/</id>
    <published>2017-02-11T05:38:15.000Z</published>
    <updated>2017-02-11T08:15:15.911Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>預設的情況下，任何user都是可以瀏覽到route有對應到的網址，這並不是一個好的情況。 通常會有需要一些權限的控管。<br><a id="more"></a><br>例如:</p>
<ul>
<li>user是不被允許瀏覽到某個component</li>
<li>此網址需要先登入才能使用</li>
<li>先事先取得一些資料再顯示component</li>
<li>在離開component之前先取得改變的資料</li>
<li>或者在user離開之前詢問是否要不儲存離開</li>
</ul>
<p>以上情況，都可以在route configuration新增<code>guards</code>達成我們要的目的。</p>
<h3 id="目前共有五種guards可以使用"><a href="#目前共有五種guards可以使用" class="headerlink" title="目前共有五種guards可以使用"></a>目前共有五種guards可以使用</h3><ul>
<li>CanActivate: to mediate navigation to a route.</li>
<li>CanActivateChild: to mediate navigation to a child route.</li>
<li>CanDeactivate: to mediate navigation away from the current route.</li>
<li>Resolve: to perform route data retrieval before route activation.</li>
<li>CanLoad: to mediate navigation to a feature module loaded asynchronously.</li>
</ul>
<h3 id="Guard的回傳值決定router的行為"><a href="#Guard的回傳值決定router的行為" class="headerlink" title="Guard的回傳值決定router的行為"></a>Guard的回傳值決定router的行為</h3><div class="alert info"><ul>
<li>回傳 true，則navigation繼續</li>
<li>回傳 false，則navigation process stops</li>
</ul>
</div>
<p>而今天選擇<strong>CanActivate</strong>來做說明，其他guards的做法都是類似的。</p>
<p>原文參考:<br><a href="https://angular.io/docs/ts/latest/guide/router.html#!#guards" title="Guards" target="_blank" rel="external">Guards</a></p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>今天的範例我們要驗證使用者輸入的網址參數<em>(:id)</em>是不是個數字，如果不是數字，則導向到 <strong>welcome</strong> 頁面。 router設定如下:<br><figure class="codeblock codeblock--tabbed"><figcaption><span>configuration</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{ path: <span class="string">'detail/:id'</span>, component: DetailComponent }</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>我們先用 <code>angular cli</code> 新增一個 <span class="highlight-text primary">service component</span></p>
<div class="alert success no-icon"><p>ng g s product-guard.service</p>
</div>
<p><code>angular cli</code> 會幫我們新增好一個service component，而且我們要做的就是</p>
<ol>
<li><code>implements CanActivate</code>，實作canActivate方法</li>
<li>因為要取得網址的資料，所以<code>canActivate傳入ActivatedRouteSnapshot</code></li>
<li><code>import Router</code>使用router做導向的動作</li>
<li>驗證是否為數字，是數字回傳true，不是數字導向<strong>welcome</strong>頁面，回傳false</li>
</ol>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Service Component</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { CanActivate, ActivatedRouteSnapshot, Router } from <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> { Injectable } from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductGuardService <span class="keyword">implements</span> CanActivate {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _router: Router</span>) { }</span><br><span class="line"></span><br><span class="line">  canActivate(route: ActivatedRouteSnapshot): <span class="built_in">boolean</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> id = +route.url[<span class="number">1</span>].path;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(id) || id &lt; <span class="number">1</span>) {</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>._router.navigate([<span class="string">'/welcome'</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>以上，我們component的程式碼就寫完了。</p>
<p>接下來開啟app.module</p>
<ol>
<li><code>import ProductGuardService</code></li>
<li><code>provider</code>加入 <span class="highlight-text success">ProductGuardService </span></li>
<li><code>router</code>設定多傳入 <span class="highlight-text success">canActivate : ProductGuardService</span></li>
</ol>
<figure class="codeblock codeblock--tabbed"><figcaption><span>app.module</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> { ProductGuardService } from <span class="string">'./product-guard.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>({</span><br><span class="line">  declarations: [</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    ...</span><br><span class="line">    RouterModule.forRoot([      </span><br><span class="line">      {</span><br><span class="line">        path: <span class="string">'detail/:id'</span>,</span><br><span class="line">        canActivate: [ProductGuardService],</span><br><span class="line">        component: DetailComponent</span><br><span class="line">      }...</span><br><span class="line">    ])</span><br><span class="line">  ],</span><br><span class="line">  providers: [ProductGuardService],</span><br><span class="line">  ...</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule { }</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>加入以上程式碼後，就完成了。  這樣當網址像是數字這種非數字的<strong>id</strong>參數，則網址頁就會自動導向到<strong>welcome</strong>。</p>
<div class="alert success no-icon"><p><a href="http://localhost:4200/#/detail/abc" target="_blank" rel="external">http://localhost:4200/#/detail/abc</a> 導向 =&gt;  <strong><a href="http://localhost:4200/#/welcome" target="_blank" rel="external">http://localhost:4200/#/welcome</a></strong></p>
</div>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://angular.io/docs/ts/latest/guide/router.html#!#guards" title="Guards" target="_blank" rel="external">Guards</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;預設的情況下，任何user都是可以瀏覽到route有對應到的網址，這並不是一個好的情況。 通常會有需要一些權限的控管。&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Navigation and Routing Additional Techniques</title>
    <link href="https://mileslin.github.io/2017/02/Navigation-and-Routing-Additional-Techniques/"/>
    <id>https://mileslin.github.io/2017/02/Navigation-and-Routing-Additional-Techniques/</id>
    <published>2017-02-08T16:06:07.000Z</published>
    <updated>2017-02-08T17:56:37.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a href="https://mileslin.github.io/2017/02/Routing-Basics/" title="Routing-Basics">上一篇Routing Basics</a> 介紹基本用法後，今天要來多加說明如何帶參數，以及如何使用程式碼navigate到其他route。<br><br><a id="more"></a>
<h2 id="Passing-Parameters-to-a-Route"><a href="#Passing-Parameters-to-a-Route" class="headerlink" title="Passing Parameters to a Route"></a>Passing Parameters to a Route</h2><p>首先要記得在Route設定傳參數的path<br><figure class="codeblock codeblock--tabbed"><figcaption><span>path</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{ path: <span class="string">'detail/:id'</span>, component: DetailComponent },</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>接著使用<code>routerLink</code>的第二個參數就可以達成傳遞參數的基本方式</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>link</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/detail',1]"</span>&gt;</span>Detail with parameter<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>在componet <code>import ActivatedRoute</code>，使用snapshot就可以取得參數值了</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>component</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { Component, OnInit } from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> { ActivatedRoute } from <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>({</span><br><span class="line">  selector: <span class="string">'app-detail'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./detail.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./detail.component.css'</span>]</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DetailComponent <span class="keyword">implements</span> OnInit {</span><br><span class="line"></span><br><span class="line">  detailId = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _route : ActivatedRoute</span>) { }</span><br><span class="line"></span><br><span class="line">  ngOnInit() {</span><br><span class="line">    <span class="keyword">this</span>.detailId = <span class="keyword">this</span>._route.snapshot.params[<span class="string">"id"</span>];</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Activating-a-Route-with-Code"><a href="#Activating-a-Route-with-Code" class="headerlink" title="Activating a Route with Code"></a>Activating a Route with Code</h2><p>這部分就很簡單，只要綁定事件後，在事件的method裡面navigate就可以了。  不過首先我們還是要先<code>import Router</code>，這樣才可以使用navigate。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>navigate</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { Router } from <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _router : Router</span>) { }</span><br><span class="line"></span><br><span class="line">onBack(): <span class="built_in">void</span>{</span><br><span class="line">  <span class="keyword">this</span>._router.navigate([<span class="string">'/detail'</span>]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://angular.io/docs/ts/latest/guide/router.html#!#route-parameters" title="route-parameters" target="_blank" rel="external">route</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;a href=&quot;https://mileslin.github.io/2017/02/Routing-Basics/&quot; title=&quot;Routing-Basics&quot;&gt;上一篇Routing Basics&lt;/a&gt; 介紹基本用法後，今天要來多加說明如何帶參數，以及如何使用程式碼navigate到其他route。&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Routing Basics</title>
    <link href="https://mileslin.github.io/2017/02/Routing-Basics/"/>
    <id>https://mileslin.github.io/2017/02/Routing-Basics/</id>
    <published>2017-02-07T17:06:40.000Z</published>
    <updated>2017-02-07T18:20:43.915Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要介紹Angular Routing提供了View之間切換的功能，以及如何使用跟怎麼設定。</p>
<a id="more"></a>
<h2 id="Routing如何使用"><a href="#Routing如何使用" class="headerlink" title="Routing如何使用?"></a>Routing如何使用?</h2><p>1.使用<code>angular/router</code>內建的router<br>2.將要使用Route的component設定在Routing設定裡面<br>3.在顯示的頁面裡面，設定route-link<br>4.當user點擊route-link的時候，顯示頁面</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>首先我們先有app-component當作首頁，建立兩個component一個是<code>welcome</code>一個是<code>detail</code>。<br><div class="figure " style="width:;"><a class="fancybox" href="1_Two_Component.jpg" title="Component" data-fancybox-group=""><img class="fig-img" src="1_Two_Component.jpg" alt="Component"></a><span class="caption">Component</span></div></p>
<p>Component建立完，接下來就是要到<code>app.module.ts</code>設定一下Router。</p>
<ol>
<li><code>import { RouterModule } from &#39;@angular/router&#39;;</code></li>
<li>設定<code>RouterModule.forRoot</code></li>
</ol>
<figure class="codeblock codeblock--tabbed"><figcaption><span>ConfigurationRouting</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { BrowserModule } from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> { NgModule } from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> { FormsModule } from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> { HttpModule } from <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> { RouterModule } from <span class="string">'@angular/router'</span>; <span class="comment">// Import RouterModule</span></span><br><span class="line"><span class="keyword">import</span> { AppComponent } from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> { WelcomeComponent } from <span class="string">'./welcome/welcome.component'</span>;</span><br><span class="line"><span class="keyword">import</span> { DetailComponent } from <span class="string">'./detail/detail.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>({</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    WelcomeComponent,</span><br><span class="line">    DetailComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule,</span><br><span class="line">    RouterModule.forRoot([</span><br><span class="line">      { path: <span class="string">'detail'</span>, component: DetailComponent },</span><br><span class="line">      { path: <span class="string">'detail/:id'</span>, component: DetailComponent },</span><br><span class="line">      { path: <span class="string">'welcome'</span>, component: WelcomeComponent },</span><br><span class="line">      { path: <span class="string">''</span>, redirectTo: <span class="string">'welcome'</span>, pathMatch: <span class="string">'full'</span> },</span><br><span class="line">      { path: <span class="string">'**'</span>, redirectTo: <span class="string">'welcome'</span>, pathMatch: <span class="string">'full'</span> },</span><br><span class="line">    ])</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule { }</span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>這邊要注意router的設定順序，當第一個比對到了，就不會再往下比對，所以記得把<code>wildcard path</code>的設定放在最後一個。</p>
</div>
<p>設定完之後，再經由route-link的方式來連結這兩個component。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>route-link</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/welcome']"</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/detail']"</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>最後使用 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> 來決定Component要顯示的位置<br><figure class="codeblock codeblock--tabbed"><figcaption><span>router-outlet</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/welcome']"</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/detail']"</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>在index.html，會看到<code>&lt;base href=&quot;/&quot;&gt;</code>這個tag，這是告訴router如何組成navigation URLs，如果沒有這個tag的話，需要再RouterModule設定 useHash:true這樣router才可以正常運作。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>RouterModule</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RouterModule.forRoot([], {useHash: <span class="literal">true</span>})</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://angular.io/docs/ts/latest/tutorial/toh-pt5.html" title="angular.io" target="_blank" rel="external">angular.io</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天要介紹Angular Routing提供了View之間切換的功能，以及如何使用跟怎麼設定。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Binding syntax</title>
    <link href="https://mileslin.github.io/2017/02/Binding-syntax/"/>
    <id>https://mileslin.github.io/2017/02/Binding-syntax/</id>
    <published>2017-02-04T15:25:57.000Z</published>
    <updated>2017-02-04T16:22:22.026Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要從class將資料繫結到template上面，Angular有四種方式。</p>
<ul>
<li>內嵌繫結 ( Interpolation )</li>
<li>屬性繫結 ( Property Binding )</li>
<li>事件繫結 ( Event Binding )</li>
<li>雙向繫結 ( Two-way Binding )</li>
</ul>
<a id="more"></a>
<h2 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h2><p>此種資料繫結方式是屬於單向繫結，使用方法如下</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Interpolation</span><ul class="tabs"><li class="tab active">html</li><li class="tab">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  {{title}}</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight ts" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent {</span><br><span class="line">  title = <span class="string">'app works!'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Property-Binding"><a href="#Property-Binding" class="headerlink" title="Property Binding"></a>Property Binding</h2><p>這也是屬於單向繫結，只要是Html內建的tag都可以使用這種繫結方式。這個功能非常強大，還能用在Component之間的傳值。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Property Binding</span><ul class="tabs"><li class="tab active">html</li><li class="tab">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">href</span>]=<span class="string">"googleLink"</span>&gt;</span>Google Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight ts" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent {</span><br><span class="line">   googleLink = <span class="string">'http://www.google.com'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="Event-Binding"><a href="#Event-Binding" class="headerlink" title="Event Binding"></a>Event Binding</h2><p>只要是瀏覽器預設的所有事件，都可以用這樣的方式綁定，而且每個一個綁定的事件，都會有特定的型別，例如範例的click事件傳入的是 <span class="highlight-text primary">MouseEvent</span> 型別。

button綁定的 <span class="highlight-text warning">(click) = "MyClick($event)</span> MyClick傳入的一定是 <strong>$event</strong>。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Event Binding</span><ul class="tabs"><li class="tab active">html</li><li class="tab">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>) = <span class="string">"MyClick($event)"</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight ts" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent {</span><br><span class="line"></span><br><span class="line">  MyClick(evt:MouseEvent) : <span class="built_in">void</span></span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">console</span>.log(evt);<span class="comment">//如果當下不知道型別，可用這種方式檢查型別</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Two-way-Binding"><a href="#Two-way-Binding" class="headerlink" title="Two-way Binding"></a>Two-way Binding</h2><p>此種方式為雙向繫結，通常是用在input或select的原件上，讓使用者輸入的值可以傳回到class的property。  不過此種方式很浪費效能，建議斟酌使用，或者是改用事件的方式來完成類似的功能。</p>
<p>至於用法就是使用 <span class="highlight-text primary">[(ngModel)]</span> 就可以了。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Two-way Binding</span><ul class="tabs"><li class="tab active">html</li><li class="tab">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"filter"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight ts" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent {</span><br><span class="line">  filter : <span class="built_in">string</span> = <span class="string">''</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://angular.io/docs/ts/latest/guide/template-syntax.html" title="Binding syntax" target="_blank" rel="external">Binding syntax</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;要從class將資料繫結到template上面，Angular有四種方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;內嵌繫結 ( Interpolation )&lt;/li&gt;
&lt;li&gt;屬性繫結 ( Property Binding )&lt;/li&gt;
&lt;li&gt;事件繫結 ( Event Binding )&lt;/li&gt;
&lt;li&gt;雙向繫結 ( Two-way Binding )&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrapping App Component</title>
    <link href="https://mileslin.github.io/2017/02/Bootstrapping-App-Component/"/>
    <id>https://mileslin.github.io/2017/02/Bootstrapping-App-Component/</id>
    <published>2017-02-02T15:42:46.000Z</published>
    <updated>2017-02-04T15:11:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要說明的是Angular是如何Bootstrapping Component的。  我們會從 pluralsight的課程 <a href="https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents" title="Angular 2: Getting Started" target="_blank" rel="external">Angular 2: Getting Started</a> 提供的 <a href="https://github.com/DeborahK/Angular2-GettingStarted/tree/master/APM%20-%20Start" title="Angular 2: Getting Started" target="_blank" rel="external">Github範例</a> 做說明。<br><a id="more"></a></p>
<p>要Bootstrapping Component我們需要完成兩件事情</p>
<ol>
<li>Load the root component(bootstrapping)</li>
<li>Host the application</li>
</ol>
<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><figure class="codeblock codeblock--tabbed"><figcaption><span>app.component.ts</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { Component } from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>({</span><br><span class="line">  selector: <span class="string">'pm-app'</span>,</span><br><span class="line">  template: <span class="string">`</span><br><span class="line">      &lt;h1&gt;Angular2: Getting Started&lt;/h1&gt;</span><br><span class="line">  `</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent { }</span><br></pre></td></tr></tbody></table></figure></div></figure>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Index.html</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Configure SystemJS --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"systemjs.config.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    System.import(<span class="string">'app'</span>).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>{ <span class="built_in">console</span>.error(err); });</span><br><span class="line">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pm-app</span>&gt;</span>Loading App ...<span class="tag">&lt;/<span class="name">pm-app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>Component的 <strong>selector:’pm-app’</strong> 代表指定directive的名稱，而Index的 <strong><pm-app></pm-app></strong> 我們稱為directive。  directive就是我們自己設計的元素，依上面的例子就是讀取template的Html。</p>
<p>那現在的問題是，Module是如何知道我們的root application component的呢?</p>
<ol>
<li>index.html Import App 資料夾的ES module</li>
<li>Systemjs.config.js 設定main.js為application的起點，所以main.js就是我們讀取的第一個ES module</li>
<li>main ts file bootstraps 我們的第一個Angular module，並啟動application</li>
</ol>
<p>視覺化流程就是這樣<br><div class="figure " style="width:;"><a class="fancybox" href="flow.jpg" title="啟動流程" data-fancybox-group=""><img class="fig-img" src="flow.jpg" alt="啟動流程"></a><span class="caption">啟動流程</span></div></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://github.com/DeborahK/Angular2-GettingStarted/tree/master/APM%20-%20Start" title="Angular 2: Getting Started" target="_blank" rel="external">Angular 2: Getting Started</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天要說明的是Angular是如何Bootstrapping Component的。  我們會從 pluralsight的課程 &lt;a href=&quot;https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents&quot; title=&quot;Angular 2: Getting Started&quot;&gt;Angular 2: Getting Started&lt;/a&gt; 提供的 &lt;a href=&quot;https://github.com/DeborahK/Angular2-GettingStarted/tree/master/APM%20-%20Start&quot; title=&quot;Angular 2: Getting Started&quot;&gt;Github範例&lt;/a&gt; 做說明。&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular Modules</title>
    <link href="https://mileslin.github.io/2017/01/Angular2-Modules/"/>
    <id>https://mileslin.github.io/2017/01/Angular2-Modules/</id>
    <published>2017-01-29T16:30:10.000Z</published>
    <updated>2017-02-04T15:09:49.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>javascrip一直存在著Namespaces的問題，意思是指很容易將variables或者functions定義在global namespace。  另一方面javascript並沒有提供管理javascript code的方式。</p>
<!-- classes : info success warning danger no-icon -->
<div class="alert info"><p>Modules 幫我們解決了這個問題</p>
</div>
<a id="more"></a>
<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul>
<li>TypeScript有提供Modules幫助我處理global namespace的問題</li>
<li>ES 2015 有定義標準來處理Module，ES 2015一個Module就是一個檔案，一個檔案就是一個Module。  所以只要建立一個js檔，使用export或者import的方式，js檔就是一個Module了。</li>
<li>Angular2有自己的Angular2 Modules，Angular2 Modules跟ES 2015 Modules是不太一樣的東西。</li>
</ul>
<h3 id="ES-2015-Modules"><a href="#ES-2015-Modules" class="headerlink" title="ES 2015 Modules"></a>ES 2015 Modules</h3><p>ES 2015 Modules的運作方式。<br>1.首先我們要有一個export的class<br><figure class="codeblock codeblock--tabbed"><figcaption><span>product.ts</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Product{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>上面的ts code會Transpile成這樣的js code<br><figure class="codeblock codeblock--tabbed"><figcaption><span>product.js</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>)</span>{}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>2.我們就可以Import該class<br><figure class="codeblock codeblock--tabbed"><figcaption><span>useProduct.ts</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { Product } from <span class="string">'./product'</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<div class="alert info"><p>import { Product } &lt;= 定義我們要import哪一個class</p>
</div>
<div class="alert info"><p>from ‘./product’ &lt;= 定義我們要讀取哪一個js檔案</p>
</div>
<h3 id="Angular-Modules"><a href="#Angular-Modules" class="headerlink" title="Angular Modules"></a>Angular Modules</h3><ul>
<li>Angular Modules 幫助我們組織Applicaiton與functionality的區塊結合在一起，每一個Angular application至少有一個Angular Module，預設為app.module。</li>
<li>當我們的application有越來越多功能的時候，則可以增加Feature Angular module。</li>
<li>我們甚至可以定義Shared Module。讓各個Angular Modules使用。</li>
</ul>
<h3 id="ES-2015-Modules-vs-Angular-Modules"><a href="#ES-2015-Modules-vs-Angular-Modules" class="headerlink" title="ES 2015 Modules vs Angular Modules"></a>ES 2015 Modules vs Angular Modules</h3><table>
<thead>
<tr>
<th>ES Modules</th>
<th>Angular Modules</th>
</tr>
</thead>
<tbody>
<tr>
<td>Code files用來import 或 export</td>
<td>Code files幫我們組織application的functionality區塊</td>
</tr>
<tr>
<td>組織code files</td>
<td>組織application</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;javascrip一直存在著Namespaces的問題，意思是指很容易將variables或者functions定義在global namespace。  另一方面javascript並沒有提供管理javascript code的方式。&lt;/p&gt;
&lt;!-- classes : info success warning danger no-icon --&gt;
&lt;div class=&quot;alert info&quot;&gt;&lt;p&gt;Modules 幫我們解決了這個問題&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Anatomy of an Angular Application</title>
    <link href="https://mileslin.github.io/2017/01/Anatomy-of-an-Angular-2-Application/"/>
    <id>https://mileslin.github.io/2017/01/Anatomy-of-an-Angular-2-Application/</id>
    <published>2017-01-28T08:38:44.000Z</published>
    <updated>2017-02-04T15:09:41.098Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p><strong>Angular2 Application</strong> 的都是由Component組合而成的，而Services則就是提供功能，可以在Component之間使用。<br><a id="more"></a><br><div class="figure " style="width:;"><a class="fancybox" href="1_Comprised-of-Angular2.jpg" title="Comprised-of-Angular2" data-fancybox-group=""><img class="fig-img" src="1_Comprised-of-Angular2.jpg" alt="Comprised-of-Angular2"></a><span class="caption">Comprised-of-Angular2</span></div></p>
<h2 id="What-is-Component"><a href="#What-is-Component" class="headerlink" title="What is Component?"></a>What is Component?</h2><p>每一個<strong>Component</strong>是經由 <span class="highlight-text primary">Template</span> + <span class="highlight-text primary">Class</span> + <span class="highlight-text primary">Metadata</span></p>
<ul>
<li>Template : User看到的HTML畫面，俗稱的View</li>
<li>Class : 使View相關的Code</li>
<li>Metadata : 提供一些Component額外的資訊</li>
</ul>
<div class="figure " style="width:;"><a class="fancybox" href="2_Comprised-of-Component.jpg" title="Comprised-of-Component" data-fancybox-group=""><img class="fig-img" src="2_Comprised-of-Component.jpg" alt="Comprised-of-Component"></a><span class="caption">Comprised-of-Component</span></div>
<h2 id="Angular-Modules"><a href="#Angular-Modules" class="headerlink" title="Angular Modules"></a>Angular Modules</h2><ul>
<li><strong>Angular Modules</strong>負責管理我們的Application，讓所有的Component之間都有相關聯</li>
<li>Angular Application最少會有一個Angular Modules叫做 <strong>Application’s root Angular module</strong></li>
<li>一個Application可以擁有很多個額外的<strong>Angular Modules</strong></li>
</ul>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>Angular 的組成大概是這樣子，而之後會持續介紹每個元件的說明。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Application&quot;&gt;&lt;a href=&quot;#Application&quot; class=&quot;headerlink&quot; title=&quot;Application&quot;&gt;&lt;/a&gt;Application&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Angular2 Application&lt;/strong&gt; 的都是由Component組合而成的，而Services則就是提供功能，可以在Component之間使用。&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
</feed>
