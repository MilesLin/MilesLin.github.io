<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miles&#39;s Journey</title>
  <subtitle>Dot Net Tourist</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mileslin.github.io/"/>
  <updated>2017-02-13T04:30:02.183Z</updated>
  <id>https://mileslin.github.io/</id>
  
  <author>
    <name>Miles</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welecome to Miles&#39;s Journey</title>
    <link href="https://mileslin.github.io/2100/12/Welecome-to-Miles-s-Journey/"/>
    <id>https://mileslin.github.io/2100/12/Welecome-to-Miles-s-Journey/</id>
    <published>2100-12-31T15:59:59.000Z</published>
    <updated>2017-02-13T04:30:02.183Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog.</p>
<a id="more"></a>
<p>I’m Miles, from Taiwan and I’m a web developer.</p>
<p>There are many new techniques coming out each year. I really need a blog to record what I learn.</p>
<p>This blog is exactly that. To share my web development experiences, problems with work, new techniques, Angular2, .NET MVC.. etc,. I will share all of these here.</p>
<p>I’m enthusiastic about learning languages, like Japanese and English, and jogging. I’ve participated in several half marathons. I’ll sometimes discuss these topics in my blog as well, but my main focus will be web developing.</p>
<p>Anyway, if my posts can help you solve some problems, that’s my goal.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript array methods practice summary</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-summary/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-summary/</id>
    <published>2017-04-23T14:43:07.000Z</published>
    <updated>2017-04-23T17:17:59.102Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt -->
<ul>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-I/#Array-from" title="Array.from">Array.from()</a>
: 從現有 Array 建立新 Array 物件，也可以對要複製的 Array 做一些操作</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-I/#Array-isArray" title="Array.isArray">Array.isArray()</a>
: 判斷物件是不是一個 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-I/#Array-prototype-concat" title="Array.prototype.concat">Array.prototype.concat()</a> : 串接兩個 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-II/#Array-prototype-copyWithin" title="Array.prototype.copyWithin">Array.prototype.copyWithin()</a> : 複製 Array 自己的元素，到自己的 Array 裡面</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-II/#Array-prototype-entries" title="Array.prototype.entries">Array.prototype.entries()</a> : 回傳 Array Iterator object ，iterator object可取得 index 跟 value</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-II/#Array-prototype-every" title="Array.prototype.every">Array.prototype.every()</a> : 對 Array 的所有元素做驗證，都驗證過了，則回傳 true</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-III/#Array-prototype-fill" title="Array.prototype.fill">Array.prototype.fill()</a> : 使 Array 填滿指定的值</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-III/#Array-prototype-filter" title="Array.prototype.filter">Array.prototype.filter()</a> : 過濾 Array 的資料，用起來跟 LINQ 的 <strong>where</strong> 一樣</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-III/#Array-prototype-find" title="Array.prototype.find">Array.prototype.find()</a> : 找到第一筆相符的資料</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-III/#Array-prototype-findIndex" title="Array.prototype.findIndex">Array.prototype.findIndex()</a> : 找到第一筆相符資料的 index</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-IV/#Array-prototype-includes" title="Array.prototype.includes">Array.prototype.includes()</a> : 判斷 Array 是否有包含某一個值</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-IV/#Array-prototype-indexOf" title="Array.prototype.indexOf">Array.prototype.indexOf()</a> : 判斷該元素是 Array 哪一個 Index</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-IV/#Array-prototype-join" title="Array.prototype.join">Array.prototype.join()</a> : 將 Array 用指定的值 join 成一個字串</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-IV/#Array-prototype-lastIndexOf" title="Array.prototype.lastIndexOf">Array.prototype.lastIndexOf()</a> : 斷該元素是 Array 哪一個 Index，但是是從右邊開始算起</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-V/#Array-prototype-map" title="Array.prototype.map">Array.prototype.map()</a> : 建立一個全新運算過後的 Array，且不會改到原本的 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-V/#Array-prototype-pop" title="Array.prototype.pop">Array.prototype.pop()</a> : 建除 Array 最後一個元素</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-V/#Array-prototype-push" title="Array.prototype.push">Array.prototype.push()</a> : 從最後面開始新增元素到 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/#Array-prototype-reduce" title="Array.prototype.reduce">Array.prototype.reduce()</a> : 可累加 Array 的元素，也可以用來操作元素的值然後回傳</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/#Array-prototype-reduceRight" title="Array.prototype.reduceRight">Array.prototype.reduceRight()</a> : 與 <code>Array.prototype.reduce()</code> 相似，差別在於是從右邊開始執行</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/#Array-prototype-reverse" title="Array.prototype.reverse">Array.prototype.reverse()</a> : 反向 Array 本身的值</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/#Array-prototype-shift" title="Array.prototype.shift">Array.prototype.shift()</a> : 移除 Array 的第一個元素</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VII/#Array-prototype-slice" title="Array.prototype.slice">Array.prototype.slice()</a> : 回傳淺複製的 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VII/#Array-prototype-some" title="Array.prototype.some">Array.prototype.some()</a> : 驗證其中一個元素是否符合規則，若符合則回傳 true</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VII/#Array-prototype-sort" title="Array.prototype.sort">Array.prototype.sort()</a> : 排序 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VIII/#Array-prototype-splice" title="Array.prototype.splice">Array.prototype.splice()</a> : 移除元素功能跟 insert 元素功能</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VIII/#Array-prototype-toString" title="Array.prototype.toString">Array.prototype.toString()</a> :將 Array 元素toString，並且用 <code>,</code> 隔開</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VIII/#Array-prototype-unshift" title="Array.prototype.unshift">Array.prototype.unshift()</a> : 從 Array 前面增加元素</li>
</ul>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">官方參考連結</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Array 每一個 method 的簡短說明&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice VIII</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VIII/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-VIII/</id>
    <published>2017-04-22T15:57:37.000Z</published>
    <updated>2017-04-22T17:34:28.866Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>移除元素功能跟 insert 元素功能 <code>Array.prototype.splice()</code></li>
<li>將 Array 元素toString，並且用 <code>,</code> 隔開 <code>Array.prototype.toString()</code></li>
<li>從 Array 前面增加元素 <code>Array.prototype.unshift()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice()"></a>Array.prototype.splice()</h2><p>移除元素功能跟 insert 元素功能。</p>
<h4 id="參數說明"><a href="#參數說明" class="headerlink" title="參數說明"></a>參數說明</h4><ul>
<li>start : 第幾個元素開始執行，從 0 開始計算</li>
<li>deleteCount : 要移除幾個元素，若沒指定，則移除全部 (optional)</li>
<li>item1, item2, … : 要被 insert 的元素 (optional)</li>
</ul>
<p>回傳值 : 回傳被移除的元素，若沒有元素被移除，則回傳空 Array</p>
<!-- classes : info success warning danger no-icon -->
<div class="alert info"><p>insert 元素</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>splice</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'mandarin'</span>, <span class="string">'sturgeon'</span>];</span><br><span class="line"><span class="keyword">var</span> removed = myFish.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'drum'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// myFish is ["angel", "clown", "drum", "mandarin", "sturgeon"] </span></span><br><span class="line"><span class="comment">// removed is [], no elements removed</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>移除元素</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>splice</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'drum'</span>, <span class="string">'mandarin'</span>, <span class="string">'sturgeon'</span>];</span><br><span class="line"><span class="keyword">var</span> removed = myFish.splice(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// removed is ["mandarin"]</span></span><br><span class="line"><span class="comment">// myFish is ["angel", "clown", "drum", "sturgeon"]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>移除元素與 insert 元素</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>splice</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'drum'</span>, <span class="string">'sturgeon'</span>];</span><br><span class="line"><span class="keyword">var</span> removed = myFish.splice(<span class="number">2</span>, <span class="number">1</span>, <span class="string">'trumpet'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// myFish is ["angel", "clown", "trumpet", "sturgeon"]</span></span><br><span class="line"><span class="comment">// removed is ["drum"]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-toString"><a href="#Array-prototype-toString" class="headerlink" title="Array.prototype.toString()"></a>Array.prototype.toString()</h2><p>將 Array 元素toString，並且用 <code>,</code> 隔開</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>toString</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="number">3</span>,{<span class="attr">abc</span> : <span class="number">123</span>}]; </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.toString()); <span class="comment">//a,b,3,[object Object]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-unshift"><a href="#Array-prototype-unshift" class="headerlink" title="Array.prototype.unshift()"></a>Array.prototype.unshift()</h2><p>從 Array 前面增加元素</p>
<p>回傳值 : 回傳增加元素後 Array 的 length</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>unshift</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">arr.unshift(<span class="number">0</span>); <span class="comment">// result of call is 3, the new array length</span></span><br><span class="line"><span class="comment">// arr is [0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">arr.unshift(<span class="number">-2</span>, <span class="number">-1</span>); <span class="comment">// = 5</span></span><br><span class="line"><span class="comment">// arr is [-2, -1, 0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">arr.unshift([<span class="number">-3</span>]);</span><br><span class="line"><span class="comment">// arr is [[-3], -2, -1, 0, 1, 2]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;移除元素功能跟 insert 元素功能 &lt;code&gt;Array.prototype.splice()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;將 Array 元素toString，並且用 &lt;code&gt;,&lt;/code&gt; 隔開 &lt;code&gt;Array.prototype.toString()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;從 Array 前面增加元素 &lt;code&gt;Array.prototype.unshift()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice VII</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VII/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-VII/</id>
    <published>2017-04-21T15:08:58.000Z</published>
    <updated>2017-04-22T16:50:23.287Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>回傳淺複製的 Array ，<code>Array.prototype.slice()</code></li>
<li>驗證其中一個元素是否符合規則，若符合則回傳 true <code>Array.prototype.some()</code></li>
<li>排序 Array <code>Array.prototype.sort()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice()"></a>Array.prototype.slice()</h2><p>淺複製 Array 並回傳，不會影響到原本的。  Array 原生型別會被完整複製，Array 裡面若有 object 的話，則只會複製參考位址，這表示參考位址的內容改變後，複製後的內容也會跟著改變。</p>
<h4 id="參數說明"><a href="#參數說明" class="headerlink" title="參數說明"></a>參數說明</h4><ul>
<li>begin : 要從哪一個元素開始複製的 index (會包含該元素) (optional)</li>
<li>end : 要複製到哪一個元素的 index (不會包含該元素) (optional)</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>slice</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'Banana'</span>, <span class="string">'Orange'</span>, <span class="string">'Lemon'</span>, <span class="string">'Apple'</span>, <span class="string">'Mango'</span>];</span><br><span class="line"><span class="keyword">var</span> citrus = fruits.slice(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']</span></span><br><span class="line"><span class="comment">// citrus contains ['Orange','Lemon']</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-some"><a href="#Array-prototype-some" class="headerlink" title="Array.prototype.some()"></a>Array.prototype.some()</h2><p>驗證其中一個元素是否符合規則，若符合則回傳 true，這與 every 的功能很相似，差別在於</p>
<ul>
<li>Array.prototype.some() 只要有一個符合條件，就回傳 true ，否則回傳 false</li>
<li>Array.prototype.every() 全部都要符合條件，才回傳 true ，否則回傳 false</li>
</ul>
<h4 id="參數說明-1"><a href="#參數說明-1" class="headerlink" title="參數說明"></a>參數說明</h4><ul>
<li>element : 當下元素的 value</li>
<li>index : 當下元素的 index ，從 0 開始</li>
<li>array : array 本身</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>some</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">10</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">10</span>); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort()"></a>Array.prototype.sort()</h2><p>排序 Array ， 會改變原本 Array 的值。</p>
<div class="alert danger no-icon"><p>sort的預設排序方式，是把元素轉成 string Unicode code 來排序，所以在排序數字大小的時候可能會出錯，例如[80, 9]，因為”80”的 Unicode 在 “9” Unicode 的前面，所以排序的話 80 會在前。 為避免這個情況發生，排序數字一定要傳入 function 排序</p>
</div>
<h4 id="function-說明-optional"><a href="#function-說明-optional" class="headerlink" title="function 說明 (optional)"></a>function 說明 (optional)</h4><ul>
<li>回傳負數表示 a 的元素會被排在 b 前面</li>
<li>回傳正書表示 b 的元素會被排在 a 前面</li>
<li>回傳 0 表示，保持原本的排序</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>function說明</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (a is less than b by some ordering criterion) {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (a is greater than b by the ordering criterion) {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// a must be equal to b</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h4 id="正向排序與反向排序-function-的寫法"><a href="#正向排序與反向排序-function-的寫法" class="headerlink" title="正向排序與反向排序 function 的寫法"></a>正向排序與反向排序 function 的寫法</h4><figure class="codeblock codeblock--tabbed"><figcaption><span>排序方式</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正向排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 反向排序  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> b - a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用方式</span></span><br><span class="line">  <span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h4 id="排序名字的方式"><a href="#排序名字的方式" class="headerlink" title="排序名字的方式"></a>排序名字的方式</h4><figure class="codeblock codeblock--tabbed"><figcaption><span>排序名字</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'Edward'</span>, <span class="attr">value</span>: <span class="number">21</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'Sharpe'</span>, <span class="attr">value</span>: <span class="number">37</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'And'</span>, <span class="attr">value</span>: <span class="number">45</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'The'</span>, <span class="attr">value</span>: <span class="number">-12</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'Magnetic'</span>, <span class="attr">value</span>: <span class="number">13</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'Zeros'</span>, <span class="attr">value</span>: <span class="number">37</span> }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort by name</span></span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> nameA = a.name.toUpperCase(); <span class="comment">// ignore upper and lowercase</span></span><br><span class="line">  <span class="keyword">var</span> nameB = b.name.toUpperCase(); <span class="comment">// ignore upper and lowercase</span></span><br><span class="line">  <span class="keyword">if</span> (nameA &lt; nameB) {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (nameA &gt; nameB) {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// names must be equal</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;回傳淺複製的 Array ，&lt;code&gt;Array.prototype.slice()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;驗證其中一個元素是否符合規則，若符合則回傳 true &lt;code&gt;Array.prototype.some()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;排序 Array &lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice VI</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/</id>
    <published>2017-04-20T15:55:24.000Z</published>
    <updated>2017-04-22T16:50:23.285Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>可累加 Array 的元素，也可以用來操作元素的值然後回傳 <code>Array.prototype.reduce()</code></li>
<li>與 <code>Array.prototype.reduce()</code> 相似，差別在於是從右邊開始執行 <code>Array.prototype.reduceRight()</code></li>
<li>反向 Array 本身的值 <code>Array.prototype.reverse()</code></li>
<li>移除 Array 的第一個元素 <code>Array.prototype.shift()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce()"></a>Array.prototype.reduce()</h2><p>可累加 Array 的元素，累加元素的方式</p>
<h4 id="參數說明"><a href="#參數說明" class="headerlink" title="參數說明"></a>參數說明</h4><ul>
<li>initialValue : 給 accumulator 的初始值，如果沒有給此參數的話，accumulator 會取 Array 第一個元素的值，且會少跑 index = 0 的第一個迴圈</li>
<li>accumulator : 累加過後的值</li>
<li>currentValue : 現在的 value</li>
<li>array : 整個 Array 的值</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>reduce int</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> initialValue = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> result = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(</span><br><span class="line">  <span class="function">(<span class="params">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">  },</span><br><span class="line">  initialValue</span><br><span class="line">);</span><br><span class="line">  <span class="comment">// result = 20</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>用來攤平 Array</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Flatten an array of arrays</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(</span><br><span class="line">  <span class="function">(<span class="params"> acc, cur </span>) =&gt;</span> acc.concat(cur),</span><br><span class="line">  []</span><br><span class="line">);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>用來計算 Array 裡面相同元素有幾個</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Counting instances of values in an object</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Tiff'</span>, <span class="string">'Bruce'</span>, <span class="string">'Alice'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countedNames = names.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">allNames, name</span>) </span>{ </span><br><span class="line">  <span class="keyword">if</span> (name <span class="keyword">in</span> allNames) {</span><br><span class="line">    allNames[name]++;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> {</span><br><span class="line">    allNames[name] = <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> allNames;</span><br><span class="line">}, {});</span><br><span class="line"><span class="comment">// countedNames is:</span></span><br><span class="line"><span class="comment">// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>與 spread operator 混用，取得某一個欄位的所有值</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Bonding arrays contained in an array</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// friends - an array of objects </span></span><br><span class="line"><span class="comment">// where object field "books" - list of favorite books </span></span><br><span class="line"><span class="keyword">var</span> friends = [{</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'Anna'</span>,</span><br><span class="line">  <span class="attr">books</span>: [<span class="string">'Bible'</span>, <span class="string">'Harry Potter'</span>],</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">}, {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'Bob'</span>,</span><br><span class="line">  <span class="attr">books</span>: [<span class="string">'War and peace'</span>, <span class="string">'Romeo and Juliet'</span>],</span><br><span class="line">  <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">}, {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'Alice'</span>,</span><br><span class="line">  <span class="attr">books</span>: [<span class="string">'The Lord of the Rings'</span>, <span class="string">'The Shining'</span>],</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">}];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 initialValue 沒有傳會造成 undefined is not a function 的 Exception</span></span><br><span class="line"><span class="comment">// allbooks - list which will contain all friends' books +  </span></span><br><span class="line"><span class="comment">// additional list contained in initialValue</span></span><br><span class="line"><span class="keyword">var</span> allbooks = friends.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, curr</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> [...prev, ...curr.books];</span><br><span class="line">}, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// allbooks = [</span></span><br><span class="line"><span class="comment">//   'Bible', 'Harry Potter', 'War and peace', </span></span><br><span class="line"><span class="comment">//   'Romeo and Juliet', 'The Lord of the Rings',</span></span><br><span class="line"><span class="comment">//   'The Shining'</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-reduceRight"><a href="#Array-prototype-reduceRight" class="headerlink" title="Array.prototype.reduceRight()"></a>Array.prototype.reduceRight()</h2><ul>
<li>與 <code>Array.prototype.reduce()</code> 的差別，是從右邊開始執行。</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>reduceRight</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]; </span><br><span class="line"><span class="keyword">var</span> left  = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>)      </span>{ <span class="keyword">return</span> prev + cur; }); </span><br><span class="line"><span class="keyword">var</span> right = a.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>) </span>{ <span class="keyword">return</span> prev + cur; }); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(left);  <span class="comment">// "12345"</span></span><br><span class="line"><span class="built_in">console</span>.log(right); <span class="comment">// "54321"</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse()"></a>Array.prototype.reverse()</h2><p>反向 Array 的值</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>reverse</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</span><br><span class="line"><span class="keyword">var</span> reversed = a.reverse(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);        <span class="comment">// ['three', 'two', 'one']</span></span><br><span class="line"><span class="built_in">console</span>.log(reversed); <span class="comment">// ['three', 'two', 'one']</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-shift"><a href="#Array-prototype-shift" class="headerlink" title="Array.prototype.shift()"></a>Array.prototype.shift()</h2><p>pop() 是移除 Array 最後一個元素，而 shift 是移除 Array 的第一個元素，</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>shift</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'mandarin'</span>, <span class="string">'surgeon'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myFish before:'</span>, myFish);</span><br><span class="line"><span class="comment">// myFish before: ['angel', 'clown', 'mandarin', 'surgeon']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shifted = myFish.shift(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myFish after:'</span>, myFish); </span><br><span class="line"><span class="comment">// myFish after: ['clown', 'mandarin', 'surgeon']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Removed this element:'</span>, shifted); </span><br><span class="line"><span class="comment">// Removed this element: angel</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;可累加 Array 的元素，也可以用來操作元素的值然後回傳 &lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;與 &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; 相似，差別在於是從右邊開始執行 &lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;反向 Array 本身的值 &lt;code&gt;Array.prototype.reverse()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;移除 Array 的第一個元素 &lt;code&gt;Array.prototype.shift()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice V</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-V/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-V/</id>
    <published>2017-04-18T16:06:55.000Z</published>
    <updated>2017-04-18T17:13:36.030Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>建立一個全新運算過後的 Array，且不會改到原本的 Array <code>Array.prototype.map()</code></li>
<li>移除 Array 最後一個元素 <code>Array.prototype.pop()</code></li>
<li>從最後面開始新增元素到 Array <code>Array.prototype.push()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h2><p>建立一個全新運算過後的 Array，且不會改到原本的 Array<br><figure class="codeblock codeblock--tabbed"><figcaption><span>map</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">var</span> roots = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">   <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">});</span><br><span class="line"><span class="comment">// roots is now [2, 10, 20, 30]</span></span><br><span class="line"><span class="comment">// numbers is still [1, 5, 10, 15]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> roots = numbers.map(<span class="built_in">Math</span>.sqrt);</span><br><span class="line"><span class="comment">// roots is now [1, 2, 3]</span></span><br><span class="line"><span class="comment">// numbers is still [1, 4, 9]</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>也可以用在字串上，例如取得每一個字元的 ASCII</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>string.map</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="built_in">Array</span>.prototype.map;</span><br><span class="line"><span class="keyword">var</span> a = map.call(<span class="string">'Hello World'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{ </span><br><span class="line">  <span class="keyword">return</span> x.charCodeAt(<span class="number">0</span>); </span><br><span class="line">});</span><br><span class="line"><span class="comment">// a now equals [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-pop"><a href="#Array-prototype-pop" class="headerlink" title="Array.prototype.pop()"></a>Array.prototype.pop()</h2><p>移除 Array 最後一個元素，且當下會回傳被移除的 value</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>pop</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'mandarin'</span>, <span class="string">'sturgeon'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> popped = myFish.pop();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myFish); <span class="comment">// ['angel', 'clown', 'mandarin' ] </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(popped); <span class="comment">// 'sturgeon'</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h2><p>從最後面開始新增元素到 Array ，回傳 push 後 Array的長度<br><figure class="codeblock codeblock--tabbed"><figcaption><span>push</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">numbers.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sports = [<span class="string">'soccer'</span>, <span class="string">'baseball'</span>];</span><br><span class="line"><span class="keyword">var</span> total = sports.push(<span class="string">'football'</span>, <span class="string">'swimming'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sports); <span class="comment">// ['soccer', 'baseball', 'football', 'swimming']</span></span><br><span class="line"><span class="built_in">console</span>.log(total);  <span class="comment">// 4</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>合併兩個 Array 的方式<br><figure class="codeblock codeblock--tabbed"><figcaption><span>merge array</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vegetables = [<span class="string">'parsnip'</span>, <span class="string">'potato'</span>];</span><br><span class="line"><span class="keyword">var</span> moreVegs = [<span class="string">'celery'</span>, <span class="string">'beetroot'</span>];</span><br><span class="line">vegetables.push(...moreVegs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此方法也行</span></span><br><span class="line"><span class="comment">//Array.prototype.push.apply(vegetables, moreVegs);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vegetables); <span class="comment">// ["parsnip", "potato", "celery", "beetroot"]</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;建立一個全新運算過後的 Array，且不會改到原本的 Array &lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;移除 Array 最後一個元素 &lt;code&gt;Array.prototype.pop()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;從最後面開始新增元素到 Array &lt;code&gt;Array.prototype.push()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice IV</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-IV/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-IV/</id>
    <published>2017-04-17T16:40:33.000Z</published>
    <updated>2017-04-18T16:04:55.012Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>判斷 Array 是否有包含某一個值 <code>Array.prototype.includes()</code></li>
<li>判斷該元素是 Array 哪一個 Index <code>Array.prototype.indexOf()</code></li>
<li>將 Array 用指定的值 join 成一個字串 <code>Array.prototype.join()</code></li>
<li>判斷該是 Array 哪一個 Index，但是是從右邊開始算起 <code>Array.prototype.lastIndexOf()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-prototype-includes"><a href="#Array-prototype-includes" class="headerlink" title="Array.prototype.includes()"></a>Array.prototype.includes()</h2><p>判斷 Array 是否有包含某一個值</p>
<h4 id="參數說明-Array-prototype-includes-searchElement-fromIndex"><a href="#參數說明-Array-prototype-includes-searchElement-fromIndex" class="headerlink" title="參數說明 Array.prototype.includes(searchElement, fromIndex)"></a>參數說明 Array.prototype.includes(searchElement, fromIndex)</h4><ul>
<li>searchElement : 被搜尋的元素</li>
<li>fromIndex : 從第幾個元素開始找起，預設是0 (optional)</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>includes</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">a.includes(<span class="number">2</span>); <span class="comment">// true </span></span><br><span class="line">a.includes(<span class="number">4</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"></span><br><span class="line">arr.includes(<span class="string">'c'</span>, <span class="number">3</span>);   <span class="comment">//false</span></span><br><span class="line">arr.includes(<span class="string">'c'</span>, <span class="number">100</span>); <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-indexOf"><a href="#Array-prototype-indexOf" class="headerlink" title="Array.prototype.indexOf()"></a>Array.prototype.indexOf()</h2><p>判斷該元素是 Array 哪一個 Index ，從左邊開始算起，找到第一個就回傳，如果找不到就回傳 -1</p>
<h4 id="參數說明-Array-prototype-indexOf-searchElement-fromIndex"><a href="#參數說明-Array-prototype-indexOf-searchElement-fromIndex" class="headerlink" title="參數說明 Array.prototype.indexOf(searchElement, fromIndex)"></a>參數說明 Array.prototype.indexOf(searchElement, fromIndex)</h4><ul>
<li>searchElement : 被搜尋的元素</li>
<li>fromIndex : 從第幾個元素開始找起，預設是0 (optional)</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>indexOf</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>]; </span><br><span class="line">a.indexOf(<span class="number">2</span>); <span class="comment">// 0 </span></span><br><span class="line">a.indexOf(<span class="number">7</span>); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">2</span>, <span class="number">9</span>, <span class="number">9</span>];</span><br><span class="line">array.indexOf(<span class="number">2</span>);     <span class="comment">// 0</span></span><br><span class="line">array.indexOf(<span class="number">7</span>);     <span class="comment">// -1</span></span><br><span class="line">array.indexOf(<span class="number">9</span>, <span class="number">2</span>);  <span class="comment">// 2</span></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-1</span>); <span class="comment">// -1</span></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-3</span>); <span class="comment">// 0</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-join"><a href="#Array-prototype-join" class="headerlink" title="Array.prototype.join()"></a>Array.prototype.join()</h2><p>將 Array 用指定的值 join 成一個字串，若沒有傳入參數，則預設是 comma<code>,</code>。 若傳入空字串，則不會有任何字串 join。</p>
<h4 id="參數說明-Array-prototype-join-separator"><a href="#參數說明-Array-prototype-join-separator" class="headerlink" title="參數說明 Array.prototype.join(separator)"></a>參數說明 Array.prototype.join(separator)</h4><ul>
<li>separator  : 要 join 的字串 (optional)</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>join</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'Wind'</span>, <span class="string">'Rain'</span>, <span class="string">'Fire'</span>];</span><br><span class="line">a.join();    <span class="comment">// 'Wind,Rain,Fire'</span></span><br><span class="line">a.join(<span class="string">'-'</span>); <span class="comment">// 'Wind-Rain-Fire'</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-lastIndexOf"><a href="#Array-prototype-lastIndexOf" class="headerlink" title="Array.prototype.lastIndexOf()"></a>Array.prototype.lastIndexOf()</h2><p>判斷該元素是 Array 哪一個 Index ，從右邊開始算起，找到第一個就回傳，如果找不到就回傳 -1</p>
<h4 id="參數說明-Array-prototype-lastIndexOf-searchElement-fromIndex"><a href="#參數說明-Array-prototype-lastIndexOf-searchElement-fromIndex" class="headerlink" title="參數說明 Array.prototype.lastIndexOf(searchElement, fromIndex)"></a>參數說明 Array.prototype.lastIndexOf(searchElement, fromIndex)</h4><ul>
<li>searchElement : 被搜尋的元素</li>
<li>fromIndex : 從第幾個元素開始找起，預設是0 (optional)</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>indexOf</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>];</span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>); <span class="comment">// 3</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">7</span>); <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">2</span>];</span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>);     <span class="comment">// 3</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">7</span>);     <span class="comment">// -1</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">3</span>);  <span class="comment">// 3</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">2</span>);  <span class="comment">// 0</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">-2</span>); <span class="comment">// 0</span></span><br><span class="line">numbers.lastIndexOf(<span class="number">2</span>, <span class="number">-1</span>); <span class="comment">// 3</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;判斷 Array 是否有包含某一個值 &lt;code&gt;Array.prototype.includes()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;判斷該元素是 Array 哪一個 Index &lt;code&gt;Array.prototype.indexOf()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;將 Array 用指定的值 join 成一個字串 &lt;code&gt;Array.prototype.join()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;判斷該是 Array 哪一個 Index，但是是從右邊開始算起 &lt;code&gt;Array.prototype.lastIndexOf()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice III</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-III/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-III/</id>
    <published>2017-04-16T04:02:43.000Z</published>
    <updated>2017-04-18T16:04:55.011Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>使 Array 填滿指定的值 <code>Array.prototype.fill()</code></li>
<li>過濾 Array 的資料，用起來跟 LINQ 的 <strong>where</strong> 一樣 <code>Array.prototype.filter()</code></li>
<li>找到第一筆相符的資料 <code>Array.prototype.find()</code></li>
<li>找到第一筆相符資料的 index <code>Array.prototype.findIndex()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-prototype-fill"><a href="#Array-prototype-fill" class="headerlink" title="Array.prototype.fill()"></a>Array.prototype.fill()</h2><p>可讓 Array 填滿指定的值，更改是原本的 Array</p>
<h4 id="參數說明-arr-fill-value-start-end"><a href="#參數說明-arr-fill-value-start-end" class="headerlink" title="參數說明 arr.fill(value, start, end)"></a>參數說明 <code>arr.fill(value, start, end)</code></h4><ul>
<li>value : 要填入的值</li>
<li>start : 從哪一個元素開始填，預設第0個 (optional)</li>
<li>end : 填到哪一個元素，預設是此陣列的長度 (optional)</li>
</ul>
<p>Note : start 跟 end 若填負數，則是從右邊開始算</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>fill</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>);               <span class="comment">// [4, 4, 4]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>);            <span class="comment">// [1, 4, 4]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>);         <span class="comment">// [1, 4, 3]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>);         <span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-filter"><a href="#Array-prototype-filter" class="headerlink" title="Array.prototype.filter()"></a>Array.prototype.filter()</h2><p>過濾 Array 的內容，且回傳的 Array 是一個全新的 Array</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>filter</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">value,index,array</span>) </span>{</span><br><span class="line">	</span><br><span class="line">  <span class="keyword">return</span> value &gt;= <span class="number">10</span>;</span><br><span class="line">}</span><br><span class="line"><span class="keyword">var</span> filtered = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].filter(isBigEnough);</span><br><span class="line"></span><br><span class="line"><span class="comment">//arrow function</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].filter( <span class="function">(<span class="params">value,index,array</span>) =&gt;</span>{</span><br><span class="line">	  </span><br><span class="line">  <span class="keyword">return</span> value &gt;= <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-find"><a href="#Array-prototype-find" class="headerlink" title="Array.prototype.find()"></a>Array.prototype.find()</h2><p>找到第一筆相符的元素，如果都找不到，則回傳 <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/undefined" title="undefiend" target="_blank" rel="external">undefiend</a> </p>
<h4 id="參數說明-arr-find-value-index-array"><a href="#參數說明-arr-find-value-index-array" class="headerlink" title="參數說明 arr.find(value, index, array)"></a>參數說明 <code>arr.find(value, index, array)</code></h4><ul>
<li>element : 當下元素的 value</li>
<li>index : 當下元素的 index ，從 0 開始 (optional)</li>
<li>array : array 本身 (optional)</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>find</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inventory = [</span><br><span class="line">  {<span class="attr">name</span>: <span class="string">'apples'</span>, <span class="attr">quantity</span>: <span class="number">2</span>},</span><br><span class="line">  {<span class="attr">name</span>: <span class="string">'bananas'</span>, <span class="attr">quantity</span>: <span class="number">0</span>},</span><br><span class="line">  {<span class="attr">name</span>: <span class="string">'cherries'</span>, <span class="attr">quantity</span>: <span class="number">5</span>}</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">findCherries</span>(<span class="params">fruit</span>) </span>{ </span><br><span class="line">    <span class="keyword">return</span> fruit.name === <span class="string">'cherries'</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(inventory.find(findCherries)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// arrow function</span></span><br><span class="line"><span class="keyword">var</span> result =inventory.find(<span class="function">(<span class="params">x</span>) =&gt;</span> x.name === <span class="string">'cherries'</span>);</span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>在每一個元素的訪問過程裡面，做了刪除元素的動作，該元素並不會因為被刪除而沒被訪問到。  只是因為該元素已經被刪除，所以訪問到該元素時 value = undefined。</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>-</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">6</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// Shows all indexes, including deleted</span></span><br><span class="line">a.find(<span class="function"><span class="keyword">function</span>(<span class="params">value, index</span>) </span>{</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Delete element 5 on first iteration</span></span><br><span class="line">  <span class="keyword">if</span> (index == <span class="number">0</span>) {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Deleting a[2] with value '</span> + a[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">delete</span> a[<span class="number">2</span>];    </span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// Element 5 is still visited even though deleted. value = undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Visited index '</span> + index + <span class="string">' with value '</span> + value); </span><br><span class="line">});</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br><span class="line"><span class="comment">//[0,1,undefined,6]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-findIndex"><a href="#Array-prototype-findIndex" class="headerlink" title="Array.prototype.findIndex()"></a>Array.prototype.findIndex()</h2><p>回傳第一筆符合條件的 index，若都沒有符合條件或者是 Empty Array 則回傳 -1 。</p>
<h4 id="參數說明-arr-findIndex-value-index-array"><a href="#參數說明-arr-findIndex-value-index-array" class="headerlink" title="參數說明 arr.findIndex(value, index, array)"></a>參數說明 <code>arr.findIndex(value, index, array)</code></h4><ul>
<li>element : 當下元素的 value</li>
<li>index : 當下元素的 index ，從 0 開始 (optional)</li>
<li>array : array 本身 (optional)</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>findIndex</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element</span>) </span>{</span><br><span class="line">      <span class="keyword">return</span> element &gt;= <span class="number">15</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> result = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].findIndex(isBigEnough); </span><br><span class="line">  <span class="built_in">console</span>.log(result); <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arrow function</span></span><br><span class="line"><span class="keyword">var</span> result = [<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].findIndex(<span class="function">(<span class="params">x</span>) =&gt;</span> x &gt;= <span class="number">15</span>);</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;使 Array 填滿指定的值 &lt;code&gt;Array.prototype.fill()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;過濾 Array 的資料，用起來跟 LINQ 的 &lt;strong&gt;where&lt;/strong&gt; 一樣 &lt;code&gt;Array.prototype.filter()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到第一筆相符的資料 &lt;code&gt;Array.prototype.find()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;找到第一筆相符資料的 index &lt;code&gt;Array.prototype.findIndex()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice II</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-II/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-II/</id>
    <published>2017-04-15T09:32:54.000Z</published>
    <updated>2017-04-18T16:04:55.010Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>複製 Array 自己的元素 <code>Array.prototype.copyWithin()</code></li>
<li>回傳 Array Iterator object ，terator object可取得 index 跟 value <code>Array.prototype.entries()</code></li>
<li>對 Array 的所有元素做驗證 <code>Array.prototype.every()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-prototype-copyWithin"><a href="#Array-prototype-copyWithin" class="headerlink" title="Array.prototype.copyWithin()"></a>Array.prototype.copyWithin()</h2><p>只會複製一次，原本的欄位大小是不會變的。  且沒有複製到的陣列位置，原本的值是不會改變的。</p>
<h4 id="參數說明-arr-copyWithin-target-start-end"><a href="#參數說明-arr-copyWithin-target-start-end" class="headerlink" title="參數說明 arr.copyWithin(target, start, end)"></a>參數說明 <code>arr.copyWithin(target, start, end)</code></h4><ul>
<li>target : 從第幾個位址開始複製</li>
<li>start : 複製的第一個 value 位置 (optional)</li>
<li>end : 複製的最後一個 value 位置 (optional)</li>
</ul>
<p>如以下範例:<br>1.第一個參數 2 ，表示會從 Array 裡面 value 是「3」的那個元素開始複製<br>2.第二個參數 4 ，原本的 Array 是數字 1~12，表示會省略前面 4 個元素，從 4 這個 value = 5 開始複製<br>3.第三個參數 6 ，表示只會複製到第 6 個元素 value = 6 結束<br><figure class="codeblock codeblock--tabbed"><figcaption><span>copyWithin</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>].copyWithin(<span class="number">2</span>,<span class="number">4</span>,<span class="number">6</span>);</span><br><span class="line"><span class="comment">//[1, 2, 5, 6, 5, 6, 7, 8, 9, 10, 11, 12]</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>如果參數是負數，則會從右邊開始複製<br><figure class="codeblock codeblock--tabbed"><figcaption><span>negative</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">-2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 1, 2]</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="Array-prototype-entries"><a href="#Array-prototype-entries" class="headerlink" title="Array.prototype.entries()"></a>Array.prototype.entries()</h2><p>iterator 原生用法<br><figure class="codeblock codeblock--tabbed"><figcaption><span>iterator</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = a.entries();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="built_in">console</span>.log(iterator.next().value); <span class="comment">// [2, 'c']</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>foreach的用法<br><figure class="codeblock codeblock--tabbed"><figcaption><span>iterator</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> iterator = a.entries();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> e <span class="keyword">of</span> iterator) {</span><br><span class="line">  <span class="built_in">console</span>.log(e);</span><br><span class="line">}</span><br><span class="line"><span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="comment">// [2, 'c']</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="Array-prototype-every"><a href="#Array-prototype-every" class="headerlink" title="Array.prototype.every()"></a>Array.prototype.every()</h2><p>驗證元素的內容是否符合規則，其只要有一個元素是 false ，則會馬上回傳 false 不會往下執行。</p>
<h4 id="參數說明"><a href="#參數說明" class="headerlink" title="參數說明"></a>參數說明</h4><ul>
<li>element : 當下元素的 value</li>
<li>index : 當下元素的 index ，從 0 開始</li>
<li>array : array 本身</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>every</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBigEnough</span>(<span class="params">element, index, array</span>) </span>{ </span><br><span class="line">  <span class="keyword">return</span> element &gt;= <span class="number">10</span>; </span><br><span class="line">} </span><br><span class="line"></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough);   <span class="comment">// false </span></span><br><span class="line">[<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(isBigEnough); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>arrow function 的用法<br><figure class="codeblock codeblock--tabbed"><figcaption><span>every</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">130</span>, <span class="number">44</span>].every(<span class="function"><span class="params">x</span> =&gt;</span> x &gt;= <span class="number">10</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">54</span>, <span class="number">18</span>, <span class="number">130</span>, <span class="number">44</span>].every(<span class="function"><span class="params">x</span> =&gt;</span> x &gt;= <span class="number">10</span>); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;複製 Array 自己的元素 &lt;code&gt;Array.prototype.copyWithin()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;回傳 Array Iterator object ，terator object可取得 index 跟 value &lt;code&gt;Array.prototype.entries()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;對 Array 的所有元素做驗證 &lt;code&gt;Array.prototype.every()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice I</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-I/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-I/</id>
    <published>2017-04-13T16:33:29.000Z</published>
    <updated>2017-04-18T16:04:55.008Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>從現有 Array 建立新 Array 物件 <code>Array.from()</code></li>
<li>判斷物件是不是一個 Array <code>Array.isArray()</code></li>
<li>串接兩個 Array <code>Array.prototype.concat()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h2><p>用這種方式就可以建立一個新的 Array ，這樣 array2 更改後，就不會動到 array1 了<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Array.from</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">let</span> array2 = <span class="built_in">Array</span>.from(array1) <span class="comment">// 建立新 Array</span></span><br><span class="line"><span class="built_in">console</span>.log(array1 === array2) <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<div class="alert info"><p>另一種的方法也可以用來複製 Array ，並且也可以將該 Array push 到另一個 Array</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>...Array</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array1 = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>]</span><br><span class="line"><span class="keyword">let</span> array2 = [<span class="string">'k'</span>,...array1]</span><br><span class="line"><span class="built_in">console</span>.log(array2) <span class="comment">// ['k','a','b','c']</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="arrow-functions-用法"><a href="#arrow-functions-用法" class="headerlink" title="arrow functions 用法"></a>arrow functions 用法</h3><p>使用 Array arrow functions 可以對要複製的 array 做一些操作，使用起來就跟 C# linq 的 Select 差不多。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>arrow functions</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [</span><br><span class="line">{</span><br><span class="line">	<span class="attr">id</span> : <span class="number">1</span>,</span><br><span class="line">  <span class="attr">name</span> : <span class="string">"miles"</span></span><br><span class="line">},</span><br><span class="line">{</span><br><span class="line">	<span class="attr">id</span> : <span class="number">2</span>,</span><br><span class="line">  <span class="attr">name</span> : <span class="string">"bob"</span></span><br><span class="line">}];</span><br><span class="line"><span class="keyword">let</span> result = <span class="built_in">Array</span>.from(array, x =&gt; { </span><br><span class="line">  <span class="keyword">return</span> {</span><br><span class="line">    <span class="attr">name</span> : x.name,</span><br><span class="line">    <span class="attr">type</span> : <span class="number">1</span></span><br><span class="line">  };</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="Array-isArray"><a href="#Array-isArray" class="headerlink" title="Array.isArray()"></a>Array.isArray()</h2><p>判斷物件是不是一個 Array<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Array.isArray</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);  <span class="comment">// true</span></span><br><span class="line"><span class="built_in">Array</span>.isArray({<span class="attr">foo</span>: <span class="number">123</span>}); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">'foobar'</span>);   <span class="comment">// false</span></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);  <span class="comment">// false</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="Array-prototype-concat"><a href="#Array-prototype-concat" class="headerlink" title="Array.prototype.concat()"></a>Array.prototype.concat()</h2><p>這是一個合併 Array 的功能，合併 Array 的時候會按照 Array 的順序合併<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Array.prototype.concat</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="string">'d'</span>, <span class="string">'e'</span>, <span class="string">'f'</span>];</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.concat(arr2);</span><br><span class="line"><span class="comment">// arr3 is a new array [ "a", "b", "c", "d", "e", "f" ]</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>也可以 Value 跟 Array 一起合併<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Array.prototype.concat</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> alpha = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">var</span> alphaNumeric = alpha.concat(<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>]);</span><br><span class="line"><span class="comment">// results in ['a', 'b', 'c', 1, 2, 3]</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;從現有 Array 建立新 Array 物件 &lt;code&gt;Array.from()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;判斷物件是不是一個 Array &lt;code&gt;Array.isArray()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;串接兩個 Array &lt;code&gt;Array.prototype.concat()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>PayPal 付款流程整合 後篇</title>
    <link href="https://mileslin.github.io/2017/03/PayPal-%E4%BB%98%E6%AC%BE%E6%B5%81%E7%A8%8B%E6%95%B4%E5%90%88-%E5%BE%8C%E7%AF%87/"/>
    <id>https://mileslin.github.io/2017/03/PayPal-付款流程整合-後篇/</id>
    <published>2017-03-18T17:29:33.000Z</published>
    <updated>2017-03-19T07:01:58.731Z</updated>
    
    <content type="html"><![CDATA[<h3 id="延續前篇"><a href="#延續前篇" class="headerlink" title="延續前篇 "></a>延續前篇 <a href="https://mileslin.github.io/2017/03/PayPal-付款流程整合-前篇/" title="前篇">PayPal 付款流程整合 前篇</a></h3><a id="more"></a>
<h2 id="Client-端整合"><a href="#Client-端整合" class="headerlink" title="Client 端整合"></a>Client 端整合</h2><p>單純用 Client 整合的話只需要單純用 HTML 跟 JavaScript 就能完成，不需要寫到 Server 端的程式碼。</p>
<ul>
<li><p>建立 <a href="https://developer.paypal.com/docs/integration/direct/make-your-first-call/#create-a-paypal-app" title="PayPal app" target="_blank" rel="external">PayPal app</a> 取得 credentials，傳入 client ID 。</p>
<div class="figure " style="width:;"><a class="fancybox" href="SetClientID.jpg" title="" data-fancybox-group=""><img class="fig-img" src="SetClientID.jpg" alt=""></a></div>
</li>
<li><p>在 <code>payment</code> function 使用 <code>paypal.rest.payment.create()</code> 設定付款選項。參考 : <a href="https://developer.paypal.com/docs/api/payments/#payment_create_request" title="如何建立帳單" target="_blank" rel="external">如何建立帳單</a></p>
</li>
<li><p>在 <code>onAuthorize</code> call back 顯示成功頁面</p>
</li>
</ul>
<p>以下程式碼說明如何在正式環境建立一個 $1.00 USD的帳單，當付款成功後，顯示成功頁面。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Sample</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"paypal-button"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.paypalobjects.com/api/checkout.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    paypal.Button.render({</span><br><span class="line">    </span><br><span class="line">        <span class="attr">env</span>: <span class="string">'production'</span>, <span class="comment">// Optional: specify 'sandbox' environment</span></span><br><span class="line">    </span><br><span class="line">        client: {</span><br><span class="line">            <span class="attr">sandbox</span>:    <span class="string">'xxxxxxxxx'</span>,</span><br><span class="line">            <span class="attr">production</span>: <span class="string">'xxxxxxxxx'</span></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="attr">payment</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">var</span> env    = <span class="keyword">this</span>.props.env;</span><br><span class="line">            <span class="keyword">var</span> client = <span class="keyword">this</span>.props.client;</span><br><span class="line">        </span><br><span class="line">            <span class="keyword">return</span> paypal.rest.payment.create(env, client, {</span><br><span class="line">                <span class="attr">transactions</span>: [</span><br><span class="line">                    {</span><br><span class="line">                        <span class="attr">amount</span>: { <span class="attr">total</span>: <span class="string">'1.00'</span>, <span class="attr">currency</span>: <span class="string">'USD'</span> }</span><br><span class="line">                    }</span><br><span class="line">                ]</span><br><span class="line">            });</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="attr">commit</span>: <span class="literal">true</span>, <span class="comment">// Optional: show a 'Pay Now' button in the checkout flow</span></span><br><span class="line"></span><br><span class="line">        onAuthorize: <span class="function"><span class="keyword">function</span>(<span class="params">data, actions</span>) </span>{</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// Optional: display a confirmation page here</span></span><br><span class="line">        </span><br><span class="line">            <span class="keyword">return</span> actions.payment.execute().then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">                <span class="comment">// Show a success page to the buyer</span></span><br><span class="line">            });</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }, <span class="string">'#paypal-button'</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>範例來源 :<br><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/basic-integration/" title="Basic client integration" target="_blank" rel="external">Basic client integration</a></p>
<h5 id="調整參數說明"><a href="#調整參數說明" class="headerlink" title="調整參數說明 :"></a>調整參數說明 :</h5><table>
<thead>
<tr>
<th style="text-align:left">說明</th>
<th style="text-align:left">修改說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">沙盒整合測試</td>
<td style="text-align:left"><code>env: sandbox</code></td>
</tr>
<tr>
<td style="text-align:left">立即執行付款</td>
<td style="text-align:left"><code>commit: true</code> 會顯示 <strong>Pay Now</strong> 按鈕，沒設定會顯示 <strong>Continue</strong> 按鈕</td>
</tr>
<tr>
<td style="text-align:left">付款之前顯示確認頁面</td>
<td style="text-align:left">在 <code>onAuthorize</code> call back 可使用 <code>actions.payment.get()</code> 取得帳單和付款人資訊 <div class="alert info"><p>必須顯示付款確認頁面，否則 <code>actions.payment.execute()</code> 和 <code>actions.payment.get()</code> 會無法使用。</p>
</div></td>
</tr>
</tbody>
</table>
<h2 id="Server-端整合"><a href="#Server-端整合" class="headerlink" title="Server 端整合"></a>Server 端整合</h2><p>Server 端整合有更多的彈性，更多的控制權來完成付款流程。</p>
<h3 id="設置-Client-環境"><a href="#設置-Client-環境" class="headerlink" title="設置 Client 環境"></a>設置 Client 環境</h3><ol>
<li>載入 <code>checkout.js</code></li>
<li>設定 <code>payment</code> function 建立帳單<ul>
<li>呼叫 Server <a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/advanced-integration/#set-up-the-payment" title="建立帳單" target="_blank" rel="external">建立帳單</a></li>
<li>從建立帳單的 API 取得 <code>paymentID</code>，呼叫<code>resolve(data.paymentID</code>，開始付款人授權流程。</li>
</ul>
</li>
<li>設定 <code>onAuthorize</code> 完成付款<ul>
<li>之後的 REST Payments API 呼叫，都需要用到 <code>data.paymentID</code> 和 <code>data.payerID</code>，</li>
<li>可選擇是否顯示帳單明細</li>
<li>呼叫 Server 端 <a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/advanced-integration/#execute-the-payment" title="執行付款" target="_blank" rel="external">執行付款</a></li>
</ul>
</li>
</ol>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Sample</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"paypal-button"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://www.paypalobjects.com/api/checkout.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    paypal.Button.render({</span><br><span class="line">    </span><br><span class="line">        <span class="attr">env</span>: <span class="string">'production'</span>, <span class="comment">// Optional: specify 'sandbox' environment</span></span><br><span class="line">    </span><br><span class="line">        payment: <span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>{</span><br><span class="line">               </span><br><span class="line">            <span class="keyword">var</span> CREATE_PAYMENT_URL = <span class="string">'https://my-store.com/paypal/create-payment'</span>;</span><br><span class="line">                </span><br><span class="line">            paypal.request.post(CREATE_PAYMENT_URL)</span><br><span class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{ resolve(data.paymentID); })</span><br><span class="line">                .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>{ reject(err); });</span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="attr">onAuthorize</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{</span><br><span class="line">        </span><br><span class="line">            <span class="comment">// Note: you can display a confirmation page before executing</span></span><br><span class="line">            </span><br><span class="line">            <span class="keyword">var</span> EXECUTE_PAYMENT_URL = <span class="string">'https://my-store.com/paypal/execute-payment'</span>;</span><br><span class="line"></span><br><span class="line">            paypal.request.post(EXECUTE_PAYMENT_URL,</span><br><span class="line">                    { <span class="attr">paymentID</span>: data.paymentID, <span class="attr">payerID</span>: data.payerID })</span><br><span class="line">                    </span><br><span class="line">                .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>{ <span class="comment">/* Go to a success page */</span> })</span><br><span class="line">                .catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>{ <span class="comment">/* Go to an error page  */</span> });</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">    }, <span class="string">'#paypal-button'</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>範例來源 :<br><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/advanced-integration/" title="Advanced server integration" target="_blank" rel="external">Advanced server integration</a></p>
<h3 id="Server-如何整合付款流程說明"><a href="#Server-如何整合付款流程說明" class="headerlink" title="Server 如何整合付款流程說明"></a>Server 如何整合付款流程說明</h3><ol>
<li>Client 端的 <code>payment</code> method 呼叫 Server</li>
<li>Server 呼叫 Payments API 建立帳單<!-- classes : info success warning danger no-icon -->
<div class="alert info"><p>記得呼叫 <code>create-payment</code> API 時，傳入 <code>redirect_urls</code>，當付款完成後，可以在 <code>onAuthorize</code> function 取得 <code>redirect_urls</code>。</p>
</div></li>
<li>繼步驟2，會取得 JSON 回應<div class="figure " style="width:;"><a class="fancybox" href="CreatedPaymentResponse.jpg" title="" data-fancybox-group=""><img class="fig-img" src="CreatedPaymentResponse.jpg" alt=""></a></div></li>
<li>Server 送出回應到 Client 藉以取得 paymentID<div class="figure " style="width:;"><a class="fancybox" href="PaymentID.jpg" title="" data-fancybox-group=""><img class="fig-img" src="PaymentID.jpg" alt=""></a></div></li>
<li>開始初始化付款流程， 在 client 建立的 <code>payment</code> method 從回傳的 JSON 訊息傳 <code>paymentID</code> 到 <code>checkout.js</code> script</li>
<li>開啟 lightbox 讓付款人同意付款</li>
</ol>
<h4 id="執行付款"><a href="#執行付款" class="headerlink" title="執行付款"></a>執行付款</h4><p>使用者同意付款後， <code>checkout.js</code> 會呼叫 <code>onAuthorize</code> call back。<br><!-- classes : info success warning danger no-icon --><br><div class="alert info"><p>執行付款之前，建議可以顯示付款明細</p>
</div></p>
<ol>
<li><code>onAuthorize</code> call back 呼叫 Server 並傳入 <code>data.paymentID</code> 和 <code>data.payerID</code>，執行付款</li>
<li>Server 呼叫付款完成 API 完成付款</li>
</ol>
<h3 id=""><a href="#" class="headerlink" title=""></a><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/advanced-payments-api/" title="Server 呼叫 API 步驟" target="_blank" rel="external">Server 呼叫 API 步驟</a></h3><h2 id="-1"><a href="#-1" class="headerlink" title=""></a><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/test-express-checkout/" title="測試整合流程" target="_blank" rel="external">測試整合流程</a></h2><p>要做 end-to-end 測試，須先建立 merchant<em>(Business)</em> 和 buyer<em>(Personal)</em> 帳號，才可以做沙盒環境測試。  <a href="https://developer.paypal.com/docs/api/quickstart/sandbox-account/" title="建立帳號說明" target="_blank" rel="external">建立帳號說明</a> 。</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>目前只把 PayPal 付款流程大致了解，有這些概念後，再去參考 API 文件應該會容易許多。</p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://demo.paypal.com/us/demo/home" title="Demo" target="_blank" rel="external">PayPal 和 Braintree Demo (包含程式碼)</a>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;延續前篇&quot;&gt;&lt;a href=&quot;#延續前篇&quot; class=&quot;headerlink&quot; title=&quot;延續前篇 &quot;&gt;&lt;/a&gt;延續前篇 &lt;a href=&quot;https://mileslin.github.io/2017/03/PayPal-付款流程整合-前篇/&quot; title=&quot;前篇&quot;&gt;PayPal 付款流程整合 前篇&lt;/a&gt;&lt;/h3&gt;
    
    </summary>
    
      <category term="PayPal" scheme="https://mileslin.github.io/categories/PayPal/"/>
    
    
      <category term="PayPal" scheme="https://mileslin.github.io/tags/PayPal/"/>
    
  </entry>
  
  <entry>
    <title>PayPal 付款流程整合 前篇</title>
    <link href="https://mileslin.github.io/2017/03/PayPal-%E4%BB%98%E6%AC%BE%E6%B5%81%E7%A8%8B%E6%95%B4%E5%90%88-%E5%89%8D%E7%AF%87/"/>
    <id>https://mileslin.github.io/2017/03/PayPal-付款流程整合-前篇/</id>
    <published>2017-03-18T10:33:53.000Z</published>
    <updated>2017-03-19T07:25:59.191Z</updated>
    
    <content type="html"><![CDATA[<p>現在新的PayPal新的API付款方式不像以前需要整個頁面導向PayPal，而是整個付款回流會在原本的網頁做完付款的動作。  依照官方的說明，總共有五個步驟要搞懂。</p>
<ul>
<li><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/checkout-flow/" title="付款流程" target="_blank" rel="external">付款流程</a></li>
<li><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/add-paypal-button/" title="加入 PayPal 付款按鈕" target="_blank" rel="external">加入 PayPal 付款按鈕</a></li>
<li><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/choose-integration-method/" title="選擇整合方式" target="_blank" rel="external">選擇整合方式</a></li>
<li><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/basic-integration/" title="Client 端整合" target="_blank" rel="external">Client 端整合</a> 或 <a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/advanced-integration/" title="Server 端整合" target="_blank" rel="external">Server 端整合</a></li>
<li><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/test-express-checkout/" title="測試整合流程" target="_blank" rel="external">測試整合流程</a>
</li>
</ul>
<a id="more"></a>
<h2 id="付款流程"><a href="#付款流程" class="headerlink" title="付款流程"></a>付款流程</h2><p>付款流程示意圖<br><div class="figure " style="width:;"><a class="fancybox" href="https://www.paypalobjects.com/webstatic/en_US/developer/docs/limited-release/in-context-flow.png" title="圖片來自 : https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/" data-fancybox-group="" target="_blank" rel="external"><img class="fig-img" src="https://www.paypalobjects.com/webstatic/en_US/developer/docs/limited-release/in-context-flow.png" alt="圖片來自 : https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/"></a><span class="caption">圖片來自 : https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/</span></div></p>
<ol>
<li>付款人按下付款按鈕<ul>
<li>會使用 PayPal 提供的 <code>checkout.js</code> 跳出 lightbox window</li>
<li>接下來就是使用 javascript 或者 server 端呼叫 PayPal API 初始化帳單</li>
<li>一旦帳單初始化付款流程就會在 lightbox window 正式開始</li>
</ul>
</li>
<li><p>付款人需登入 PayPal</p>
<div class="figure " style="width:;"><a class="fancybox" href="https://www.paypalobjects.com/webstatic/en_US/developer/docs/limited-release/Login_MiniBrowser.png" title="圖片來自 : https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/" data-fancybox-group="" target="_blank" rel="external"><img class="fig-img" src="https://www.paypalobjects.com/webstatic/en_US/developer/docs/limited-release/Login_MiniBrowser.png" alt="圖片來自 : https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/"></a><span class="caption">圖片來自 : https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/</span></div>
</li>
<li><p>付款人會授權 PayPal 帳單</p>
<div class="figure " style="width:;"><a class="fancybox" href="https://developer.paypal.com/img/docs/ec/RYI_MiniBrowser.png" title="圖片來自 : https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/" data-fancybox-group="" target="_blank" rel="external"><img class="fig-img" src="https://developer.paypal.com/img/docs/ec/RYI_MiniBrowser.png" alt="圖片來自 : https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/"></a><span class="caption">圖片來自 : https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/</span></div>
</li>
<li><p>付款人同意帳單後，PayPay 會關掉 lightbox window，付款人回到原本的網頁畫面。  此刻，我們可以顯示一個確認頁面，呼叫 PapPal REST API 來顯示帳單明細，內容包含帳單地址跟Email等等….</p>
</li>
<li><p>在確認頁面裡面，呼叫付款完成的 PayPal API 來完成付款。</p>
</li>
</ol>
<p>補充 : <a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/prerequisites/" title="支援的瀏覽器" target="_blank" rel="external">Express Checkout 支援的瀏覽器</a></p>
<h2 id="加入-PayPal-付款按鈕"><a href="#加入-PayPal-付款按鈕" class="headerlink" title="加入 PayPal 付款按鈕"></a>加入 PayPal 付款按鈕</h2><p>載入checkout.js<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Include checkout.js</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://www.paypalobjects.com/api/checkout.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<div class="alert danger"><p>請使用官方提供的線上版本，不要下載到local端。</p>
</div>
<h4 id="Render-the-PayPal-button"><a href="#Render-the-PayPal-button" class="headerlink" title="Render the PayPal button"></a>Render the PayPal button</h4><figure class="codeblock codeblock--tabbed"><figcaption><span>Render button</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"paypal-button"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    paypal.Button.render({</span><br><span class="line">    </span><br><span class="line">        <span class="attr">env</span>: <span class="string">'production'</span>, <span class="comment">// Specify 'sandbox' for the test environment</span></span><br><span class="line"></span><br><span class="line">        payment: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">            <span class="comment">// Set up the payment here, when the buyer clicks on the button</span></span><br><span class="line">        },</span><br><span class="line"></span><br><span class="line">        <span class="attr">onAuthorize</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data, actions</span>) </span>{</span><br><span class="line">            <span class="comment">// Execute the payment here, when the buyer approves the transaction</span></span><br><span class="line">       }</span><br><span class="line">            </span><br><span class="line">    }, <span class="string">'#paypal-button'</span>);</span><br><span class="line"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><ul>
<li>可以開啟瀏覽器開發工具，確認看看載入是否有錯誤</li>
<li>IE的環境下建議加入 <code>&lt;!DOCTYPE html&gt;</code> 和 <code>&lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot; /&gt;</code> 可避免一些兼容性的錯誤</li>
</ul>
</div>
<p>補充 : </p>
<ul>
<li><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/customize-button/" title="客製化按鈕" target="_blank" rel="external">客製化按鈕</a></li>
<li><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/customize-button/" title="checkout.js 更多應用" target="_blank" rel="external">checkout.js 更多應用</a>
</li>
</ul>
<h2 id="選擇整合方式"><a href="#選擇整合方式" class="headerlink" title="選擇整合方式"></a>選擇整合方式</h2><p>Client 整合 :</p>
<ul>
<li>只需要使用 HTML 跟 JavaScript 就可以完成付款流程</li>
</ul>
<p>Server 整合 :</p>
<ul>
<li>更有彈性</li>
<li>在 server 端呼叫 REST Payments API 建立帳單、付款等動作。</li>
</ul>
<h4 id="整合流程說明"><a href="#整合流程說明" class="headerlink" title="整合流程說明 :"></a>整合流程說明 :</h4><ol>
<li><code>checkout.js</code> render PayPal 按鈕</li>
<li>付款人點擊按鈕，建立帳單，並且彈出 lightbox window 。<br>建立帳單的方式，有兩種，參考上方的說明 : <ul>
<li>Client 整合</li>
<li>Server 整合</li>
</ul>
</li>
<li>初始化付款流程</li>
<li>付款人登入並且授權帳單</li>
<li>顯示確認頁面 (選擇性，不一定要執行此步驟)</li>
<li>付款完成<ul>
<li>Client 整合 : <code>checkout.js</code> 自動在 client 端執行付款完成手續</li>
<li>Server 整合 : Server 呼叫 REST API 完成付款</li>
</ul>
</li>
<li>顯示付款完成頁面</li>
</ol>
<h3 id=""><a href="#" class="headerlink" title=""></a><a href="https://mileslin.github.io/2017/03/PayPal-%E4%BB%98%E6%AC%BE%E6%B5%81%E7%A8%8B%E6%95%B4%E5%90%88-%E5%BE%8C%E7%AF%87/" title="後篇">PayPal 付款流程整合 後篇</a></h3><h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/checkout-flow/" title="官方文件" target="_blank" rel="external">官方文件</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;現在新的PayPal新的API付款方式不像以前需要整個頁面導向PayPal，而是整個付款回流會在原本的網頁做完付款的動作。  依照官方的說明，總共有五個步驟要搞懂。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/checkout-flow/&quot; title=&quot;付款流程&quot;&gt;付款流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/add-paypal-button/&quot; title=&quot;加入 PayPal 付款按鈕&quot;&gt;加入 PayPal 付款按鈕&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/choose-integration-method/&quot; title=&quot;選擇整合方式&quot;&gt;選擇整合方式&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/basic-integration/&quot; title=&quot;Client 端整合&quot;&gt;Client 端整合&lt;/a&gt; 或 &lt;a href=&quot;https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/advanced-integration/&quot; title=&quot;Server 端整合&quot;&gt;Server 端整合&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.paypal.com/docs/integration/direct/express-checkout/integration-jsv4/test-express-checkout/&quot; title=&quot;測試整合流程&quot;&gt;測試整合流程&lt;/a&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="PayPal" scheme="https://mileslin.github.io/categories/PayPal/"/>
    
    
      <category term="PayPal" scheme="https://mileslin.github.io/tags/PayPal/"/>
    
  </entry>
  
  <entry>
    <title>Dive into Angular Modules</title>
    <link href="https://mileslin.github.io/2017/02/Dive-into-Angular-Modules/"/>
    <id>https://mileslin.github.io/2017/02/Dive-into-Angular-Modules/</id>
    <published>2017-02-14T15:09:20.000Z</published>
    <updated>2017-03-18T10:19:33.667Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要說明如何整合多個Angular Module，讓程式碼職責跟清晰，更好維護。<br><a id="more"></a></p>
<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><p>在剛開始學Angular的時候都是把所有Component放在App Module底下，當這樣程式大的時候會變得難以維護，今天會說明Feature Module、Shared Module和Router Module，如何讓我們的程式碼更為乾淨，更好維護，而這些骨子裡其實都是Angular Module。</p>
<ul>
<li><strong>Feature Module</strong> 就是產品資訊、基本資料等等…之類的需求</li>
<li><strong>Shared Module</strong> 就是把共同用到的<em>Pipe、Component、Module</em>等等…放在這邊</li>
<li><strong>Router Module</strong> 職責在分得更細一點的話，就可以再分出<strong>Router Module</strong>來負責Router設定的工作</li>
</ul>
<h2 id="Feature-Module"><a href="#Feature-Module" class="headerlink" title="Feature Module"></a>Feature Module</h2><p>先執行指令，產生Component跟Module。<code>ng g c product.component</code>、<code>ng g module product.module</code>，然後把AppModule有關product的程式碼，都移到ProductModule裡面。</p>
<h5 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h5><ol>
<li>AppModule移除ProductComponent</li>
<li>因為FormsModule移到ProductModule裡去了，所以AppModule移除FormsModule</li>
</ol>
<p>而我們的ProductModule程式碼會變成這樣<br><figure class="codeblock codeblock--tabbed"><figcaption><span>ProductModule</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { RouterModule } from <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> { FormsModule } from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> { ProductComponent } from <span class="string">'./product.component'</span>;</span><br><span class="line"><span class="keyword">import</span> { NgModule, Component } from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> { CommonModule } from <span class="string">'@angular/common'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>({</span><br><span class="line">  imports: [</span><br><span class="line">    CommonModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    RouterModule.forChild(</span><br><span class="line">      [</span><br><span class="line">        { path: <span class="string">'product'</span>, component: ProductComponent }</span><br><span class="line">      ]</span><br><span class="line">    )</span><br><span class="line">  ],</span><br><span class="line">  declarations: [ProductComponent]</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductModule { }</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h4 id="程式碼說明"><a href="#程式碼說明" class="headerlink" title="程式碼說明"></a>程式碼說明</h4><ul>
<li><strong>CommonModule</strong> 說明可提供ngFor跟ngIf directives的功能</li>
<li><strong>FormsModule</strong> 提供ngModel 功能</li>
<li><strong>RouterModule.forChild</strong>跟<strong>RouterModule.forRoot</strong>的差別是 =&gt; <span class="highlight-text primary">不會再註冊一次Router Service。</span></li>
</ul>
<h2 id="Shared-Module"><a href="#Shared-Module" class="headerlink" title="Shared Module"></a>Shared Module</h2><p>Shared Module負責Feature Module共同的部分，只要 <span class="highlight-text primary">Feature Module Import Shared Module</span>  就可以取得這些功能。</p>
<p>一樣產生Component跟Module。<code>ng g c shared.component</code>、<code>ng g module shared.module</code> ，然後把AppModule有關shared的程式碼，都移到SharedModule裡面。<br>所以我們要做的就是把Feature Module共同的部分放到Shared Module，然後Shared Module要export這些要共用的部分，例如<strong>SharedComponent、CommonModule、FormsModule</strong>。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>SharedModule</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { FormsModule } from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> { SharedComponent } from <span class="string">'./shared.component'</span>;</span><br><span class="line"><span class="keyword">import</span> { NgModule } from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> { CommonModule } from <span class="string">'@angular/common'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>({</span><br><span class="line">  imports: [</span><br><span class="line">    CommonModule</span><br><span class="line">  ],</span><br><span class="line">  declarations: [SharedComponent],</span><br><span class="line">  exports:[</span><br><span class="line">    CommonModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    SharedComponent</span><br><span class="line">  ]</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SharedModule { }</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>所以我們的ProductModule只要import SharedModule 就可以有SharedModule export的功能，例如CommonModule跟FormsModule。  記得import SharedModule後，就要把ProductModule裡面原本的CommonModule跟FormsModule移除。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>ProductModule refactoring</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { SharedModule } from <span class="string">'./../shared/SharedModule'</span>;</span><br><span class="line"><span class="keyword">import</span> { RouterModule } from <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> { ProductComponent } from <span class="string">'./product.component'</span>;</span><br><span class="line"><span class="keyword">import</span> { NgModule, Component } from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>({</span><br><span class="line">  imports: [</span><br><span class="line">    SharedModule,</span><br><span class="line">    RouterModule.forChild(</span><br><span class="line">      [</span><br><span class="line">        { path: <span class="string">'product'</span>, component: ProductComponent }</span><br><span class="line">      ]</span><br><span class="line">    )</span><br><span class="line">  ],</span><br><span class="line">  declarations: [ProductComponent]</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductModule { }</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="Router-Module"><a href="#Router-Module" class="headerlink" title="Router Module"></a>Router Module</h2><p>現在要做的就是把ProductModule的Router設定移出來，首先先產生Routing Module <code>ng g module product-routing.module</code>，加入Product的Router設定，並且export RouterModule。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Product-RoutingModule</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { ProductComponent } from <span class="string">'./../product/product.component'</span>;</span><br><span class="line"><span class="keyword">import</span> { RouterModule } from <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> { NgModule } from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>({</span><br><span class="line">  imports: [</span><br><span class="line">    RouterModule.forChild(</span><br><span class="line">      [</span><br><span class="line">        { path: <span class="string">'product'</span>, component: ProductComponent }</span><br><span class="line">      ]</span><br><span class="line">    )</span><br><span class="line">  ],</span><br><span class="line">  exports: [RouterModule]</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductRoutingModule { }</span><br></pre></td></tr></tbody></table></figure></div></figure><br>而我們的productModule把Router設定拿掉，改成 <span class="highlight-text primary">import ProductRoutingModule</span> 就可以了。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>ProductModule refactoring routing</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { ProductRoutingModule } from <span class="string">'./../product-routing/product-routing.module'</span>;</span><br><span class="line"><span class="keyword">import</span> { SharedModule } from <span class="string">'./../shared/SharedModule'</span>;</span><br><span class="line"><span class="keyword">import</span> { ProductComponent } from <span class="string">'./product.component'</span>;</span><br><span class="line"><span class="keyword">import</span> { NgModule, Component } from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>({</span><br><span class="line">  imports: [</span><br><span class="line">    SharedModule,</span><br><span class="line">    ProductRoutingModule</span><br><span class="line">  ],</span><br><span class="line">  declarations: [ProductComponent]</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductModule { }</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>備註: AppModule的Router也是用這種方式refactoring，差別在於因為是root application module要使用的Router 所以要用RouterModule.forRoot。</p>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>今天終於把Angular Module之間的互動以及一些簡單的Module設計方式說明完了，其中有關import和export的說明可以參考這篇 <a href="https://mileslin.github.io/2017/02/NgModule-Decorator/" title="NgModule Decorator">NgModule Decorator</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天要說明如何整合多個Angular Module，讓程式碼職責跟清晰，更好維護。&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>NgModule Decorator</title>
    <link href="https://mileslin.github.io/2017/02/NgModule-Decorator/"/>
    <id>https://mileslin.github.io/2017/02/NgModule-Decorator/</id>
    <published>2017-02-13T14:57:17.000Z</published>
    <updated>2017-03-07T01:56:15.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>再深入講NgModule之前，要先說明App.Module的Decorator使用的一些原則。<br><a id="more"></a><br><div class="figure right" style="width:;"><a class="fancybox" href="1_app_module.jpg" title="app_module" data-fancybox-group=""><img class="fig-img" src="1_app_module.jpg" alt="app_module"></a><span class="caption">app_module</span></div><br>在建立Angular預設專案的時候，會有一個app.module.ts，這是我們的起始module，這Ng Module有寫了很多的Decorator，這些Decorator都有一些使用原則，要在這邊做說明。</p>
<h2 id="What-Is-an-Angular-Module"><a href="#What-Is-an-Angular-Module" class="headerlink" title="What Is an Angular Module"></a>What Is an Angular Module</h2><p>Angular module 是一個包含有NgModule decorator的class。 主要目的在於</p>
<ul>
<li>管理我們的application</li>
<li>有既定的pattern管理程式碼</li>
<li>可載入外部libraries，擴展原本的application</li>
<li>可整合其他Module的程式碼</li>
</ul>
<p>而Angular module 當application start時候，可以loaded eagerly，或者可以經由router做lazy loaded asynchronously。</p>
<h2 id="Bootstrap-Array-Truth"><a href="#Bootstrap-Array-Truth" class="headerlink" title="Bootstrap Array Truth"></a>Bootstrap Array Truth</h2><p>Bootstrap Array定義哪一個是最初的Component，使用上也有些限制。</p>
<ul>
<li>至少要有一個component，我們稱為root application component</li>
<li>只能用在root application module, <code>AppModule</code></li>
</ul>
<h2 id="Declarations-Array-Truth"><a href="#Declarations-Array-Truth" class="headerlink" title="Declarations Array Truth"></a>Declarations Array Truth</h2><p>我們建立的每一個建立的<em>component,directive,pipe</em>，都會在Angular module中宣告，這些宣告就是放在<strong>declarations</strong>，表示這些<em>component,directive,pipe</em>都是屬於這個Angular module。</p>
<ul>
<li>每一個<em>component,directive,pipe</em>只能被一個Angular module宣告</li>
<li><strong>declarations</strong> 只能宣告<em>component,directive,pipe</em>，不能放其他classes或是services</li>
<li><span class="highlight-text primary">不重覆宣告 component,directive,pipe 在其他的Angular module</span>  </li>
<li>所有被宣告的<em>component,directive,pipe</em>預設只能在同一個Angular module使用<ul>
<li>可用export的方式讓其他Angular module使用</li>
</ul>
</li>
</ul>
<h2 id="Exports-Array-Truth"><a href="#Exports-Array-Truth" class="headerlink" title="Exports Array Truth"></a>Exports Array Truth</h2><p>Exports Array可以讓我們share <em>component,directive,pipe</em> 給其他的modules使用，甚至可以re-export 3rd party modules。</p>
<ul>
<li>如果其他component需要，則Export <em>component,directive,pipe</em></li>
<li>Re-export modules to re-export their <em>component,directive,pipe</em></li>
<li><span class="highlight-text primary">Never export a service</span>
<ul>
<li>因為Services被宣告在root application Provider’s array，讓Services可被inject到其他class，所以不需要export</li>
</ul>
</li>
</ul>
<p>用法:<br><figure class="codeblock codeblock--tabbed"><figcaption><span>shared.module</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { NgModule }            from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> { CommonModule }        from <span class="string">'@angular/common'</span>;</span><br><span class="line"><span class="keyword">import</span> { FormsModule }         from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> { AwesomePipe }         from <span class="string">'./awesome.pipe'</span>;</span><br><span class="line"><span class="keyword">import</span> { HighlightDirective }  from <span class="string">'./highlight.directive'</span>;</span><br><span class="line"><span class="meta">@NgModule</span>({</span><br><span class="line">  imports:      [ CommonModule ],</span><br><span class="line">  declarations: [ AwesomePipe, HighlightDirective ],</span><br><span class="line">  exports:      [ AwesomePipe, HighlightDirective,</span><br><span class="line">                  CommonModule, FormsModule ]</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> SharedModule { }</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<a href="https://angular.io/docs/ts/latest/guide/ngmodule.html#!#shared-module" title="shared-module" target="_blank" rel="external">shared-module</a>
<h2 id="Imports-Array-Truth"><a href="#Imports-Array-Truth" class="headerlink" title="Imports Array Truth"></a>Imports Array Truth</h2><p>Angular module可以藉由importing其他的Angular module來 extend capabilities。</p>
<ul>
<li>Importing module取得該module exported的<em>component,directive,pipe</em></li>
<li>Only import what this module needs</li>
<li><span class="highlight-text primary">Importing a module does NOT provide access to its imported modules</span> 或者說 <span class="highlight-text primary">Imports are not inherited</span>
</li>
</ul>
<p>以下圖做說明，就是AppModule可以使用<code>StarComponet</code>但是沒有辦法使用<code>ngModel directive</code>，除非SharedModule re-export FormsModule，AppModule再取得SharedModule re-export的FormsModule才可以使用<code>ngModel directive</code>。<br><div class="figure " style="width:;"><a class="fancybox" href="2_ImportTruth.jpg" title="imports Array" data-fancybox-group=""><img class="fig-img" src="2_ImportTruth.jpg" alt="imports Array"></a><span class="caption">imports Array</span></div></p>
<h2 id="Providers-Array-Truth"><a href="#Providers-Array-Truth" class="headerlink" title="Providers Array Truth"></a>Providers Array Truth</h2><ul>
<li>Any service provider added to the providers array is registered at the root of the application</li>
<li>別在shared module 加入services<ul>
<li>可考慮建立一個CoreModule專門加入services，並只在AppModule importing一次</li>
</ul>
</li>
<li>Routing guards 只能被加在 Angular module 的 providers array</li>
</ul>
<a href="https://angular.io/docs/ts/latest/guide/ngmodule.html#!#providers" title="providers" target="_blank" rel="external">providers</a>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;再深入講NgModule之前，要先說明App.Module的Decorator使用的一些原則。&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Protecting Routes with Guards</title>
    <link href="https://mileslin.github.io/2017/02/Protecting-Routes-with-Guards/"/>
    <id>https://mileslin.github.io/2017/02/Protecting-Routes-with-Guards/</id>
    <published>2017-02-11T05:38:15.000Z</published>
    <updated>2017-02-13T04:30:02.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>預設的情況下，任何user都是可以瀏覽到route有對應到的網址，這並不是一個好的情況。 通常會有需要一些權限的控管。<br><a id="more"></a><br>例如:</p>
<ul>
<li>user是不被允許瀏覽到某個component</li>
<li>此網址需要先登入才能使用</li>
<li>先事先取得一些資料再顯示component</li>
<li>在離開component之前先取得改變的資料</li>
<li>或者在user離開之前詢問是否要不儲存離開</li>
</ul>
<p>以上情況，都可以在route configuration新增<code>guards</code>達成我們要的目的。</p>
<h3 id="目前共有五種guards可以使用"><a href="#目前共有五種guards可以使用" class="headerlink" title="目前共有五種guards可以使用"></a>目前共有五種guards可以使用</h3><ul>
<li>CanActivate: to mediate navigation to a route.</li>
<li>CanActivateChild: to mediate navigation to a child route.</li>
<li>CanDeactivate: to mediate navigation away from the current route.</li>
<li>Resolve: to perform route data retrieval before route activation.</li>
<li>CanLoad: to mediate navigation to a feature module loaded asynchronously.</li>
</ul>
<h3 id="Guard的回傳值決定router的行為"><a href="#Guard的回傳值決定router的行為" class="headerlink" title="Guard的回傳值決定router的行為"></a>Guard的回傳值決定router的行為</h3><div class="alert info"><ul>
<li>回傳 true，則navigation繼續</li>
<li>回傳 false，則navigation process stops</li>
</ul>
</div>
<p>而今天選擇<strong>CanActivate</strong>來做說明，其他guards的做法都是類似的。</p>
<p>原文參考:<br><a href="https://angular.io/docs/ts/latest/guide/router.html#!#guards" title="Guards" target="_blank" rel="external">Guards</a></p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>今天的範例我們要驗證使用者輸入的網址參數<em>(:id)</em>是不是個數字，如果不是數字，則導向到 <strong>welcome</strong> 頁面。 router設定如下:<br><figure class="codeblock codeblock--tabbed"><figcaption><span>configuration</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{ path: <span class="string">'detail/:id'</span>, component: DetailComponent }</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>我們先用 <code>angular cli</code> 新增一個 <span class="highlight-text primary">service component</span></p>
<div class="alert success no-icon"><p>ng g s product-guard.service</p>
</div>
<p><code>angular cli</code> 會幫我們新增好一個service component，而且我們要做的就是</p>
<ol>
<li><code>implements CanActivate</code>，實作canActivate方法</li>
<li>因為要取得網址的資料，所以<code>canActivate傳入ActivatedRouteSnapshot</code></li>
<li><code>import Router</code>使用router做導向的動作</li>
<li>驗證是否為數字，是數字回傳true，不是數字導向<strong>welcome</strong>頁面，回傳false</li>
</ol>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Service Component</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { CanActivate, ActivatedRouteSnapshot, Router } from <span class="string">'@angular/router'</span>;</span><br><span class="line"><span class="keyword">import</span> { Injectable } from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProductGuardService <span class="keyword">implements</span> CanActivate {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _router: Router</span>) { }</span><br><span class="line"></span><br><span class="line">  canActivate(route: ActivatedRouteSnapshot): <span class="built_in">boolean</span> {</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> id = +route.url[<span class="number">1</span>].path;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">isNaN</span>(id) || id &lt; <span class="number">1</span>) {</span><br><span class="line"></span><br><span class="line">      <span class="keyword">this</span>._router.navigate([<span class="string">'/welcome'</span>]);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>以上，我們component的程式碼就寫完了。</p>
<p>接下來開啟app.module</p>
<ol>
<li><code>import ProductGuardService</code></li>
<li><code>provider</code>加入 <span class="highlight-text success">ProductGuardService </span></li>
<li><code>router</code>設定多傳入 <span class="highlight-text success">canActivate : ProductGuardService</span></li>
</ol>
<figure class="codeblock codeblock--tabbed"><figcaption><span>app.module</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="keyword">import</span> { ProductGuardService } from <span class="string">'./product-guard.service'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>({</span><br><span class="line">  declarations: [</span><br><span class="line">    ...</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    ...</span><br><span class="line">    RouterModule.forRoot([      </span><br><span class="line">      {</span><br><span class="line">        path: <span class="string">'detail/:id'</span>,</span><br><span class="line">        canActivate: [ProductGuardService],</span><br><span class="line">        component: DetailComponent</span><br><span class="line">      }...</span><br><span class="line">    ])</span><br><span class="line">  ],</span><br><span class="line">  providers: [ProductGuardService],</span><br><span class="line">  ...</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule { }</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>加入以上程式碼後，就完成了。  這樣當網址像是數字這種非數字的<strong>id</strong>參數，則網址頁就會自動導向到<strong>welcome</strong>。</p>
<div class="alert success no-icon"><p><a href="http://localhost:4200/#/detail/abc" target="_blank" rel="external">http://localhost:4200/#/detail/abc</a> 導向 =&gt;  <strong><a href="http://localhost:4200/#/welcome" target="_blank" rel="external">http://localhost:4200/#/welcome</a></strong></p>
</div>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://angular.io/docs/ts/latest/guide/router.html#!#guards" title="Guards" target="_blank" rel="external">Guards</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;預設的情況下，任何user都是可以瀏覽到route有對應到的網址，這並不是一個好的情況。 通常會有需要一些權限的控管。&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Navigation and Routing Additional Techniques</title>
    <link href="https://mileslin.github.io/2017/02/Navigation-and-Routing-Additional-Techniques/"/>
    <id>https://mileslin.github.io/2017/02/Navigation-and-Routing-Additional-Techniques/</id>
    <published>2017-02-08T16:06:07.000Z</published>
    <updated>2017-02-13T04:30:02.181Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a href="https://mileslin.github.io/2017/02/Routing-Basics/" title="Routing-Basics">上一篇Routing Basics</a> 介紹基本用法後，今天要來多加說明如何帶參數，以及如何使用程式碼navigate到其他route。<br><br><a id="more"></a>
<h2 id="Passing-Parameters-to-a-Route"><a href="#Passing-Parameters-to-a-Route" class="headerlink" title="Passing Parameters to a Route"></a>Passing Parameters to a Route</h2><p>首先要記得在Route設定傳參數的path<br><figure class="codeblock codeblock--tabbed"><figcaption><span>path</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">{ path: <span class="string">'detail/:id'</span>, component: DetailComponent },</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>接著使用<code>routerLink</code>的第二個參數就可以達成傳遞參數的基本方式</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>link</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/detail',1]"</span>&gt;</span>Detail with parameter<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>在componet <code>import ActivatedRoute</code>，使用snapshot就可以取得參數值了</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>component</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { Component, OnInit } from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> { ActivatedRoute } from <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>({</span><br><span class="line">  selector: <span class="string">'app-detail'</span>,</span><br><span class="line">  templateUrl: <span class="string">'./detail.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'./detail.component.css'</span>]</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> DetailComponent <span class="keyword">implements</span> OnInit {</span><br><span class="line"></span><br><span class="line">  detailId = <span class="string">''</span>;</span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _route : ActivatedRoute</span>) { }</span><br><span class="line"></span><br><span class="line">  ngOnInit() {</span><br><span class="line">    <span class="keyword">this</span>.detailId = <span class="keyword">this</span>._route.snapshot.params[<span class="string">"id"</span>];</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Activating-a-Route-with-Code"><a href="#Activating-a-Route-with-Code" class="headerlink" title="Activating a Route with Code"></a>Activating a Route with Code</h2><p>這部分就很簡單，只要綁定事件後，在事件的method裡面navigate就可以了。  不過首先我們還是要先<code>import Router</code>，這樣才可以使用navigate。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>navigate</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { Router } from <span class="string">'@angular/router'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> _router : Router</span>) { }</span><br><span class="line"></span><br><span class="line">onBack(): <span class="built_in">void</span>{</span><br><span class="line">  <span class="keyword">this</span>._router.navigate([<span class="string">'/detail'</span>]);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://angular.io/docs/ts/latest/guide/router.html#!#route-parameters" title="route-parameters" target="_blank" rel="external">route</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;a href=&quot;https://mileslin.github.io/2017/02/Routing-Basics/&quot; title=&quot;Routing-Basics&quot;&gt;上一篇Routing Basics&lt;/a&gt; 介紹基本用法後，今天要來多加說明如何帶參數，以及如何使用程式碼navigate到其他route。&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Routing Basics</title>
    <link href="https://mileslin.github.io/2017/02/Routing-Basics/"/>
    <id>https://mileslin.github.io/2017/02/Routing-Basics/</id>
    <published>2017-02-07T17:06:40.000Z</published>
    <updated>2017-02-13T04:30:02.182Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要介紹Angular Routing提供了View之間切換的功能，以及如何使用跟怎麼設定。</p>
<a id="more"></a>
<h2 id="Routing如何使用"><a href="#Routing如何使用" class="headerlink" title="Routing如何使用?"></a>Routing如何使用?</h2><p>1.使用<code>angular/router</code>內建的router<br>2.將要使用Route的component設定在Routing設定裡面<br>3.在顯示的頁面裡面，設定route-link<br>4.當user點擊route-link的時候，顯示頁面</p>
<h2 id="範例"><a href="#範例" class="headerlink" title="範例"></a>範例</h2><p>首先我們先有app-component當作首頁，建立兩個component一個是<code>welcome</code>一個是<code>detail</code>。<br><div class="figure " style="width:;"><a class="fancybox" href="1_Two_Component.jpg" title="Component" data-fancybox-group=""><img class="fig-img" src="1_Two_Component.jpg" alt="Component"></a><span class="caption">Component</span></div></p>
<p>Component建立完，接下來就是要到<code>app.module.ts</code>設定一下Router。</p>
<ol>
<li><code>import { RouterModule } from &#39;@angular/router&#39;;</code></li>
<li>設定<code>RouterModule.forRoot</code></li>
</ol>
<figure class="codeblock codeblock--tabbed"><figcaption><span>ConfigurationRouting</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { BrowserModule } from <span class="string">'@angular/platform-browser'</span>;</span><br><span class="line"><span class="keyword">import</span> { NgModule } from <span class="string">'@angular/core'</span>;</span><br><span class="line"><span class="keyword">import</span> { FormsModule } from <span class="string">'@angular/forms'</span>;</span><br><span class="line"><span class="keyword">import</span> { HttpModule } from <span class="string">'@angular/http'</span>;</span><br><span class="line"><span class="keyword">import</span> { RouterModule } from <span class="string">'@angular/router'</span>; <span class="comment">// Import RouterModule</span></span><br><span class="line"><span class="keyword">import</span> { AppComponent } from <span class="string">'./app.component'</span>;</span><br><span class="line"><span class="keyword">import</span> { WelcomeComponent } from <span class="string">'./welcome/welcome.component'</span>;</span><br><span class="line"><span class="keyword">import</span> { DetailComponent } from <span class="string">'./detail/detail.component'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@NgModule</span>({</span><br><span class="line">  declarations: [</span><br><span class="line">    AppComponent,</span><br><span class="line">    WelcomeComponent,</span><br><span class="line">    DetailComponent</span><br><span class="line">  ],</span><br><span class="line">  imports: [</span><br><span class="line">    BrowserModule,</span><br><span class="line">    FormsModule,</span><br><span class="line">    HttpModule,</span><br><span class="line">    RouterModule.forRoot([</span><br><span class="line">      { path: <span class="string">'detail'</span>, component: DetailComponent },</span><br><span class="line">      { path: <span class="string">'detail/:id'</span>, component: DetailComponent },</span><br><span class="line">      { path: <span class="string">'welcome'</span>, component: WelcomeComponent },</span><br><span class="line">      { path: <span class="string">''</span>, redirectTo: <span class="string">'welcome'</span>, pathMatch: <span class="string">'full'</span> },</span><br><span class="line">      { path: <span class="string">'**'</span>, redirectTo: <span class="string">'welcome'</span>, pathMatch: <span class="string">'full'</span> },</span><br><span class="line">    ])</span><br><span class="line">  ],</span><br><span class="line">  providers: [],</span><br><span class="line">  bootstrap: [AppComponent]</span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppModule { }</span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>這邊要注意router的設定順序，當第一個比對到了，就不會再往下比對，所以記得把<code>wildcard path</code>的設定放在最後一個。</p>
</div>
<p>設定完之後，再經由route-link的方式來連結這兩個component。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>route-link</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/welcome']"</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/detail']"</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>最後使用 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code> 來決定Component要顯示的位置<br><figure class="codeblock codeblock--tabbed"><figcaption><span>router-outlet</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/welcome']"</span>&gt;</span>Welcome<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> [<span class="attr">routerLink</span>]=<span class="string">"['/detail']"</span>&gt;</span>Detail<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-outlet</span>&gt;</span><span class="tag">&lt;/<span class="name">router-outlet</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h3 id="後記"><a href="#後記" class="headerlink" title="後記"></a>後記</h3><p>在index.html，會看到<code>&lt;base href=&quot;/&quot;&gt;</code>這個tag，這是告訴router如何組成navigation URLs，如果沒有這個tag的話，需要再RouterModule設定 useHash:true這樣router才可以正常運作。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>RouterModule</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RouterModule.forRoot([], {useHash: <span class="literal">true</span>})</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://angular.io/docs/ts/latest/tutorial/toh-pt5.html" title="angular.io" target="_blank" rel="external">angular.io</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天要介紹Angular Routing提供了View之間切換的功能，以及如何使用跟怎麼設定。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Binding syntax</title>
    <link href="https://mileslin.github.io/2017/02/Binding-syntax/"/>
    <id>https://mileslin.github.io/2017/02/Binding-syntax/</id>
    <published>2017-02-04T15:25:57.000Z</published>
    <updated>2017-02-13T04:30:02.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>要從class將資料繫結到template上面，Angular有四種方式。</p>
<ul>
<li>內嵌繫結 ( Interpolation )</li>
<li>屬性繫結 ( Property Binding )</li>
<li>事件繫結 ( Event Binding )</li>
<li>雙向繫結 ( Two-way Binding )</li>
</ul>
<a id="more"></a>
<h2 id="Interpolation"><a href="#Interpolation" class="headerlink" title="Interpolation"></a>Interpolation</h2><p>此種資料繫結方式是屬於單向繫結，使用方法如下</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Interpolation</span><ul class="tabs"><li class="tab active">html</li><li class="tab">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">  {{title}}</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight ts" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent {</span><br><span class="line">  title = <span class="string">'app works!'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Property-Binding"><a href="#Property-Binding" class="headerlink" title="Property Binding"></a>Property Binding</h2><p>這也是屬於單向繫結，只要是Html內建的tag都可以使用這種繫結方式。這個功能非常強大，還能用在Component之間的傳值。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Property Binding</span><ul class="tabs"><li class="tab active">html</li><li class="tab">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> [<span class="attr">href</span>]=<span class="string">"googleLink"</span>&gt;</span>Google Link<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight ts" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent {</span><br><span class="line">   googleLink = <span class="string">'http://www.google.com'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="Event-Binding"><a href="#Event-Binding" class="headerlink" title="Event Binding"></a>Event Binding</h2><p>只要是瀏覽器預設的所有事件，都可以用這樣的方式綁定，而且每個一個綁定的事件，都會有特定的型別，例如範例的click事件傳入的是 <span class="highlight-text primary">MouseEvent</span> 型別。

button綁定的 <span class="highlight-text warning">(click) = "MyClick($event)</span> MyClick傳入的一定是 <strong>$event</strong>。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Event Binding</span><ul class="tabs"><li class="tab active">html</li><li class="tab">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> (<span class="attr">click</span>) = <span class="string">"MyClick($event)"</span>&gt;</span>Click<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight ts" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent {</span><br><span class="line"></span><br><span class="line">  MyClick(evt:MouseEvent) : <span class="built_in">void</span></span><br><span class="line">  {</span><br><span class="line">    <span class="built_in">console</span>.log(evt);<span class="comment">//如果當下不知道型別，可用這種方式檢查型別</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"Hello"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Two-way-Binding"><a href="#Two-way-Binding" class="headerlink" title="Two-way Binding"></a>Two-way Binding</h2><p>此種方式為雙向繫結，通常是用在input或select的原件上，讓使用者輸入的值可以傳回到class的property。  不過此種方式很浪費效能，建議斟酌使用，或者是改用事件的方式來完成類似的功能。</p>
<p>至於用法就是使用 <span class="highlight-text primary">[(ngModel)]</span> 就可以了。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Two-way Binding</span><ul class="tabs"><li class="tab active">html</li><li class="tab">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> [(<span class="attr">ngModel</span>)]=<span class="string">"filter"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight ts" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent {</span><br><span class="line">  filter : <span class="built_in">string</span> = <span class="string">''</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://angular.io/docs/ts/latest/guide/template-syntax.html" title="Binding syntax" target="_blank" rel="external">Binding syntax</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;要從class將資料繫結到template上面，Angular有四種方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;內嵌繫結 ( Interpolation )&lt;/li&gt;
&lt;li&gt;屬性繫結 ( Property Binding )&lt;/li&gt;
&lt;li&gt;事件繫結 ( Event Binding )&lt;/li&gt;
&lt;li&gt;雙向繫結 ( Two-way Binding )&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Bootstrapping App Component</title>
    <link href="https://mileslin.github.io/2017/02/Bootstrapping-App-Component/"/>
    <id>https://mileslin.github.io/2017/02/Bootstrapping-App-Component/</id>
    <published>2017-02-02T15:42:46.000Z</published>
    <updated>2017-02-13T04:30:02.172Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天要說明的是Angular是如何Bootstrapping Component的。  我們會從 pluralsight的課程 <a href="https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents" title="Angular 2: Getting Started" target="_blank" rel="external">Angular 2: Getting Started</a> 提供的 <a href="https://github.com/DeborahK/Angular2-GettingStarted/tree/master/APM%20-%20Start" title="Angular 2: Getting Started" target="_blank" rel="external">Github範例</a> 做說明。<br><a id="more"></a></p>
<p>要Bootstrapping Component我們需要完成兩件事情</p>
<ol>
<li>Load the root component(bootstrapping)</li>
<li>Host the application</li>
</ol>
<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><figure class="codeblock codeblock--tabbed"><figcaption><span>app.component.ts</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { Component } from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>({</span><br><span class="line">  selector: <span class="string">'pm-app'</span>,</span><br><span class="line">  template: <span class="string">`</span><br><span class="line">      &lt;h1&gt;Angular2: Getting Started&lt;/h1&gt;</span><br><span class="line">  `</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent { }</span><br></pre></td></tr></tbody></table></figure></div></figure>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Index.html</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- Configure SystemJS --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"systemjs.config.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span><br><span class="line">    System.import(<span class="string">'app'</span>).catch(<span class="function"><span class="keyword">function</span>(<span class="params">err</span>)</span>{ <span class="built_in">console</span>.error(err); });</span><br><span class="line">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">pm-app</span>&gt;</span>Loading App ...<span class="tag">&lt;/<span class="name">pm-app</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>Component的 <strong>selector:’pm-app’</strong> 代表指定directive的名稱，而Index的 <strong><pm-app></pm-app></strong> 我們稱為directive。  directive就是我們自己設計的元素，依上面的例子就是讀取template的Html。</p>
<p>那現在的問題是，Module是如何知道我們的root application component的呢?</p>
<ol>
<li>index.html Import App 資料夾的ES module</li>
<li>Systemjs.config.js 設定main.js為application的起點，所以main.js就是我們讀取的第一個ES module</li>
<li>main ts file bootstraps 我們的第一個Angular module，並啟動application</li>
</ol>
<p>視覺化流程就是這樣<br><div class="figure " style="width:;"><a class="fancybox" href="flow.jpg" title="啟動流程" data-fancybox-group=""><img class="fig-img" src="flow.jpg" alt="啟動流程"></a><span class="caption">啟動流程</span></div></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://github.com/DeborahK/Angular2-GettingStarted/tree/master/APM%20-%20Start" title="Angular 2: Getting Started" target="_blank" rel="external">Angular 2: Getting Started</a>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;今天要說明的是Angular是如何Bootstrapping Component的。  我們會從 pluralsight的課程 &lt;a href=&quot;https://app.pluralsight.com/library/courses/angular-2-getting-started-update/table-of-contents&quot; title=&quot;Angular 2: Getting Started&quot;&gt;Angular 2: Getting Started&lt;/a&gt; 提供的 &lt;a href=&quot;https://github.com/DeborahK/Angular2-GettingStarted/tree/master/APM%20-%20Start&quot; title=&quot;Angular 2: Getting Started&quot;&gt;Github範例&lt;/a&gt; 做說明。&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular Modules</title>
    <link href="https://mileslin.github.io/2017/01/Angular2-Modules/"/>
    <id>https://mileslin.github.io/2017/01/Angular2-Modules/</id>
    <published>2017-01-29T16:30:10.000Z</published>
    <updated>2017-02-13T04:30:02.171Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>javascrip一直存在著Namespaces的問題，意思是指很容易將variables或者functions定義在global namespace。  另一方面javascript並沒有提供管理javascript code的方式。</p>
<!-- classes : info success warning danger no-icon -->
<div class="alert info"><p>Modules 幫我們解決了這個問題</p>
</div>
<a id="more"></a>
<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul>
<li>TypeScript有提供Modules幫助我處理global namespace的問題</li>
<li>ES 2015 有定義標準來處理Module，ES 2015一個Module就是一個檔案，一個檔案就是一個Module。  所以只要建立一個js檔，使用export或者import的方式，js檔就是一個Module了。</li>
<li>Angular2有自己的Angular2 Modules，Angular2 Modules跟ES 2015 Modules是不太一樣的東西。</li>
</ul>
<h3 id="ES-2015-Modules"><a href="#ES-2015-Modules" class="headerlink" title="ES 2015 Modules"></a>ES 2015 Modules</h3><p>ES 2015 Modules的運作方式。<br>1.首先我們要有一個export的class<br><figure class="codeblock codeblock--tabbed"><figcaption><span>product.ts</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Product{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>上面的ts code會Transpile成這樣的js code<br><figure class="codeblock codeblock--tabbed"><figcaption><span>product.js</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>)</span>{}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>2.我們就可以Import該class<br><figure class="codeblock codeblock--tabbed"><figcaption><span>useProduct.ts</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { Product } from <span class="string">'./product'</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<div class="alert info"><p>import { Product } &lt;= 定義我們要import哪一個class</p>
</div>
<div class="alert info"><p>from ‘./product’ &lt;= 定義我們要讀取哪一個js檔案</p>
</div>
<h3 id="Angular-Modules"><a href="#Angular-Modules" class="headerlink" title="Angular Modules"></a>Angular Modules</h3><ul>
<li>Angular Modules 幫助我們組織Applicaiton與functionality的區塊結合在一起，每一個Angular application至少有一個Angular Module，預設為app.module。</li>
<li>當我們的application有越來越多功能的時候，則可以增加Feature Angular module。</li>
<li>我們甚至可以定義Shared Module。讓各個Angular Modules使用。</li>
</ul>
<h3 id="ES-2015-Modules-vs-Angular-Modules"><a href="#ES-2015-Modules-vs-Angular-Modules" class="headerlink" title="ES 2015 Modules vs Angular Modules"></a>ES 2015 Modules vs Angular Modules</h3><table>
<thead>
<tr>
<th>ES Modules</th>
<th>Angular Modules</th>
</tr>
</thead>
<tbody>
<tr>
<td>Code files用來import 或 export</td>
<td>Code files幫我們組織application的functionality區塊</td>
</tr>
<tr>
<td>組織code files</td>
<td>組織application</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;javascrip一直存在著Namespaces的問題，意思是指很容易將variables或者functions定義在global namespace。  另一方面javascript並沒有提供管理javascript code的方式。&lt;/p&gt;
&lt;!-- classes : info success warning danger no-icon --&gt;
&lt;div class=&quot;alert info&quot;&gt;&lt;p&gt;Modules 幫我們解決了這個問題&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
</feed>
