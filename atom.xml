<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miles&#39;s Journey</title>
  <subtitle>Dot Net Tourist</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mileslin.github.io/"/>
  <updated>2017-01-31T14:55:39.253Z</updated>
  <id>https://mileslin.github.io/</id>
  
  <author>
    <name>Miles</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welecome to Miles&#39;s Journey</title>
    <link href="https://mileslin.github.io/2100/12/Welecome-to-Miles-s-Journey/"/>
    <id>https://mileslin.github.io/2100/12/Welecome-to-Miles-s-Journey/</id>
    <published>2100-12-31T15:59:59.000Z</published>
    <updated>2017-01-31T14:55:39.253Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog.</p>
<a id="more"></a>
<p>I’m Miles, from Taiwan and I’m a web developer.</p>
<p>There are many new techniques coming out each year. I really need a blog to record what I learn.</p>
<p>This blog is exactly that. To share my web development experiences, problems with work, new techniques, Angular2, .NET MVC.. etc,. I will share all of these here.</p>
<p>I’m enthusiastic about learning languages, like Japanese and English, and jogging. I’ve participated in several half marathons. I’ll sometimes discuss these topics in my blog as well, but my main focus will be web developing.</p>
<p>Anyway, if my posts can help you solve some problems, that’s my goal.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Miles の 2017 回憶錄</title>
    <link href="https://mileslin.github.io/2018/01/Miles-%E3%81%AE-2017-%E5%9B%9E%E6%86%B6%E9%8C%84/"/>
    <id>https://mileslin.github.io/2018/01/Miles-の-2017-回憶錄/</id>
    <published>2018-01-01T09:40:59.000Z</published>
    <updated>2018-01-01T11:26:08.615Z</updated>
    
    <content type="html"><![CDATA[<p>2017 年 29 歲的我，是目前為止人生最豐富、最忙碌、最精彩的一整年。<br><div class="figure center" style="width:;"><a class="fancybox" href="https://mileslin.github.io/2018/01/Miles-の-2017-回憶錄/2017bestnine.jpg" title="2017bestnine" data-fancybox-group=""><img class="fig-img" src="https://mileslin.github.io/2018/01/Miles-の-2017-回憶錄/2017bestnine.jpg" alt="2017bestnine"></a><span class="caption">2017bestnine</span></div><div style="clear:both;"></div></p>
<a id="more"></a>
<h2 id="旅遊篇"><a href="#旅遊篇" class="headerlink" title="旅遊篇"></a>旅遊篇</h2><p>第一次出國、第一次自己出國、第一次自己出國自助旅行，這對我來說也算是蠻感動的，今年三月底去日本自助旅行玩 5 天。  從順利搭上火車到旅館、用破日文 check in、到學習怎麼在日本搭地鐵到處跑，最後完成吃日本和牛的夢想，這種一個人漂泊其他國家的心情，真的是超級有趣der。  <a href="https://www.facebook.com/xi.yi.18/videos/10155346373539170/" title="日本行回憶錄" target="_blank" rel="external">日本行回憶錄</a></p>
<h2 id="學習篇-業配文"><a href="#學習篇-業配文" class="headerlink" title="學習篇(業配文)"></a>學習篇(業配文)</h2><p>今年算是我求知慾大爆發的一年，為了能過順利完成公司交代的專案，且要效率、品質、多工(因為都會有多個專案一起來QQ)，要達成這目標就是要事先學習專案會用到的技術，而為了加速學習效率，直接刷了 <a href="https://app.pluralsight.com" title="pluralsight" target="_blank" rel="external">pluralsight</a>。  去年一整天在 pluralsight 總共完成了 28 個線上課程，不外乎都是 Angular、.net、.net core 、IIS 等等…。  這奠定了我知識廣度的 28 個課程、真的幫助我在新專案上能夠很有效率的進入狀況，減少研究時間。</p>
<h2 id="工作篇"><a href="#工作篇" class="headerlink" title="工作篇"></a>工作篇</h2><p>後半年的時期，算是我職業生涯的轉捩點，公司接了美國公司 <a href="https://www.trapac.com/" target="_blank" rel="external">Trapac</a> 的大案子，我寫 code 的時間逐漸減少，與客戶溝通的時間逐漸變多，開始學習怎麼管理專案的工作、了解客戶的需求、制定規格等等…的事情，還因此跑到 LA 去出差 2 周。  因為直接面對客戶、這樣的工作壓力的確比以前大很多，這也該是我要面對的新課題: <span class="highlight-text primary">雲淡風輕看待一切</span> 。</p>
<h2 id="感情篇"><a href="#感情篇" class="headerlink" title="感情篇"></a>感情篇</h2><p>當了單身狗 2 年後，在朋友的撮合下也被我找到女朋友啦。</p>
<h2 id="反省篇"><a href="#反省篇" class="headerlink" title="反省篇"></a>反省篇</h2><p>寫文章 100 篇、會寫 Angular、考日文檢定、跑全馬….2017 年的目標好像沒有一件事情是完成的，不過好像每年都是這樣XD。  反倒工作上的關係，開始點了不同的技能，乾脆就把這當作是 2018 年目標吧 =&gt; 學習如何專案管理 !?</p>
<h2 id="2018-年許願篇"><a href="#2018-年許願篇" class="headerlink" title="2018 年許願篇"></a>2018 年許願篇</h2><p>2018 年座右銘: <a href="https://twitter.com/realdonaldtrump/status/483688700447326209" target="_blank" rel="external">The more you know, the more you realize how much you don't know</a>。<br>期許: 多益考高高、通過 PMP~ GOGOGO~。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017 年 29 歲的我，是目前為止人生最豐富、最忙碌、最精彩的一整年。&lt;br&gt;&lt;div class=&quot;figure center&quot; style=&quot;width:;&quot;&gt;&lt;a class=&quot;fancybox&quot; href=&quot;https://mileslin.github.io/2018/01/Miles-の-2017-回憶錄/2017bestnine.jpg&quot; title=&quot;2017bestnine&quot; data-fancybox-group=&quot;&quot;&gt;&lt;img class=&quot;fig-img&quot; src=&quot;https://mileslin.github.io/2018/01/Miles-の-2017-回憶錄/2017bestnine.jpg&quot; alt=&quot;2017bestnine&quot;&gt;&lt;/a&gt;&lt;span class=&quot;caption&quot;&gt;2017bestnine&lt;/span&gt;&lt;/div&gt;&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>[英文小教室]如何使用either/neither/or/nor</title>
    <link href="https://mileslin.github.io/2017/08/%E8%8B%B1%E6%96%87%E5%B0%8F%E6%95%99%E5%AE%A4-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8either-neither-or-nor/"/>
    <id>https://mileslin.github.io/2017/08/英文小教室-如何使用either-neither-or-nor/</id>
    <published>2017-08-29T14:08:44.000Z</published>
    <updated>2017-08-29T14:43:53.716Z</updated>
    
    <content type="html"><![CDATA[<div class="figure center" style="width:;"><a class="fancybox" href="https://mileslin.github.io/2017/08/%E8%8B%B1%E6%96%87%E5%B0%8F%E6%95%99%E5%AE%A4-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8either-neither-or-nor/either_neither.jpg" title="" data-fancybox-group=""><img class="fig-img" src="https://mileslin.github.io/2017/08/%E8%8B%B1%E6%96%87%E5%B0%8F%E6%95%99%E5%AE%A4-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8either-neither-or-nor/either_neither.jpg" alt=""></a></div><div style="clear:both;"></div>
<a id="more"></a>
<h2 id="either"><a href="#either" class="headerlink" title="either"></a>either</h2><p><strong>情境 1 :</strong> 搭配 <code>or</code> 使用，用來二選一的情境<br>A: You can have either coffe or tea.<br>   <em>你可以喝咖啡或茶</em></p>
<p><strong>情境 2 :</strong> 可用來回應兩者皆可的情況<br>A: You can have either coffe or tea.<br>   <em>你可以喝咖啡或茶。</em><br>B: Either will be fine.<br>   <em>都可以。</em></p>
<p><strong>情境 3 :</strong> 兩者之間否定其中一個的用法<br>A: Either Mary or John is a spy<br>   <em>Mary 或 John 其中一個是間諜</em></p>
<h2 id="neither"><a href="#neither" class="headerlink" title="neither"></a>neither</h2><p><strong>neither 本身就有否定的意義，要注意不要使用兩次否定。</strong><br><span class="highlight-text danger">錯誤用法 : I don't want neither coffee or tea</span></p>
<p>正確用法 :<br>A: I want neither coffee nor tea.<br><em>我不喜歡咖啡，也不喜歡茶。</em> <em>(注意: 連接兩個名詞時，是使用 nor)</em></p>
<p><strong>用於同意別人的用法</strong><br>A: I don’t like rabbits.<br>B: Me neither.  <em>(也可說 : I don’t, either)</em></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><strong>[<a href="https://cafetalk.com/column/read/?id=59568&preview_key=226f60ba5be331c3ed677fda04aeb3e5&lang=en" title="HOW TO USE BOTH/AND, EITHER/NEITHER, AND OR/NOR CORRECTLY" target="_blank" rel="external">HOW TO USE BOTH/AND, EITHER/NEITHER, AND OR/NOR CORRECTLY</a>]</strong><br><strong>[<a href="http://tw.blog.voicetube.com/archives/15932" title="Neither, Either超重要，幫你比較它們的四種差別!還有他們只用在兩個名詞?!" target="_blank" rel="external">Neither, Either超重要，幫你比較它們的四種差別!還有他們只用在兩個名詞?!</a>]</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;figure center&quot; style=&quot;width:;&quot;&gt;&lt;a class=&quot;fancybox&quot; href=&quot;https://mileslin.github.io/2017/08/%E8%8B%B1%E6%96%87%E5%B0%8F%E6%95%99%E5%AE%A4-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8either-neither-or-nor/either_neither.jpg&quot; title=&quot;&quot; data-fancybox-group=&quot;&quot;&gt;&lt;img class=&quot;fig-img&quot; src=&quot;https://mileslin.github.io/2017/08/%E8%8B%B1%E6%96%87%E5%B0%8F%E6%95%99%E5%AE%A4-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8either-neither-or-nor/either_neither.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;
    
    </summary>
    
      <category term="英文小教室" scheme="https://mileslin.github.io/categories/%E8%8B%B1%E6%96%87%E5%B0%8F%E6%95%99%E5%AE%A4/"/>
    
    
      <category term="英文小教室" scheme="https://mileslin.github.io/tags/%E8%8B%B1%E6%96%87%E5%B0%8F%E6%95%99%E5%AE%A4/"/>
    
  </entry>
  
  <entry>
    <title>Template-Driven 動態加入驗證屬性注意事項</title>
    <link href="https://mileslin.github.io/2017/08/Template-Driven-%E5%8B%95%E6%85%8B%E5%8A%A0%E5%85%A5%E9%A9%97%E8%AD%89%E5%B1%AC%E6%80%A7%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A0%85/"/>
    <id>https://mileslin.github.io/2017/08/Template-Driven-動態加入驗證屬性注意事項/</id>
    <published>2017-08-13T14:19:00.000Z</published>
    <updated>2017-08-29T14:05:16.072Z</updated>
    
    <content type="html"><![CDATA[<p>在開發表單的功能時，常常會有調整 A 欄位的值， B 欄位就要驗證為必填的功能。  以 Template-Driven 的方式實作這功能，我相信閉著眼睛都能實作，例如用 Binding [required] 的方式就能完成。<br><div class="figure center" style="width:;"><a class="fancybox" href="https://mileslin.github.io/2017/08/Template-Driven-動態加入驗證屬性注意事項/Binding_Required.jpg" title="" data-fancybox-group=""><img class="fig-img" src="https://mileslin.github.io/2017/08/Template-Driven-動態加入驗證屬性注意事項/Binding_Required.jpg" alt=""></a></div><div style="clear:both;"></div></p>
<p>此時，以為能開心收工了，但…您是否發生過以下的錯誤訊息呢?<br><div class="alert danger no-icon"><p>ERROR Error: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: ‘false’. Current value: ‘true’</p>
</div></p>
<a id="more"></a>
<div class="figure center" style="width:;"><a class="fancybox" href="Error_Message.jpg" title="Expression Changed After It Has Been Checked Error" data-fancybox-group=""><img class="fig-img" src="Error_Message.jpg" alt="Expression Changed After It Has Been Checked Error"></a><span class="caption">Expression Changed After It Has Been Checked Error</span></div><div style="clear:both;"></div>
<h2 id="案例說明"><a href="#案例說明" class="headerlink" title="案例說明"></a>案例說明</h2><p>在解答這個問題之前，先敘述一下將要展示的簡單案例。</p>
<ul>
<li>畫面有 Age 與 Married 兩個下拉選單</li>
<li>Age 必填，可選擇 Child 與 Adult</li>
<li>Married ，可選擇 Married 與 Not Yet <ul>
<li><span class="highlight-text danger">當 Age 選擇 Adult 時， Married 一定要選擇，並顯示 Required 文字 
  </span>
</li>
</ul>
</li>
</ul>
<p>了解案例後，讀者可以到 <a href="https://stackblitz.com/edit/angular-expressionchangedafterithasbeencheckederror?file=app%2Fapp.component.html" title="Angular-Expression Changed After It Has Been Checked Error Demo" target="_blank" rel="external">Angular-Expression Changed After It Has Been Checked Error Demo</a> 按照步驟操作，即可出現錯誤訊息。  <em>(記得看一下程式碼喔~)</em></p>
<h2 id="Development-Mode"><a href="#Development-Mode" class="headerlink" title="Development Mode"></a>Development Mode</h2><p>如果讀者有操作上敘案例的話，按下 F12 開啟開發者模式的時候，會看到這段訊息。<br><div class="figure " style="width:;"><a class="fancybox" href="Development_Mode_Message.jpg" title="Development_Mode_Message" data-fancybox-group=""><img class="fig-img" src="Development_Mode_Message.jpg" alt="Development_Mode_Message"></a><span class="caption">Development_Mode_Message</span></div></p>
<p>什麼是 Development Mode? Development Mode 會有什麼機制? <strong>這是本篇的 Key Point 啊!!!</strong></p>
<p>引用 Angular #6005 的說明<br><blockquote><p>In short, after every round of change detection, dev mode immediately performs a second round to verify that no bindings have changed since the end of the first, as this would indicate that changes are being caused by change detection itself</p>
<footer><strong>drew-moore</strong><cite><a href="https://github.com/angular/angular/issues/6005#issuecomment-165905348" target="_blank" rel="external">EXCEPTION: Expression has changed after it was checked. #6005</a></cite></footer></blockquote></p>
<p>意思是說，在 Development Mode 的情況下，變更偵測觸發後，會立即執行第二次變更偵測，確保 status 的值沒有被變更。  如果 status 的值被變更了，則會出現該錯誤訊息，而這情形稱之為 <strong> <a href="http://blog.angular-university.io/how-does-angular-2-change-detection-really-work/#avoidingchangedetectionloopsproductionvsdevelopmentmode" title="change detection loops" target="_blank" rel="external">change detection loops</a> </strong>。</p>
<h4 id="不建議執行-enableProdMode-解決這個問題"><a href="#不建議執行-enableProdMode-解決這個問題" class="headerlink" title="不建議執行 enableProdMode() 解決這個問題"></a>不建議執行 enableProdMode() 解決這個問題</h4><p>剛剛那篇 issue 的說明，有提到一個解決方式，就是 <code>enableProdMode()</code> 啟用 Production Mode，恩….沒錯，啟用 Production Mode ，這個問題就不會再出現了。  但是這樣只是把問題隱藏而已，因為 Development Mode 會有這機制，是有原因的 !!!</p>
<p>如 stackoverflow 有人說明，第二次變更偵測的時候，變更偵測自行變更 status ，或者是在執行一個方法時，每次執行都回傳不同的值，這樣會造成 status 非常不穩定。<br><blockquote><p>If the model has changed between the regular and the additional change detection turn, this indicates that either</p>
<ul>
<li>change detection itself has caused a change</li>
<li>a method or getter returns a different value every time it is called<br>which are both bad, because it is not clear how to proceed because the model might never stabilize.</li>
</ul>
<footer><strong>Günter Zöchbauer</strong><cite><a href="https://stackoverflow.com/questions/43375532/expressionchangedafterithasbeencheckederror-explained#answer-43375600" target="_blank" rel="external">ExpressionChangedAfterItHasBeenCheckedError Explained</a></cite></footer></blockquote></p>
<p>再來是根據 <a href="https://angular-university.io/" title="Angular University" target="_blank" rel="external">Angular University</a> 的建議， <span class="highlight-text primary">最好在開發時期啟用 Development Mode，那將會避免問題發生</span>。<br><blockquote><p>We really have to go out of our way to trigger a change detection loop, but just in case its better to always use development mode during the development phase, as that will avoid the problem.</p>
<footer><strong>Angular University</strong><cite><a href="http://blog.angular-university.io/how-does-angular-2-change-detection-really-work/#arechangedetectionissuesfrequent" target="_blank" rel="external">Are change detection issues frequent?</a></cite></footer></blockquote></p>
<h2 id="Lifecycle-Hooks"><a href="#Lifecycle-Hooks" class="headerlink" title="Lifecycle Hooks"></a>Lifecycle Hooks</h2><p>好了!! 接下來就是要找出問題的發生點，在這之前會建議讀者稍微了解一下生命週期的概念。 =&gt; <a href="https://angular.io/guide/lifecycle-hooks" title="Lifecycle Hooks" target="_blank" rel="external">Lifecycle Hooks</a>，</p>
<p>根據 <a href="http://blog.angular-university.io/how-does-angular-2-change-detection-really-work/#howtotriggerachangedetectionloopinangular" title="Angular University - How to trigger a change detection loop in Angular?" target="_blank" rel="external">Angular University - How to trigger a change detection loop in Angular?</a> 的說明，這錯誤訊息是發生在 <a href="https://angular.io/guide/lifecycle-hooks#lifecycle-sequence" title="Angular Lifecycle Hooks - ngAfterViewChecked" target="_blank" rel="external">Angular Lifecycle Hooks - ngAfterViewChecked</a> 這個階段。</p>
<p>接下來請到線上範例 <a href="https://stackblitz.com/edit/angular-expressionchangedafterithasbeencheckederror-lifehook?file=app%2Fapp.component.html" title="Angular-Expression Changed After It Has Been Checked Error Demo With Lifecycle Hooks" target="_blank" rel="external">Angular-Expression Changed After It Has Been Checked Error Demo With Lifecycle Hooks</a> 看一下生命週期 ngAfterContentChecked 與 ngAfterViewChecked 執行的情形。  <em>(記得看一下程式碼喔~)</em></p>
<p>可以看到 <code>married invalid:true</code> 在 ngAfterViewChecked 的階段，值改變了!!!<br><div class="figure center" style="width:;"><a class="fancybox" href="Lifecycle_Hooks_Error_Message.jpg" title="Lifecycle_Hooks_Error_Message" data-fancybox-group=""><img class="fig-img" src="Lifecycle_Hooks_Error_Message.jpg" alt="Lifecycle_Hooks_Error_Message"></a><span class="caption">Lifecycle_Hooks_Error_Message</span></div><div style="clear:both;"></div></p>
<p>至於為什麼會這樣，請讀者看著這張圖，讓我按照順序說明<br><div class="figure center" style="width:;"><a class="fancybox" href="View_Note.jpg" title="畫面說明" data-fancybox-group=""><img class="fig-img" src="View_Note.jpg" alt="畫面說明"></a><span class="caption">畫面說明</span></div><div style="clear:both;"></div></p>
<ol>
<li>在 Age 還沒選擇時，<code>2.[required]=&quot;age.value === &#39;2&#39;&quot;</code>，不會成立，所以 <code>married.invalid === false</code></li>
<li>Age 選擇 Adult 時， view render 會先 render 到 <code>1.&lt;em *ngIf=&quot;married.invalid&quot;&gt;Required&lt;/em&gt;</code> 的位置，此時<code>married.invalid 還是 === false</code></li>
<li>接下來 view render 到 married 下拉選單，發現 <code>2.[required]=&quot;age.value === &#39;2&#39;&quot;</code>成立了，則 <code>married.invalid === true</code>， <span class="highlight-text danger">married.invalid 在這時候 status 改變了 !!!</span> 。<em>(這也是為什麼最一開始的程式範例，要執行步驟四，Required的訊息才會出現的原因)</em></li>
<li>在 ngAfterViewChecked<em>(view render 結束)</em> 階段修改 status ，蹦 !! 錯誤訊息發生</li>
</ol>
<p><strong>雙重驗證上述流程!!</strong>  根據上述流程，所以只要將 Required 訊息移到 married 下拉選單後面，讓 married 下拉選單先 render ，之後再 render Required 訊息，就不會有 view render 結束後又改變 status 的情形發生?<br><strong>A: 沒錯!!!</strong></p>
<p>讀者可以試試看，把 Required 訊息換位置<em>(如下圖)</em>。  讀者可以發現 <a href="http://blog.angular-university.io/how-does-angular-2-change-detection-really-work/#avoidingchangedetectionloopsproductionvsdevelopmentmode" title="change detection loops" target="_blank" rel="external">change detection loops</a> 的情形不再發生 !!</p>
<div class="figure center" style="width:;"><a class="fancybox" href="Change_Position.jpg" title="更改 Required 訊息位置" data-fancybox-group=""><img class="fig-img" src="Change_Position.jpg" alt="更改 Required 訊息位置"></a><span class="caption">更改 Required 訊息位置</span></div><div style="clear:both;"></div>
<ol>
<li>在 Age 還沒選擇時，<code>2.[required]=&quot;age.value === &#39;2&#39;&quot;</code>，不會成立，所以 <code>married.invalid === false</code></li>
<li>Age 選擇 Adult 時， view render 會先 render 到 married 下拉選單，發現 <code>[required]=&quot;age.value === &#39;2&#39;&quot;</code>成立了，則 <code>married.invalid === true</code>。</li>
<li>接下來 view render 到 <code>&lt;em *ngIf=&quot;married.invalid&quot;&gt;Required&lt;/em&gt;</code>，因為 <code>married.invalid</code> 在流程 2 的時候已經是 true ，所以則顯示 Required 訊息。</li>
<li>結束。  完全<span class="highlight-text success">沒有</span>在 ngAfterViewChecked<em>(view render 結束)</em> 階段修改 status</li>
</ol>
<h2 id="最終解法"><a href="#最終解法" class="headerlink" title="最終解法 !!"></a>最終解法 !!</h2><p>雖然上面有提到，只要移動 Required 訊息，問題就解決了，可是 <span class="highlight-text primary">版型就是這樣定的，錯誤訊息就是要擺那裏阿</span>。  那如果錯誤訊息真的要放那邊怎麼辦?  而 Angular 生命週期的機制就是那樣，我們能做的是<strong>改變寫法</strong>。 </p>
<p>請參考下圖，Age 下拉選單增加 chagne 事件，取代 <code>[required]=&quot;age.value === &#39;2&#39;&quot;</code> 寫法<br><div class="figure center" style="width:;"><a class="fancybox" href="Change_Event.jpg" title="使用 change 事件" data-fancybox-group=""><img class="fig-img" src="Change_Event.jpg" alt="使用 change 事件"></a><span class="caption">使用 change 事件</span></div><div style="clear:both;"></div></p>
<ul>
<li>使用 <code>@ViewChild(&#39;form&#39;) form: NgForm;</code> 取得 NgForm 物件</li>
<li>在 markMarriedAsRequiredOrOptional 方法，設定 married 為 required<div class="figure center" style="width:;"><a class="fancybox" href="Mark_Married_As_Required_Or_Optional.jpg" title="用 NgForm 取得 FormControl 設定 married 為 Required" data-fancybox-group=""><img class="fig-img" src="Mark_Married_As_Required_Or_Optional.jpg" alt="用 NgForm 取得 FormControl 設定 married 為 Required"></a><span class="caption">用 NgForm 取得 FormControl 設定 married 為 Required</span></div><div style="clear:both;"></div>
</li>
</ul>
<p>最後當然還是有提供線上範例啦，讀者可以自行點連結去看看喔。 =&gt; <strong><a href="https://stackblitz.com/edit/angular-expressionchangedafterithasbeencheckederror-solution?file=app%2Fapp.component.html" title="Solution" target="_blank" rel="external">Solution</a></strong></p>
<h2 id="題外話"><a href="#題外話" class="headerlink" title="題外話"></a>題外話</h2><p>好吧，其實這也是很重要的一個觀念，但是我不知道擺在文章的哪一段XD。  在這篇 <a href="http://blog.angular-university.io/how-does-angular-2-change-detection-really-work" title="how-does-angular-2-change-detection-really-work" target="_blank" rel="external">how-does-angular-2-change-detection-really-work</a> 的留言，有人認為說是 <a href="http://blog.angular-university.io/how-does-angular-2-change-detection-really-work/#avoidingchangedetectionloopsproductionvsdevelopmentmode" title="change detection loops" target="_blank" rel="external">change detection loops</a> 是 bug ，而 Angular University 則回應這是 feature 不是 bug ，其理由就讀者自行閱讀了。</p>
<div class="figure center" style="width:;"><a class="fancybox" href="Argument.jpg" title="題外話XD" data-fancybox-group=""><img class="fig-img" src="Argument.jpg" alt="題外話XD"></a><span class="caption">題外話XD</span></div><div style="clear:both;"></div>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>想不到一個簡單的小功能造成的一個錯誤訊息，牽扯到的觀念那麼多，剛好也趁這時候認識了 Angular 生命週期與變更偵測的機制。  另外，讀者可以參考下方延伸閱讀的文章，其中有提到 <strong>onpush-change-detection</strong> ，使用這個方式，也可以解決 <a href="http://blog.angular-university.io/how-does-angular-2-change-detection-really-work/#avoidingchangedetectionloopsproductionvsdevelopmentmode" title="change detection loops" target="_blank" rel="external">change detection loops</a> 的問題，但是原因為何，目前還沒研究出來XD。</p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><strong>[<a href="http://blog.angular-university.io/how-does-angular-2-change-detection-really-work/" title="angular-university-how-does-angular-2-change-detection-really-work" target="_blank" rel="external">angular-university-how-does-angular-2-change-detection-really-work</a>]</strong>,<strong>[<a href="https://angular.io/guide/lifecycle-hooks" title="lifecycle-hooks" target="_blank" rel="external">lifecycle-hooks</a>]</strong>,<strong>[<a href="https://stackoverflow.com/questions/43375532/expressionchangedafterithasbeencheckederror-explained" title="TitleAttribute" target="_blank" rel="external">stackoverflow-expressionchangedafterithasbeencheckederror-explained</a>]</strong>,<strong>[<a href="https://github.com/angular/angular/issues/6005" title="angular/issues/600" target="_blank" rel="external">angular/issues/6005</a>]</strong>,<strong>[<a href="https://blog.thoughtram.io/angular/2016/02/22/angular-2-change-detection-explained.html" title="thoughtram-angular-2-change-detection-explained" target="_blank" rel="external">thoughtram-angular-2-change-detection-explained</a>]</strong>  </p>
<h3 id="延伸閱讀"><a href="#延伸閱讀" class="headerlink" title="延伸閱讀"></a>延伸閱讀</h3><p><strong>[<a href="http://blog.angular-university.io/onpush-change-detection-how-it-works/" title="onpush-change-detection-how-it-works" target="_blank" rel="external">onpush-change-detection-how-it-works</a>]</strong>,<strong>[<a href="https://angular-2-training-book.rangle.io/handout/change-detection/" title="training-book-change-detection" target="_blank" rel="external">training-book-change-detection</a>]</strong>,<strong>[<a href="https://alligator.io/angular/change-detection-strategy/" title="change-detection-strategy" target="_blank" rel="external">change-detection-strategy</a>]</strong>,<strong>[<a href="https://angular.io/api/forms/AbstractControl#setValidators" title="AbstractControl" target="_blank" rel="external">AbstractControl</a>]</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在開發表單的功能時，常常會有調整 A 欄位的值， B 欄位就要驗證為必填的功能。  以 Template-Driven 的方式實作這功能，我相信閉著眼睛都能實作，例如用 Binding [required] 的方式就能完成。&lt;br&gt;&lt;div class=&quot;figure center&quot; style=&quot;width:;&quot;&gt;&lt;a class=&quot;fancybox&quot; href=&quot;https://mileslin.github.io/2017/08/Template-Driven-動態加入驗證屬性注意事項/Binding_Required.jpg&quot; title=&quot;&quot; data-fancybox-group=&quot;&quot;&gt;&lt;img class=&quot;fig-img&quot; src=&quot;https://mileslin.github.io/2017/08/Template-Driven-動態加入驗證屬性注意事項/Binding_Required.jpg&quot; alt=&quot;&quot;&gt;&lt;/a&gt;&lt;/div&gt;&lt;div style=&quot;clear:both;&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;此時，以為能開心收工了，但…您是否發生過以下的錯誤訊息呢?&lt;br&gt;&lt;div class=&quot;alert danger no-icon&quot;&gt;&lt;p&gt;ERROR Error: ExpressionChangedAfterItHasBeenCheckedError: Expression has changed after it was checked. Previous value: ‘false’. Current value: ‘true’&lt;/p&gt;
&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular 單元測試起手式</title>
    <link href="https://mileslin.github.io/2017/08/Angular-%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6%E8%B5%B7%E6%89%8B%E5%BC%8F/"/>
    <id>https://mileslin.github.io/2017/08/Angular-單元測試起手式/</id>
    <published>2017-08-07T13:50:54.000Z</published>
    <updated>2017-08-07T15:35:16.408Z</updated>
    
    <content type="html"><![CDATA[<a href="https://jasmine.github.io/index.html" title="jasmine" target="_blank" rel="external">jasmine</a> 是一套 unit testing framework，用起來直覺，也提供一些功能方便我們寫測試，而 <a href="https://karma-runner.github.io/1.0/index.html" title="karma" target="_blank" rel="external">karma</a> 是一套 command line test runner, 用來啟動瀏覽器，執行測試程式碼。  <a href="https://github.com/angular/angular-cli" title="angular cli" target="_blank" rel="external">angular cli</a> 建立專案時，預設提供這兩樣測試工具，來幫助我們寫單元測試。<br><br><a id="more"></a>
<h2 id="建立-spy-object"><a href="#建立-spy-object" class="headerlink" title="建立 spy object"></a>建立 spy object</h2><p>在這邊我有一個 VoterService ，且有一個 deleteVoter 的方法，可以執行刪除的動作，而為了能發 Http 到 Server，Angular 都是用 <a href="https://angular.io/api/http/Http" title="HTTP" target="_blank" rel="external">HTTP</a> 這類別來發送 http request，所以我建構式注入了 HTTP，而我在單元測試的時候，也就可以注入假的 HTTP 物件。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>delete voter</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Injectable</span>()</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> VoterService {</span><br><span class="line"></span><br><span class="line">  <span class="keyword">constructor</span>(<span class="params"><span class="keyword">private</span> http: Http</span>) {}</span><br><span class="line"></span><br><span class="line">  deleteVoter(session: ISession, voterName: <span class="built_in">string</span>) {</span><br><span class="line">    session.voters = session.voters.filter(voter =&gt; voter !== voterName);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.http.delete(<span class="string">`<span class="subst">${environment.host}</span>/api/sessions/<span class="subst">${session.id}</span>`</span>).catch(<span class="keyword">this</span>.handleError).subscribe();</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> handleError(error: Response) {</span><br><span class="line">    <span class="keyword">return</span> Observable.throw(error.statusText);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="使用-建立假的-HTTP-物件。"><a href="#使用-建立假的-HTTP-物件。" class="headerlink" title="使用   建立假的 HTTP 物件。"></a>使用  <a href="https://jasmine.github.io/api/edge/jasmine.html#.createSpyObj" title="createSpyObj" target="_blank" rel="external">createSpyObj</a> 建立假的 HTTP 物件。</h3><p>參數說明:</p>
<ul>
<li>mockHttp : base name, 可隨意輸入</li>
<li>[‘delete’] : Spy 物件有 delete 這個方法<figure class="codeblock codeblock--tabbed"><figcaption><span>Spy</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mockHttp = jasmine.createSpyObj(<span class="string">'mockHttp'</span>, [<span class="string">'delete'</span>]);</span><br></pre></td></tr></tbody></table></figure></div></figure>
</li>
</ul>
<p>撰寫完整的單元測試，而這裡我們要確切的指定 delete 方法回傳 <code>Observable</code> 物件，否則 <code>.catch</code> 與 <code>.subscribe</code> 則會錯誤。</p>
<ul>
<li><code>mockHttp.delete.and.returnValue(Observable.of(false));</code> : Spy 物件的 delete 方法回傳 <code>Observable</code> ， 因為要測試的 deleteVoter 方法，並沒有在 subscribe 裡面執行任何程式碼，所以使用 <code>Observable.of(false)</code> 建立一個 <code>Observable</code> 物件。<figure class="codeblock codeblock--tabbed"><figcaption><span>unit test</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'VoterService'</span>, () =&gt; {</span><br><span class="line">  <span class="keyword">let</span> voterService: VoterService,</span><br><span class="line">    mockHttp;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; {</span><br><span class="line">    mockHttp = jasmine.createSpyObj(<span class="string">'mockHttp'</span>, [<span class="string">'delete'</span>])</span><br><span class="line">    voterService = <span class="keyword">new</span> VoterService(mockHttp);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'deleteVoter'</span>, () =&gt; {</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should remove the session from the list of sessions'</span>, () =&gt; {</span><br><span class="line">      <span class="keyword">var</span> session = { id: <span class="number">6</span>, voters: [<span class="string">"joe"</span>, <span class="string">"john"</span>]};      </span><br><span class="line">      mockHttp.delete.and.returnValue(Observable.of(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">      voterService.deleteVoter2(&lt;ISession&gt;session, <span class="string">"joe"</span>);</span><br><span class="line"></span><br><span class="line">      expect(session.voters.length).toBe(<span class="number">1</span>);</span><br><span class="line">      expect(session.voters[<span class="number">0</span>]).toBe(<span class="string">"john"</span>);</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></div></figure>
</li>
</ul>
<h2 id="驗證傳入參數"><a href="#驗證傳入參數" class="headerlink" title="驗證傳入參數"></a>驗證傳入參數</h2><p>新增另一個 addVoter 的方法，執行 http.post 發送資料到 <code>http://localhost:3000/api/sessions/voters/joe</code> API 位址<br><figure class="codeblock codeblock--tabbed"><figcaption><span>addVoter</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">addVoter(session: ISession, voterName: <span class="built_in">string</span>) {</span><br><span class="line">  session.voters.push(voterName);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> headers = <span class="keyword">new</span> Headers({ <span class="string">'Content-Type'</span>: <span class="string">'application/json'</span>});</span><br><span class="line">  <span class="keyword">let</span> options = <span class="keyword">new</span> RequestOptions({headers: headers});</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> url = <span class="string">`<span class="subst">${environment.host}</span>/api/sessions/voters/<span class="subst">${voterName}</span>`</span>;</span><br><span class="line">  <span class="keyword">this</span>.http.post(url, <span class="built_in">JSON</span>.stringify({}), options).catch(<span class="keyword">this</span>.handleError).subscribe();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>使用 <strong>toHaveBeenCalledWith</strong> 驗證 post 傳入的網址是否如預期，以及使用 <strong>jasmine.any</strong> 驗證傳入的物件型別是否如預期。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>unit test</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">describe(<span class="string">'VoterService'</span>, () =&gt; {</span><br><span class="line">  <span class="keyword">let</span> voterService: VoterService,</span><br><span class="line">    mockHttp;</span><br><span class="line"></span><br><span class="line">  beforeEach(() =&gt; {</span><br><span class="line">    mockHttp = jasmine.createSpyObj(<span class="string">'mockHttp'</span>, [<span class="string">'delete'</span>, <span class="string">'post'</span>])</span><br><span class="line">    voterService = <span class="keyword">new</span> VoterService(mockHttp);</span><br><span class="line">  });</span><br><span class="line"></span><br><span class="line">  describe(<span class="string">'addVoter'</span>, () =&gt; {</span><br><span class="line"></span><br><span class="line">    it(<span class="string">'should call http.post with the right URL'</span>, () =&gt; {</span><br><span class="line">      <span class="keyword">var</span> session = { id: <span class="number">6</span>, voters: [<span class="string">"john"</span>]};</span><br><span class="line">      mockHttp.post.and.returnValue(Observable.of(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">      voterService.addVoter(&lt;ISession&gt;session, <span class="string">"joe"</span>);</span><br><span class="line"></span><br><span class="line">      expect(mockHttp.post).toHaveBeenCalledWith(<span class="string">'http://localhost:3000/api/sessions/voters/joe'</span>, <span class="string">"{}"</span>, jasmine.any(RequestOptions));</span><br><span class="line">    })</span><br><span class="line"></span><br><span class="line">  })</span><br><span class="line"></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><strong>[<a href="https://jasmine.github.io/2.0/introduction.html" title="jasmine sample" target="_blank" rel="external">jasmine sample</a>]</strong><br><strong>[<a href="https://karma-runner.github.io/1.0/index.html" title="karma" target="_blank" rel="external">karma</a>]</strong><br><strong>[<a href="https://app.pluralsight.com/library/courses/angular-fundamentals/table-of-contents" title="angular-fundamentals" target="_blank" rel="external">angular-fundamentals</a>]</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;a href=&quot;https://jasmine.github.io/index.html&quot; title=&quot;jasmine&quot;&gt;jasmine&lt;/a&gt; 是一套 unit testing framework，用起來直覺，也提供一些功能方便我們寫測試，而 &lt;a href=&quot;https://karma-runner.github.io/1.0/index.html&quot; title=&quot;karma&quot;&gt;karma&lt;/a&gt; 是一套 command line test runner, 用來啟動瀏覽器，執行測試程式碼。  &lt;a href=&quot;https://github.com/angular/angular-cli&quot; title=&quot;angular cli&quot;&gt;angular cli&lt;/a&gt; 建立專案時，預設提供這兩樣測試工具，來幫助我們寫單元測試。&lt;br&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>使用範本參考變數存取 Child Component</title>
    <link href="https://mileslin.github.io/2017/07/%E4%BD%BF%E7%94%A8%E7%AF%84%E6%9C%AC%E5%8F%83%E8%80%83%E8%AE%8A%E6%95%B8%E5%AD%98%E5%8F%96-Child-Component/"/>
    <id>https://mileslin.github.io/2017/07/使用範本參考變數存取-Child-Component/</id>
    <published>2017-07-31T15:33:20.000Z</published>
    <updated>2017-07-31T15:52:27.776Z</updated>
    
    <content type="html"><![CDATA[<p>Angular 的架構基本上就是 Component 包 Component，所以常常會有情況存取 Component 底下的 Component 一些資源，而只要用範本參考變數，就能很輕易達到這樣的功能。</p>
<a id="more"></a>
<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><p>首先我有一個 <code>ProfileComponent</code> ，程式碼如下</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>ProfileComponent</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { Component } from <span class="string">'@angular/core'</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span>({</span><br><span class="line">  selector: <span class="string">'profile'</span>,</span><br><span class="line">  templateUrl: <span class="string">'app/profile.component.html'</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> ProfileComponent {</span><br><span class="line">  name = <span class="string">'Miles'</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>而我的 <code>app.component.html</code> 會加入 <code>ProfileComponent</code>，且 <code>ProfileComponent</code> 加入範本參考變數 <span class="highlight-text primary">#profile</span> </p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>AppComponentHtml</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">profile</span> #<span class="attr">profile</span>&gt;</span><span class="tag">&lt;/<span class="name">profile</span>&gt;</span></span><br><span class="line"></span><br><span class="line">My name is {{profile.name}}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>用這種方式就能把 <code>Child Component</code> 當作一個實體來使用，直接呼叫 Property 或方法。</p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><strong>[<a href="https://angular-2-training-book.rangle.io/handout/components/app_structure/access_child_components_from_template.html" title="Access Child Components From the Template" target="_blank" rel="external">Access Child Components From the Template</a>]</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular 的架構基本上就是 Component 包 Component，所以常常會有情況存取 Component 底下的 Component 一些資源，而只要用範本參考變數，就能很輕易達到這樣的功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>泛型轉型的小技巧</title>
    <link href="https://mileslin.github.io/2017/07/%E6%B3%9B%E5%9E%8B%E8%BD%89%E5%9E%8B%E7%9A%84%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>https://mileslin.github.io/2017/07/泛型轉型的小技巧/</id>
    <published>2017-07-29T13:39:41.000Z</published>
    <updated>2017-07-29T15:16:50.137Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>有時候在寫一些泛型程式的時候，難免會有一些轉型上的需求。  而在設計上，總不能當有需要轉型的時候就寫一個 if 來判斷此情況需要轉型成什麼類別，這樣就有點失去泛型的意義。  所以今天就分享一些小技巧，怎麼處理這些轉型的情況。</p>
</li>
<li><p>使用父類別的小技巧，讓不同泛型型別的類別，一起放在同一個 List 裡面</p>
</li>
</ul>
<a id="more"></a>
<h2 id="TypeConverter"><a href="#TypeConverter" class="headerlink" title="TypeConverter"></a>TypeConverter</h2><p>首先我設計一個 Convert 方法，主要功能是</p>
<ul>
<li>TSource : 指定傳入的型別</li>
<li>TDestination : 輸出指定型別</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>MyConverter</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyConverter</span></span><br><span class="line">  {</span><br><span class="line">      <span class="keyword">public</span> <span class="keyword">static</span> TDestination Convert&lt;TSource, TDestination&gt;(TSource <span class="keyword">value</span>)</span><br><span class="line">      {</span><br><span class="line">          <span class="comment">// return TDestination's Value</span></span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>要完成這個轉型的功能，我們可以使用 <a href="https://msdn.microsoft.com/query/dev14.query?appId=Dev14IDEF1&l=ZH-TW&k=k(System.ComponentModel.TypeDescriptor);k(TargetFrameworkMoniker-.NETFramework,Version%3Dv4.6.1);k(DevLang-csharp)&rd=true" title="TypeDescriptor" target="_blank" rel="external">TypeDescriptor</a> 取得 <a href="https://msdn.microsoft.com/zh-tw/library/y13battt(v=vs.110).aspx" title="TypeConverter" target="_blank" rel="external">TypeConverter</a> ， 使用 <code>TypeConverter</code> 幫我們完成轉型的功能，只要是原生型別預設能夠互相轉型，此功能就能夠幫我們做到轉型的這件事情，例如 :  <strong>int</strong>, <strong>double</strong>, <strong>decimal</strong> 之間的轉型。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>TypeConverter</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyConverter</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TDestination Convert&lt;TSource, TDestination&gt;(TSource <span class="keyword">value</span>)</span><br><span class="line">    {            </span><br><span class="line">        <span class="keyword">var</span> converter = TypeDescriptor.GetConverter(<span class="keyword">typeof</span>(TSource));</span><br><span class="line"></span><br><span class="line">        TDestination result = <span class="keyword">default</span>(TDestination);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 判斷能不能轉型</span></span><br><span class="line">        <span class="keyword">if</span> (converter.CanConvertTo(<span class="keyword">typeof</span>(TDestination)))</span><br><span class="line">        {</span><br><span class="line">            result = (TDestination)(converter.ConvertTo(<span class="keyword">value</span>, <span class="keyword">typeof</span>(TDestination)));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>使用方式<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Usage</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>{</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = MyConverter.Convert&lt;<span class="keyword">decimal</span>, <span class="keyword">int</span>&gt;(<span class="number">102.2</span>m);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(result); <span class="comment">// print : 102</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="使用-讓轉型更靈活"><a href="#使用-讓轉型更靈活" class="headerlink" title="使用  讓轉型更靈活"></a>使用 <a href="https://msdn.microsoft.com/query/dev14.query?appId=Dev14IDEF1&l=ZH-TW&k=k(System.Converter%602);k(TargetFrameworkMoniker-.NETFramework,Version%3Dv4.6.1);k(DevLang-csharp)&rd=true" title="Converter" target="_blank" rel="external">Converter</a> 讓轉型更靈活</h2><p>在上面的例子中，會發生一些預設無法轉型的情況發生，例如: int 轉型成 DateTime。  當我們有這種情形發生的時候，盡量不要將怎麼轉型這件事情，寫在 Convert 方法裡面，我們可以在呼叫這個方法的時候，告訴這個方法怎麼轉型，例如: 我要 int 轉型成 DateTime 的方式先寫好，然後傳入。</p>
<p>以底下這個例子，我將傳入 型別是 int 的值，當作 DateTime 要增加幾天，最後輸出增加天數後的 DateTime。</p>
<p><strong>Convert 方法傳入第 2 個參數 <code>Converter&lt;TSource, TDestination&gt; converter</code> ， 當有傳入 converter 的時候，我就用 converter 來轉型</strong></p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>MyConverter</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyConverter</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> TDestination Convert&lt;TSource, TDestination&gt;(TSource <span class="keyword">value</span>, Converter&lt;TSource, TDestination&gt; converter = <span class="literal">null</span>)</span><br><span class="line">    {</span><br><span class="line">        <span class="keyword">var</span> typeConverter = TypeDescriptor.GetConverter(<span class="keyword">typeof</span>(TSource));</span><br><span class="line"></span><br><span class="line">        TDestination result = <span class="keyword">default</span>(TDestination);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (converter != <span class="literal">null</span>)</span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 使用 converter 轉型</span></span><br><span class="line">            result = converter(<span class="keyword">value</span>);</span><br><span class="line">        }</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        {</span><br><span class="line">            <span class="comment">// 沒有傳入 converter ，則使用預設的方式轉型</span></span><br><span class="line">            result = (TDestination)(typeConverter.ConvertTo(<span class="keyword">value</span>, <span class="keyword">typeof</span>(TDestination)));</span><br><span class="line">        }</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h4 id="撰寫-int-如何轉型成-DateTime-的-delegate"><a href="#撰寫-int-如何轉型成-DateTime-的-delegate" class="headerlink" title="撰寫 int 如何轉型成 DateTime 的 delegate"></a>撰寫 int 如何轉型成 DateTime 的 delegate</h4><p>我將 DateTime 時間設定在 2017/1/1 ， 然後當我傳入 5 的時候，使用 Converter 將 5 轉型成 2017/1/1 加 5 天的 DateTime 時間。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Usage</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="keyword">string</span>[] args</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        Converter&lt;<span class="keyword">int</span>, DateTime&gt; dateTimeConverter = x =&gt; </span><br><span class="line">        {</span><br><span class="line">            <span class="keyword">var</span> date = <span class="keyword">new</span> DateTime(<span class="number">2017</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> date.AddDays(x);                </span><br><span class="line">        };</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> result = MyConverter.Convert&lt;<span class="keyword">int</span>, DateTime&gt;(<span class="number">5</span>, dateTimeConverter);</span><br><span class="line"></span><br><span class="line">        Console.WriteLine(result); <span class="comment">// print : 2017/1/6</span></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="同場加映，使用父類別的小技巧"><a href="#同場加映，使用父類別的小技巧" class="headerlink" title="同場加映，使用父類別的小技巧"></a>同場加映，使用父類別的小技巧</h2><p>我要將 List 傳入一個能夠使用不同型別泛型的功能，例如下圖:<br><div class="figure " style="width:;"><a class="fancybox" href="error.jpg" title="error" data-fancybox-group=""><img class="fig-img" src="error.jpg" alt="error"></a><span class="caption">error</span></div></p>
<p>當然!! 編譯器不會讓我們這樣做，那如果真的有功能想要達成這種方式的話，我們可以新增一個父類別，List 泛型就是父類別的型別就可以了，例如下圖:<br><div class="figure " style="width:;"><a class="fancybox" href="success.jpg" title="success" data-fancybox-group=""><img class="fig-img" src="success.jpg" alt="success"></a><span class="caption">success</span></div></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><strong>[<a href="https://app.pluralsight.com/player?course=csharp-generics&author=scott-allen&name=csharp-generics-m4-methods&clip=1&mode=live" title="Generic method" target="_blank" rel="external">Generic method</a>]</strong><br><strong>[<a href="https://app.pluralsight.com/player?course=csharp-generics&author=scott-allen&name=csharp-generics-m7-tips&clip=3&mode=live" title="Using Base Types" target="_blank" rel="external">Using Base Types</a>]</strong><br><strong>[<a href="https://msdn.microsoft.com/query/dev14.query?appId=Dev14IDEF1&l=ZH-TW&k=k(System.ComponentModel.TypeDescriptor);k(TargetFrameworkMoniker-.NETFramework,Version%3Dv4.6.1);k(DevLang-csharp)&rd=true" title="TypeDescriptor" target="_blank" rel="external">TypeDescriptor</a>]</strong><br><strong>[<a href="https://msdn.microsoft.com/query/dev14.query?appId=Dev14IDEF1&l=ZH-TW&k=k(System.Converter%602);k(TargetFrameworkMoniker-.NETFramework,Version%3Dv4.6.1);k(DevLang-csharp)&rd=true" title="Converter" target="_blank" rel="external">Converter</a>]</strong><br><strong>[<a href="http://www.cnblogs.com/ericwen/archive/2007/12/11/TypeConverter.html" title="深度解析 TypeConverter & TypeConverterAttribute （一）" target="_blank" rel="external">深度解析 TypeConverter & TypeConverterAttribute （一）</a>]</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;有時候在寫一些泛型程式的時候，難免會有一些轉型上的需求。  而在設計上，總不能當有需要轉型的時候就寫一個 if 來判斷此情況需要轉型成什麼類別，這樣就有點失去泛型的意義。  所以今天就分享一些小技巧，怎麼處理這些轉型的情況。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用父類別的小技巧，讓不同泛型型別的類別，一起放在同一個 List 裡面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="C#" scheme="https://mileslin.github.io/categories/C/"/>
    
    
      <category term="C#" scheme="https://mileslin.github.io/tags/C/"/>
    
      <category term="Generics" scheme="https://mileslin.github.io/tags/Generics/"/>
    
  </entry>
  
  <entry>
    <title>Type Keyword and Union Types</title>
    <link href="https://mileslin.github.io/2017/07/Type-Keyword-and-Union-Types/"/>
    <id>https://mileslin.github.io/2017/07/Type-Keyword-and-Union-Types/</id>
    <published>2017-07-24T15:49:42.000Z</published>
    <updated>2017-07-24T16:30:43.456Z</updated>
    
    <content type="html"><![CDATA[<p>Type Keyword 是 typescript 能將型別取一個別名的方式，例如我將型別 <code>string</code> assign 給 myType，之後就可以用 myType 來定義變數的型別。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>type keyword</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> myType = <span class="built_in">string</span>;</span><br><span class="line"><span class="keyword">let</span> a: myType = <span class="string">'hello'</span>;</span><br><span class="line"><span class="keyword">let</span> b: myType = <span class="number">10</span>; <span class="comment">// Type 'number' is not assignable to type 'string'</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<a id="more"></a>
<h2 id="限定傳入字串的值"><a href="#限定傳入字串的值" class="headerlink" title="限定傳入字串的值"></a>限定傳入字串的值</h2><p>其中還有一種用法，就可以限制限定 myType 只能允許是有些特定字串的值，例如我只允許字串只能輸入 <code>&quot;cash&quot;</code> ，輸入其他字串則會顯示錯誤。<br><div class="figure " style="width:;"><a class="fancybox" href="myType_Cash.jpg" title="myType_Cash" data-fancybox-group=""><img class="fig-img" src="myType_Cash.jpg" alt="myType_Cash"></a><span class="caption">myType_Cash</span></div></p>
<h2 id="搭配使用-Union-Types"><a href="#搭配使用-Union-Types" class="headerlink" title="搭配使用 Union Types"></a>搭配使用 Union Types</h2><p>搭配使用 Union Types ，可以讓傳入字串有更多選擇，例如我允許字串只能輸入 <code>&quot;cash&quot;</code>、<code>&quot;credit&quot;</code>、<code>&quot;paypal&quot;</code><br><div class="figure " style="width:;"><a class="fancybox" href="union_type.jpg" title="union_type" data-fancybox-group=""><img class="fig-img" src="union_type.jpg" alt="union_type"></a><span class="caption">union_type</span></div></p>
<p><strong>可以不要有別名，直接在 function 參數裡面直接定義能傳入那些字串</strong><br><div class="figure " style="width:;"><a class="fancybox" href="define_in_function.jpg" title="define_in_function" data-fancybox-group=""><img class="fig-img" src="define_in_function.jpg" alt="define_in_function"></a><span class="caption">define_in_function</span></div></p>
<h2 id="可用自訂義的型別"><a href="#可用自訂義的型別" class="headerlink" title="可用自訂義的型別"></a>可用自訂義的型別</h2><p>Union Types 也可以用自訂義的型別或介面<br><div class="figure " style="width:;"><a class="fancybox" href="use_interface_and_class.jpg" title="use_interface_and_class" data-fancybox-group=""><img class="fig-img" src="use_interface_and_class.jpg" alt="use_interface_and_class"></a><span class="caption">use_interface_and_class</span></div></p>
<p><strong>可以自訂義 function type</strong><br><div class="figure " style="width:;"><a class="fancybox" href="callback.jpg" title="callback" data-fancybox-group=""><img class="fig-img" src="callback.jpg" alt="callback"></a><span class="caption">callback</span></div></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><strong>[<a href="https://angular-2-training-book.rangle.io/handout/features/type_keyword.html" title="type keyword" target="_blank" rel="external">type keyword</a>]</strong><br><strong>[<a href="http://www.typescriptlang.org/play/" title="typescript online" target="_blank" rel="external">typescript online</a>]</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Type Keyword 是 typescript 能將型別取一個別名的方式，例如我將型別 &lt;code&gt;string&lt;/code&gt; assign 給 myType，之後就可以用 myType 來定義變數的型別。&lt;br&gt;&lt;figure class=&quot;codeblock codeblock--tabbed&quot;&gt;&lt;figcaption&gt;&lt;span&gt;type keyword&lt;/span&gt;&lt;ul class=&quot;tabs&quot;&gt;&lt;li class=&quot;tab active&quot;&gt;ts&lt;/li&gt;&lt;/ul&gt;&lt;/figcaption&gt;&lt;div class=&quot;tabs-content&quot;&gt;&lt;figure class=&quot;highlight ts&quot; style=&quot;display: block;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;type&lt;/span&gt; myType = &lt;span class=&quot;built_in&quot;&gt;string&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; a: myType = &lt;span class=&quot;string&quot;&gt;&#39;hello&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; b: myType = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;// Type &#39;number&#39; is not assignable to type &#39;string&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="typescript" scheme="https://mileslin.github.io/categories/typescript/"/>
    
    
      <category term="typescript" scheme="https://mileslin.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>自訂 AuthorizeFilter</title>
    <link href="https://mileslin.github.io/2017/07/%E8%87%AA%E8%A8%82-AuthorizeFilter/"/>
    <id>https://mileslin.github.io/2017/07/自訂-AuthorizeFilter/</id>
    <published>2017-07-24T15:16:40.000Z</published>
    <updated>2017-07-24T14:48:34.495Z</updated>
    
    <content type="html"><![CDATA[<p>自行 AuthorizeFilter</p>
<a id="more"></a>
<h2 id="生命週期說明"><a href="#生命週期說明" class="headerlink" title="生命週期說明"></a>生命週期說明</h2><p>根據 mvc 的生命週期，其中有兩個驗證的點 <span class="highlight-text primary">Authentication Filter </span> 與 <span class="highlight-text primary">Authorization Filter</span> 來驗證使用者是否驗證成功，這兩個分別代表:</p>
<ul>
<li>Authentication Filter : 驗證你是誰 </li>
<li>Authorization Filter : 驗證你能做什麼事情<div class="figure " style="width:;"><a class="fancybox" href="FilterExecutionProcess.jpg" title="來源 : goo.gl/uXbsgV" data-fancybox-group=""><img class="fig-img" src="FilterExecutionProcess.jpg" alt="來源 : goo.gl/uXbsgV"></a><span class="caption">來源 : goo.gl/uXbsgV</span></div>
</li>
</ul>
<h2 id="實作-Authorization-Filter"><a href="#實作-Authorization-Filter" class="headerlink" title="實作 Authorization Filter"></a>實作 Authorization Filter</h2><p>這兩個實作方法差不多，而今天會實作 Authorization Filter 當作範例。</p>
<ul>
<li>首先新增一個 MyAuthorizationFilter</li>
<li>繼承 FilterAttribute 與 實作 IAuthorizationFilter <em>(要注意命名空間是 System.Web.Mvc ，不要選錯了)</em></li>
<li><span class="highlight-text success">驗證通過不要做任何事</span> vs <span class="highlight-text danger">驗證失敗 assign => filterContext.Result = new HttpUnauthorizedResult();</span>
<figure class="codeblock codeblock--tabbed"><figcaption><span>MyAuthorizationFilter</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class MyAuthorizationFilter : System.Web.Mvc.FilterAttribute, System.Web.Mvc.IAuthorizationFilter</span><br><span class="line">{</span><br><span class="line">    public void OnAuthorization(AuthorizationContext filterContext)</span><br><span class="line">    {</span><br><span class="line">        if (!filterContext.HttpContext.User.Identity.IsAuthenticated)</span><br><span class="line">        {</span><br><span class="line">            filterContext.Result = new HttpUnauthorizedResult();</span><br><span class="line">        }            </span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
</li>
</ul>
<p>至於 assign <code>HttpUnauthorizedResult()</code> 的意思是說，驗證沒通過，會將導向登入頁面。  這邊以表單驗證為例，登入頁面網址是設定在 web.config 。</p>
<div class="figure " style="width:;"><a class="fancybox" href="webconfig.jpg" title="config" data-fancybox-group=""><img class="fig-img" src="webconfig.jpg" alt="config"></a><span class="caption">config</span></div>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><strong>[<a href="http://www.paraesthesia.com/archive/2013/09/27/using-asp-net-mvc-5-iauthenticationfilter-for-authentication-challenges.aspx/" title="Using ASP.NET MVC 5 IAuthenticationFilter for Authentication Challenges" target="_blank" rel="external">Using ASP.NET MVC 5 IAuthenticationFilter for Authentication Challenges</a>]</strong><br> <strong>[<a href="https://app.pluralsight.com/player?course=mvc-applications-10-extension-points-improving&author=alex-wolf&name=mvc-applications-10-extension-points-improving-m10&clip=2&mode=live" title="pluralsight 範例" target="_blank" rel="external">pluralsight 範例</a>]</strong><br> <strong>[<a href="https://samritchie.net/2014/02/27/basic-auth-with-a-web-api-2-iauthenticationfilter/" title="附上 web api2 驗證說明" target="_blank" rel="external">附上 web api2 驗證說明</a>]</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自行 AuthorizeFilter&lt;/p&gt;
    
    </summary>
    
      <category term="Authentication" scheme="https://mileslin.github.io/categories/Authentication/"/>
    
    
      <category term="Authentication" scheme="https://mileslin.github.io/tags/Authentication/"/>
    
  </entry>
  
  <entry>
    <title>ASP.NET 表單驗證</title>
    <link href="https://mileslin.github.io/2017/07/ASP-NET-%E8%A1%A8%E5%96%AE%E9%A9%97%E8%AD%89/"/>
    <id>https://mileslin.github.io/2017/07/ASP-NET-表單驗證/</id>
    <published>2017-07-23T06:49:29.000Z</published>
    <updated>2017-07-24T14:48:34.231Z</updated>
    
    <content type="html"><![CDATA[<p>ASP.NET 提供了很方便帳號登入登出的驗證功能，今天就來說明一下，如何使用 ASP.NET 表單驗證(FormsAuthentication)，來完成登入、登出以及驗證功能。</p>
<a id="more"></a>
<h2 id="修改-web-config-啟用表單驗證"><a href="#修改-web-config-啟用表單驗證" class="headerlink" title="修改 web.config 啟用表單驗證"></a>修改 web.config 啟用表單驗證</h2><p>首先我們要在 web.config 的 system.web 區段底下新增設定 。 <a href="https://msdn.microsoft.com/en-us/library/aa480476.aspx#pagexplained0002_aspnetforms" title="web.config 官方設定說明" target="_blank" rel="external">web.config 官方設定說明</a></p>
<ul>
<li>authentication : 程式啟用 FormsAuthentication，設定登入頁面網址(loginUrl)、timeout 時間(預設30分鐘) 等等….</li>
<li>authorization : <ul>
<li>在使用表單驗證的情況下 IIS <span class="highlight-text primary">預設所有人都可以存取任何網頁
 </span> ，所以要加入此設定，讓沒登入的使用者自動導向 loginUrl 所設定的網址。</li>
<li>如果沒有設定，則要自行寫 <a href="https://app.pluralsight.com/player?course=mvc-applications-10-extension-points-improving&author=alex-wolf&name=mvc-applications-10-extension-points-improving-m10&clip=2&mode=live&start=89.741627&noteid=0c402383-86b5-4606-abc6-a9eea92dc6b5" title="Authorize Filter" target="_blank" rel="external">Authorize Filter</a> 驗證使用者使用有權限存取網頁。<em>(微軟預設提供的 <code>Authorize</code> 無法使用)</em></li>
</ul>
</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>web config</span><ul class="tabs"><li class="tab active">xml</li></ul></figcaption><div class="tabs-content"><figure class="highlight xml" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"> <span class="tag">&lt;<span class="name">system.web</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">authentication</span> <span class="attr">mode</span>=<span class="string">"Forms"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">forms</span> <span class="attr">loginUrl</span>=<span class="string">"Login/Index"</span>             </span><br><span class="line">           <span class="attr">timeout</span>=<span class="string">"30"</span></span><br><span class="line">           <span class="attr">protection</span>=<span class="string">"All"</span></span><br><span class="line">           <span class="attr">cookieless</span>=<span class="string">"UseDeviceProfile"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">authentication</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">authorization</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">deny</span> <span class="attr">users</span>=<span class="string">"?"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">authorization</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">system.web</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="實作登入程式碼"><a href="#實作登入程式碼" class="headerlink" title="實作登入程式碼"></a>實作登入程式碼</h2><p>如果對使用者的登入資訊只要使用者姓名，又或者是什麼都保持預設值就好，那其實只要一行程式碼就可以完成登入</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Login</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[HttpPost]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Login</span>(<span class="params"><span class="keyword">string</span> userName</span>)</span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">// 登入</span></span><br><span class="line">    FormsAuthentication.RedirectFromLoginPage(userName, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RedirectToAction(<span class="string">"Index"</span>, <span class="string">"Home"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>如果你想要設定 timeout 時間、存取一些額外資訊等等…，那就要採用 <code>FormsAuthenticationTicket</code> 加密後放入 Cookie。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Login</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">[HttpPost]</span><br><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Login</span>(<span class="params"><span class="keyword">string</span> userName, <span class="keyword">string</span> password</span>)</span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">// 1. 建立 ticket</span></span><br><span class="line">    FormsAuthenticationTicket ticket = <span class="keyword">new</span> FormsAuthenticationTicket(<span class="number">1</span>,</span><br><span class="line">        userName,</span><br><span class="line">        DateTime.Now,</span><br><span class="line">        DateTime.Now.AddMinutes(<span class="number">30</span>), <span class="comment">// value of time out property</span></span><br><span class="line">        <span class="literal">false</span>, <span class="comment">// Value of IsPersistent property</span></span><br><span class="line">        <span class="string">"Extra Data"</span>,</span><br><span class="line">        FormsAuthentication.FormsCookiePath);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 加密 ticket</span></span><br><span class="line">    <span class="keyword">string</span> encryptedTicket = FormsAuthentication.Encrypt(ticket);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 建立 HttpCookie</span></span><br><span class="line">    HttpCookie authCookie = <span class="keyword">new</span> HttpCookie(</span><br><span class="line">                    FormsAuthentication.FormsCookieName,</span><br><span class="line">                    encryptedTicket);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 使用者瀏覽器加入完成驗證的 Cookie</span></span><br><span class="line">    Response.Cookies.Add(authCookie);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RedirectToAction(<span class="string">"Index"</span>, <span class="string">"Home"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="取得登入資訊"><a href="#取得登入資訊" class="headerlink" title="取得登入資訊"></a>取得登入資訊</h2><p>登入成功後，登入的相關資訊可以經由 Controller 的 IPrincipal User 取得<br><div class="figure " style="width:;"><a class="fancybox" href="IPrincipal.jpg" title="IPrincipal" data-fancybox-group=""><img class="fig-img" src="IPrincipal.jpg" alt="IPrincipal"></a><span class="caption">IPrincipal</span></div></p>
<p>簡單的取得登入使用者姓名以及是否驗證成功的方式</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Authenticated</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">Index</span>(<span class="params"></span>)</span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">// 取得登入者姓名</span></span><br><span class="line">    <span class="keyword">var</span> info = User.Identity.Name;</span><br><span class="line">    <span class="comment">// 是否驗證通過</span></span><br><span class="line">    <span class="keyword">bool</span> isAuthenticated = User.Identity.IsAuthenticated;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>將 Identity 轉型為 <code>FormsIdentity</code>，取得整個 <code>FormsAuthenticationTicket</code></p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>FormsAuthenticationTicket</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">GetFormsAuthenticationTicket</span>(<span class="params"></span>)        </span><br><span class="line"></span>{</span><br><span class="line">    FormsIdentity id = (FormsIdentity)User.Identity;</span><br><span class="line">    FormsAuthenticationTicket ticket = id.Ticket;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">string</span> cookiePath = ticket.CookiePath;</span><br><span class="line">    DateTime expiration = ticket.Expiration;</span><br><span class="line">    <span class="keyword">bool</span> expired = ticket.Expired;</span><br><span class="line">    <span class="keyword">bool</span> isPersistent = ticket.IsPersistent;</span><br><span class="line">    DateTime issueDate = ticket.IssueDate;</span><br><span class="line">    <span class="keyword">string</span> name = ticket.Name;</span><br><span class="line">    <span class="keyword">string</span> userData = ticket.UserData;</span><br><span class="line">    <span class="keyword">int</span> verstion = ticket.Version;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> View();</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="實作登出"><a href="#實作登出" class="headerlink" title="實作登出"></a>實作登出</h2><p>登出只要簡單一行程式碼就可以了 <code>FormsAuthentication.SignOut();</code><br><figure class="codeblock codeblock--tabbed"><figcaption><span>SignOut</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ActionResult <span class="title">SignOut</span>(<span class="params"></span>)</span><br><span class="line"></span>{</span><br><span class="line">    FormsAuthentication.SignOut();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RedirectToAction(<span class="string">"Index"</span>, <span class="string">"Home"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><p><strong>[<a href="https://blog.miniasp.com/post/2008/02/20/Explain-Forms-Authentication-in-ASPNET-20.aspx" title="簡介 ASP.NET 表單驗證 (FormsAuthentication) 的運作方式" target="_blank" rel="external">簡介 ASP.NET 表單驗證 (FormsAuthentication) 的運作方式</a>]</strong><br><strong>[<a href="https://msdn.microsoft.com/en-us/library/aa480476.aspx" title="Explained: Forms Authentication in ASP.NET 2.0" target="_blank" rel="external">Explained: Forms Authentication in ASP.NET 2.0</a>]</strong><br><strong>[<a href="https://msdn.microsoft.com/zh-tw/library/system.web.security.formsauthenticationticket.userdata.aspx" title="FormsAuthenticationTicket.UserData 屬性" target="_blank" rel="external">FormsAuthenticationTicket.UserData 屬性</a>]</strong><br><strong>[<a href="https://app.pluralsight.com/player?course=mvc-applications-10-extension-points-improving&author=alex-wolf&name=mvc-applications-10-extension-points-improving-m10&clip=2&mode=live&start=89.741627&noteid=0c402383-86b5-4606-abc6-a9eea92dc6b5" title="Authorize Filter" target="_blank" rel="external">自訂 Authorize Filter</a>]</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ASP.NET 提供了很方便帳號登入登出的驗證功能，今天就來說明一下，如何使用 ASP.NET 表單驗證(FormsAuthentication)，來完成登入、登出以及驗證功能。&lt;/p&gt;
    
    </summary>
    
      <category term="Authentication" scheme="https://mileslin.github.io/categories/Authentication/"/>
    
    
      <category term="Authentication" scheme="https://mileslin.github.io/tags/Authentication/"/>
    
      <category term="FormsAuthentication" scheme="https://mileslin.github.io/tags/FormsAuthentication/"/>
    
      <category term=".NET" scheme="https://mileslin.github.io/tags/NET/"/>
    
  </entry>
  
  <entry>
    <title>啟用 Action Filter Property Injection 與 註冊 Web Abstractions</title>
    <link href="https://mileslin.github.io/2017/07/%E5%95%9F%E7%94%A8-Action-Filter-Property-Injection-%E8%88%87-%E8%A8%BB%E5%86%8A-Web-Abstractions/"/>
    <id>https://mileslin.github.io/2017/07/啟用-Action-Filter-Property-Injection-與-註冊-Web-Abstractions/</id>
    <published>2017-07-22T15:02:16.000Z</published>
    <updated>2017-08-13T11:05:36.040Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>通常使用 Action Filter 的時候常常會用到一些資料庫的讀取，為了防止耦合性過高，所以建立取得 DBContext 實體的時候，可以用 DI 的方式注入。</li>
<li>MVC 會很常用到 HttpContextBase 、 RequestContext 等等之類功能，所以也建議這些也可以用 DI 的方式注入。</li>
</ul>
<a id="more"></a>
<p>簡短說明一下，此範例以 ASP.NET MVC5 為例，且在使用 Autofac 之前要先安裝 <a href="https://www.nuget.org/packages/Autofac.Mvc5/" title="Autofac.MVC5" target="_blank" rel="external">Autofac.MVC5</a>。  若完全不懂 DI 可以參考這篇 <a href="https://mileslin.github.io/2017/04/Autofac-%E8%A8%AD%E5%AE%9A-Web-API-Register-Controller-%E7%AD%86%E8%A8%98/" title="Autofac 設定 Web API Register Controller 筆記">Autofac 設定 Web API Register Controller 筆記</a> 或者參考 <a href="http://autofac.readthedocs.io/en/latest/integration/mvc.html#quick-start" title="Autofac 官方文件" target="_blank" rel="external">Autofac 官方文件</a>。</p>
<p>其實根據 <a href="http://autofac.readthedocs.io/en/latest/integration/mvc.html#quick-start" title="Autofac官方文件" target="_blank" rel="external">Autofac官方文件</a> ，已經說明得很清楚了，重點就 2 行程式碼</p>
<ul>
<li>註冊 Web abstraction class : <code>builder.RegisterModule&lt;AutofacWebTypesModule&gt;();</code></li>
<li>Action Filter 啟用 Property Injection : <code>builder.RegisterFilterProvider();</code></li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Application_Start</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class MvcApplication : System.Web.HttpApplication</span><br><span class="line">{</span><br><span class="line">    protected void Application_Start()</span><br><span class="line">    {</span><br><span class="line">        AreaRegistration.RegisterAllAreas();</span><br><span class="line">        FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</span><br><span class="line">        RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class="line">        BundleConfig.RegisterBundles(BundleTable.Bundles);</span><br><span class="line"></span><br><span class="line">        // 開始建立 Container</span><br><span class="line">        var builder = new ContainerBuilder();</span><br><span class="line"></span><br><span class="line">        // Register your MVC controllers. (MvcApplication is the name of</span><br><span class="line">        // the class in Global.asax.)</span><br><span class="line">        builder.RegisterControllers(typeof(MvcApplication).Assembly);</span><br><span class="line"></span><br><span class="line">        builder.RegisterType&lt;DateService&gt;()</span><br><span class="line">                 .As&lt;IDateService&gt;()</span><br><span class="line">                 .InstancePerLifetimeScope();</span><br><span class="line"></span><br><span class="line">        // OPTIONAL: 註冊 web abstractions</span><br><span class="line">        builder.RegisterModule&lt;AutofacWebTypesModule&gt;();</span><br><span class="line"></span><br><span class="line">        // OPTIONAL: 啟用 property injection into action filters.</span><br><span class="line">        builder.RegisterFilterProvider();</span><br><span class="line"></span><br><span class="line">        // Set the dependency resolver to be Autofac.</span><br><span class="line">        var container = builder.Build();</span><br><span class="line">        DependencyResolver.SetResolver(new AutofacDependencyResolver(container));</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="測試結果"><a href="#測試結果" class="headerlink" title="測試結果"></a>測試結果</h3><p>成功取得 HttpContextBase 實體<br><div class="figure " style="width:;"><a class="fancybox" href="InjectHttpContextBase.jpg" title="Inject HttpContextBase" data-fancybox-group=""><img class="fig-img" src="InjectHttpContextBase.jpg" alt="Inject HttpContextBase"></a><span class="caption">Inject HttpContextBase</span></div></p>
<p>成功 Property Injection<br><div class="figure " style="width:;"><a class="fancybox" href="PropertyInjection.jpg" title="Property Injection" data-fancybox-group=""><img class="fig-img" src="PropertyInjection.jpg" alt="Property Injection"></a><span class="caption">Property Injection</span></div></p>
<h3 id="AutofacWebTypesModule-註冊的-abstraction-classes"><a href="#AutofacWebTypesModule-註冊的-abstraction-classes" class="headerlink" title="AutofacWebTypesModule 註冊的 abstraction classes"></a>AutofacWebTypesModule 註冊的 abstraction classes</h3><p>註冊 <code>AutofacWebTypesModule</code> 會把很多 MVC 用到的 abstraction class 註冊進去，其中註冊了哪類別，可參考 <a href="http://autofac.readthedocs.io/en/latest/integration/mvc.html#register-web-abstractions" title="官方文件 - register web abstractions" target="_blank" rel="external">官方文件 - register web abstractions</a></p>
<h2 id="啟用-Property-Injection"><a href="#啟用-Property-Injection" class="headerlink" title="啟用 Property Injection"></a>啟用 Property Injection</h2><p>使用 <code>builder.RegisterControllers(Assembly.GetExecutingAssembly()).PropertiesAutowired()</code> 啟用 Property Infjection，只要透過 Autofac Container 建立的物件，只要加入這一段，就可以從 Property 注入實體。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Application_Start</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">public class MvcApplication : System.Web.HttpApplication</span><br><span class="line">{</span><br><span class="line">    protected void Application_Start()</span><br><span class="line">    {</span><br><span class="line">        AreaRegistration.RegisterAllAreas();</span><br><span class="line">        FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</span><br><span class="line">        RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class="line">        BundleConfig.RegisterBundles(BundleTable.Bundles);</span><br><span class="line"></span><br><span class="line">        // 開始建立 Container</span><br><span class="line">        var builder = new ContainerBuilder();</span><br><span class="line"></span><br><span class="line">        // Register your MVC controllers. (MvcApplication is the name of</span><br><span class="line">        // the class in Global.asax.)</span><br><span class="line">        builder.RegisterControllers(typeof(MvcApplication).Assembly);</span><br><span class="line">        builder.RegisterControllers(Assembly.GetExecutingAssembly()).PropertiesAutowired();</span><br><span class="line">        builder.RegisterType&lt;DateService&gt;()</span><br><span class="line">                 .As&lt;IDateService&gt;()</span><br><span class="line">                 .InstancePerLifetimeScope();</span><br><span class="line"></span><br><span class="line">        // OPTIONAL: 註冊 web abstractions</span><br><span class="line">        builder.RegisterModule&lt;AutofacWebTypesModule&gt;();</span><br><span class="line"></span><br><span class="line">        // OPTIONAL: 啟用 property injection into action filters.</span><br><span class="line">        builder.RegisterFilterProvider();</span><br><span class="line"></span><br><span class="line">        // Set the dependency resolver to be Autofac.</span><br><span class="line">        var container = builder.Build();</span><br><span class="line">        DependencyResolver.SetResolver(new AutofacDependencyResolver(container));</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="http://autofac.readthedocs.io/en/latest/integration/mvc.html#mvc" title="Autofac" target="_blank" rel="external">Autofac</a>, <a href="https://github.com/autofac/Examples/blob/master/src/MvcExample/Global.asax.cs" title="Autofac 建立 Container git 範例" target="_blank" rel="external">Autofac 建立 Container git 範例</a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;通常使用 Action Filter 的時候常常會用到一些資料庫的讀取，為了防止耦合性過高，所以建立取得 DBContext 實體的時候，可以用 DI 的方式注入。&lt;/li&gt;
&lt;li&gt;MVC 會很常用到 HttpContextBase 、 RequestContext 等等之類功能，所以也建議這些也可以用 DI 的方式注入。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Autofac" scheme="https://mileslin.github.io/categories/Autofac/"/>
    
    
      <category term=".NET" scheme="https://mileslin.github.io/tags/NET/"/>
    
      <category term="C#" scheme="https://mileslin.github.io/tags/C/"/>
    
      <category term="Autofac" scheme="https://mileslin.github.io/tags/Autofac/"/>
    
  </entry>
  
  <entry>
    <title>安裝 SQL Server 2014 Express 筆記</title>
    <link href="https://mileslin.github.io/2017/07/%E5%AE%89%E8%A3%9D-SQL-Server-2014-Express-%E7%AD%86%E8%A8%98/"/>
    <id>https://mileslin.github.io/2017/07/安裝-SQL-Server-2014-Express-筆記/</id>
    <published>2017-07-15T05:45:36.000Z</published>
    <updated>2017-07-24T14:48:34.279Z</updated>
    
    <content type="html"><![CDATA[<p>今天文章會說明，安裝 SQL Server Express 後，使用 Microsoft SQL Server Management Studio 的 sa 帳號登入。</p>
<a id="more"></a>
<h2 id="執行步驟"><a href="#執行步驟" class="headerlink" title="執行步驟"></a>執行步驟</h2><ol>
<li><p>下載安裝檔<br>首先我們要先去 <a href="https://www.microsoft.com/zh-tw/download/details.aspx?id=42299" title="Microsoft® SQL Server® 2014 Express" target="_blank" rel="external">Microsoft® SQL Server® 2014 Express</a> 下載安裝檔案，要選擇符合作業系統的安裝檔。</p>
<div class="figure " style="width:;"><a class="fancybox" href="Express_Version.jpg" title="x64" data-fancybox-group=""><img class="fig-img" src="Express_Version.jpg" alt="x64"></a><span class="caption">x64</span></div>
</li>
<li><p>執行安裝<br>下載完畢後，執行安裝，會看到這個畫面，然後點選「新增 SQL Server 獨立安裝或將功能加入至現有安裝」</p>
<div class="figure " style="width:;"><a class="fancybox" href="Add_SQL_Server.jpg" title="Add SQL Server" data-fancybox-group=""><img class="fig-img" src="Add_SQL_Server.jpg" alt="Add SQL Server"></a><span class="caption">Add SQL Server</span></div>
</li>
<li><p>選擇新安裝<br>在前幾個步驟安裝程式會做一些檢查，然後會直接來到「安裝類型」的步驟，選擇 「執行 SQL Server 2014 的新安裝」，點選下一步</p>
<div class="figure " style="width:;"><a class="fancybox" href="New_Install.jpg" title="New Install" data-fancybox-group=""><img class="fig-img" src="New_Install.jpg" alt="New Install"></a><span class="caption">New Install</span></div>
</li>
<li><p>「特徵選取」，選擇要安裝的項目，以及執行個體的路徑</p>
</li>
<li><p>執行個體組態<br>設定具名執行個體，或者使用預設執行個體。 執行個體名稱要記錄起來，因為這是安裝完畢後，要連線的<span class="highlight-text primary">伺服器名稱</span><div class="figure " style="width:;"><a class="fancybox" href="執行個體組態.jpg" title="執行個體組態" data-fancybox-group=""><img class="fig-img" src="執行個體組態.jpg" alt="執行個體組態"></a><span class="caption">執行個體組態</span></div></p>
</li>
<li><p>伺服器組態<br>請確認 SQL Server Database Engine 啟動類型為自動，這樣安裝完才會執行啟動。</p>
<div class="figure " style="width:;"><a class="fancybox" href="伺服器組態.jpg" title="伺服器組態" data-fancybox-group=""><img class="fig-img" src="伺服器組態.jpg" alt="伺服器組態"></a><span class="caption">伺服器組態</span></div>
</li>
<li><p>資料庫引擎組態<br>請選擇 「混合模式」，並輸入密碼，此密碼的預設帳號是 <span class="highlight-text primary">sa</span><div class="figure " style="width:;"><a class="fancybox" href="資料庫引擎組態.jpg" title="資料庫引擎組態" data-fancybox-group=""><img class="fig-img" src="資料庫引擎組態.jpg" alt="資料庫引擎組態"></a><span class="caption">資料庫引擎組態</span></div></p>
</li>
<li><p>接下來就一直下一步，完成安裝。</p>
</li>
<li><p>開啟 「SQL Server 2014 組態管理員」，確定是否建立成功</p>
<div class="figure " style="width:;"><a class="fancybox" href="確認服務已啟動.jpg" title="確認服務已啟動" data-fancybox-group=""><img class="fig-img" src="確認服務已啟動.jpg" alt="確認服務已啟動"></a><span class="caption">確認服務已啟動</span></div>
</li>
<li><p>使用 SSMS 連接資料庫</p>
<ul>
<li><p>選擇伺服器</p>
<div class="figure " style="width:;"><a class="fancybox" href="選擇伺服器.jpg" title="選擇伺服器" data-fancybox-group=""><img class="fig-img" src="選擇伺服器.jpg" alt="選擇伺服器"></a><span class="caption">選擇伺服器</span></div>
</li>
<li><p>選擇剛剛建立的伺服器</p>
<div class="figure " style="width:;"><a class="fancybox" href="選擇SQLEXPRESS.jpg" title="選擇 SQLEXPRESS" data-fancybox-group=""><img class="fig-img" src="選擇SQLEXPRESS.jpg" alt="選擇 SQLEXPRESS"></a><span class="caption">選擇 SQLEXPRESS</span></div>
</li>
<li><p>輸入剛剛安裝時候，輸入的密碼，帳號預設是 <span class="highlight-text primary">sa</span></p>
<div class="figure " style="width:;"><a class="fancybox" href="輸入帳號密碼.jpg" title="輸入帳號密碼" data-fancybox-group=""><img class="fig-img" src="輸入帳號密碼.jpg" alt="輸入帳號密碼"></a><span class="caption">輸入帳號密碼</span></div>
</li>
<li><p>連線成功</p>
<div class="figure " style="width:;"><a class="fancybox" href="連線成功.jpg" title="連線成功" data-fancybox-group=""><img class="fig-img" src="連線成功.jpg" alt="連線成功"></a><span class="caption">連線成功</span></div>
</li>
</ul>
</li>
</ol>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://www.youtube.com/watch?v=E_zFM7mzFUg" title="How to Install SQL Server 2014 Express and SQL Server Management Studio 2014 Express" target="_blank" rel="external">How to Install SQL Server 2014 Express and SQL Server Management Studio 2014 Express</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天文章會說明，安裝 SQL Server Express 後，使用 Microsoft SQL Server Management Studio 的 sa 帳號登入。&lt;/p&gt;
    
    </summary>
    
      <category term="SQL" scheme="https://mileslin.github.io/categories/SQL/"/>
    
    
      <category term="SQL" scheme="https://mileslin.github.io/tags/SQL/"/>
    
  </entry>
  
  <entry>
    <title>Command Line 筆記-遠端複製與壓縮</title>
    <link href="https://mileslin.github.io/2017/07/Command-Line-%E7%AD%86%E8%A8%98-%E9%81%A0%E7%AB%AF%E8%A4%87%E8%A3%BD%E8%88%87%E5%A3%93%E7%B8%AE/"/>
    <id>https://mileslin.github.io/2017/07/Command-Line-筆記-遠端複製與壓縮/</id>
    <published>2017-07-11T09:34:08.000Z</published>
    <updated>2017-07-12T15:56:16.144Z</updated>
    
    <content type="html"><![CDATA[<p>最近為了將的壓縮、解壓縮、遠端連線硬碟、複製貼上等等的繁瑣的事情寫成 bat 檔案，花了很多時間。  所以就來記錄一下，用 command line 自動化的功能。</p>
<ul>
<li>刪除整個資料夾、刪除單一檔案</li>
<li>使用 msbuild 建立佈署檔案</li>
<li>複製遠端硬碟的檔案、複製貼上整個資夾並自動取代現有檔案</li>
<li>使用 PowerShell 壓縮與解壓縮檔案</li>
<li>檢查檔案是否存在，並且執行不同指令</li>
</ul>
<a id="more"></a>
<h2 id="刪除整個資料夾、刪除單一檔案"><a href="#刪除整個資料夾、刪除單一檔案" class="headerlink" title="刪除整個資料夾、刪除單一檔案"></a>刪除整個資料夾、刪除單一檔案</h2><p>刪除整個資料夾<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Delete Entire Folder</span><ul class="tabs"><li class="tab active">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight bat" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> /q "D:\Projects\Publish\Today_Deploy\*"</span><br><span class="line"><span class="keyword">FOR</span> /D <span class="variable">%%p</span> <span class="keyword">IN</span> ("D:\Projects\Publish\Today_Deploy\*.*") <span class="keyword">DO</span> <span class="built_in">rmdir</span> "<span class="variable">%%p</span>" /s /q</span><br><span class="line"><span class="built_in">rmdir</span> "D:\Projects\Publish\Today_Deploy"</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>刪除單一檔案<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Delete a file</span><ul class="tabs"><li class="tab active">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight bat" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">del</span> D:\Projects\Publish\Today_Deploy\WebAPI\Web.config</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="使用-msbuild-建立佈署檔案"><a href="#使用-msbuild-建立佈署檔案" class="headerlink" title="使用 msbuild 建立佈署檔案"></a>使用 msbuild 建立佈署檔案</h2><figure class="codeblock codeblock--tabbed"><figcaption><span>Web Deploy</span><ul class="tabs"><li class="tab active">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight bat" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">"C:\Program Files (x86)\MSBuild\<span class="number">14</span>.<span class="number">0</span>\Bin\MSBuild.exe" "D:\Projects\WebAPI\Project.WebAPI.sln" </span><br><span class="line">/p:Configuration=Release </span><br><span class="line">/p:DeployOnBuild=True </span><br><span class="line">/p:DeployDefaultTarget=WebPublish  </span><br><span class="line">/p:WebPublishMethod=FileSystem </span><br><span class="line">/p:DeleteExistingFiles=True  </span><br><span class="line">/p:publishUrl=D:\Projects\Publish\Today_Deploy\WebAPI</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="複製遠端硬碟的檔案、複製貼上整個資夾並自動取代現有檔案"><a href="#複製遠端硬碟的檔案、複製貼上整個資夾並自動取代現有檔案" class="headerlink" title="複製遠端硬碟的檔案、複製貼上整個資夾並自動取代現有檔案"></a>複製遠端硬碟的檔案、複製貼上整個資夾並自動取代現有檔案</h2><p>因為佈署都會連到廠商的VM主機，而且桌面遠端連線那邊的設定，我 D 磁碟有開分享，所以可以從廠商的 VM 直接連到我這邊的 D 磁碟。  因為可以直接連到 D 磁碟，所以也可以用 command line 的方式來複製我要的檔案，只要使用 <code>\\tsclient\d</code> 就可以指定到我電腦的路徑 ， \tsclient 是指我這邊的電腦，而 \d 表示我的 D 磁碟。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>tsclient copy</span><ul class="tabs"><li class="tab active">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight bat" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">XCOPY</span> \\tsclient\d\Projects\Publish\Today_Deploy.zip D:\Project\ /Y</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>將我要佈署的整個資料夾含檔案，貼到主機上 server 的資料夾<br><figure class="codeblock codeblock--tabbed"><figcaption><span>tsclient copy</span><ul class="tabs"><li class="tab active">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight bat" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">XCOPY</span> D:\Project\Today_Deploy\WebAPI\* D:\Project\WebAPI /s /i /Y</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="使用-PowerShell-壓縮與解壓縮檔案"><a href="#使用-PowerShell-壓縮與解壓縮檔案" class="headerlink" title="使用 PowerShell 壓縮與解壓縮檔案"></a>使用 PowerShell 壓縮與解壓縮檔案</h2><p>使用 PowerShell 壓縮或解壓縮檔案的話要先把 PowerShell 要執行的 script 先寫好，然後 command 呼叫 <code>Powershell.exe</code> 指定要執行的 script ，在設定一些執行參數就可以了。</p>
<h3 id="壓縮"><a href="#壓縮" class="headerlink" title="壓縮"></a>壓縮</h3><figure class="codeblock codeblock--tabbed"><figcaption><span>zip</span><ul class="tabs"><li class="tab active">ps1</li><li class="tab">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$source = "D:\Projects\Publish\Today_Deploy"</span><br><span class="line">$destination = "D:\Projects\Publish\Today_Deploy.zip"</span><br><span class="line">If(Test-path $destination) {Remove-item $destination}</span><br><span class="line">Add-Type -assembly "system.io.compression.filesystem"</span><br><span class="line">[io.compression.zipfile]::CreateFromDirectory($source,$destination)</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bat" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Powershell.exe -executionpolicy remotesigned -File  D:\Projects\zip.ps1</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="解壓縮"><a href="#解壓縮" class="headerlink" title="解壓縮"></a>解壓縮</h3><figure class="codeblock codeblock--tabbed"><figcaption><span>unzip</span><ul class="tabs"><li class="tab active">ps1</li><li class="tab">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Add-Type -AssemblyName System.IO.Compression.FileSystem</span><br><span class="line">function Unzip</span><br><span class="line">{</span><br><span class="line">    param([string]$zipfile, [string]$outpath)</span><br><span class="line"></span><br><span class="line">    [System.IO.Compression.ZipFile]::ExtractToDirectory($zipfile, $outpath)</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">Unzip "D:\TraPacWebPayment\Today_Deploy.zip" "D:\TraPacWebPayment\Today_Deploy"</span><br></pre></td></tr></tbody></table></figure><figure class="highlight bat" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Powershell.exe -executionpolicy remotesigned -File  D:\Project\unzip.ps1</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="檢查檔案是否存在，並且執行不同指令"><a href="#檢查檔案是否存在，並且執行不同指令" class="headerlink" title="檢查檔案是否存在，並且執行不同指令"></a>檢查檔案是否存在，並且執行不同指令</h2><p>command line 有檢查檔案是否存在的指令，若檔案不存在，可以用 goto: 的方式直接跳到要指定執行的指令。<br>如以下指令，會判斷 <code>D:\Project\Today_Deploy.zip</code> 是否存在，若不存在則跳到 <code>:exit</code> 的點去執行，所以  do something… 就不會執行到。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>check file exist</span><ul class="tabs"><li class="tab active">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight bat" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">@rem check file exits or not</span></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exist</span> D:\Project\Today_Deploy.zip <span class="keyword">goto</span> :<span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span> something...</span><br><span class="line"></span><br><span class="line">:<span class="keyword">exit</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> deployment file: D:\Project\Today_Deploy.zip <span class="keyword">not</span> exists</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近為了將的壓縮、解壓縮、遠端連線硬碟、複製貼上等等的繁瑣的事情寫成 bat 檔案，花了很多時間。  所以就來記錄一下，用 command line 自動化的功能。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;刪除整個資料夾、刪除單一檔案&lt;/li&gt;
&lt;li&gt;使用 msbuild 建立佈署檔案&lt;/li&gt;
&lt;li&gt;複製遠端硬碟的檔案、複製貼上整個資夾並自動取代現有檔案&lt;/li&gt;
&lt;li&gt;使用 PowerShell 壓縮與解壓縮檔案&lt;/li&gt;
&lt;li&gt;檢查檔案是否存在，並且執行不同指令&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="cmd" scheme="https://mileslin.github.io/categories/cmd/"/>
    
    
      <category term="cmd" scheme="https://mileslin.github.io/tags/cmd/"/>
    
      <category term="PowerShell" scheme="https://mileslin.github.io/tags/PowerShell/"/>
    
      <category term="msbuild" scheme="https://mileslin.github.io/tags/msbuild/"/>
    
  </entry>
  
  <entry>
    <title>ng build 並壓縮檔案</title>
    <link href="https://mileslin.github.io/2017/07/ng-build-%E4%B8%A6%E5%A3%93%E7%B8%AE%E6%AA%94%E6%A1%88/"/>
    <id>https://mileslin.github.io/2017/07/ng-build-並壓縮檔案/</id>
    <published>2017-07-10T11:19:27.000Z</published>
    <updated>2017-07-12T15:56:16.147Z</updated>
    
    <content type="html"><![CDATA[<p>在佈署 Angular 專案的時候為了能夠快速複製到遠端主機上，所以通常會 <code>ng build</code> 後，將 build 出來的檔案壓縮，要完成這一連串的流程，通常都是寫 cmd 來處理。</p>
<a id="more"></a>
<h2 id="使用-PowerShell-壓縮資料夾"><a href="#使用-PowerShell-壓縮資料夾" class="headerlink" title="使用 PowerShell 壓縮資料夾"></a>使用 PowerShell 壓縮資料夾</h2><p>命令提示字元預設是沒有將資料夾壓縮的功能，所以我這邊使用 PowerShell 幫我處理壓縮檔案。</p>
<ol>
<li>建立 zip.ps1 檔案</li>
<li>貼上底下的程式碼。 <span class="highlight-text primary">記得修改$source與$destination的路徑</span><figure class="codeblock codeblock--tabbed"><figcaption><span>zip.ps1</span><ul class="tabs"><li class="tab active">ps1</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$source = "D:\Projects\Publish\Today_Deploy"</span><br><span class="line">$destination = "D:\Projects\Publish\Today_Deploy.zip"</span><br><span class="line">If(Test-path $destination) {Remove-item $destination}</span><br><span class="line">Add-Type -assembly "system.io.compression.filesystem"</span><br><span class="line">[io.compression.zipfile]::CreateFromDirectory($source,$destination)</span><br></pre></td></tr></tbody></table></figure></div></figure>
</li>
</ol>
<p>之後命令提示字元只要使用 PowerShell 呼叫這個 script 檔案，就可以將檔案壓縮。<br><code>Powershell.exe -executionpolicy remotesigned -File  D:\Projects\zip.ps1</code></p>
<h2 id="結合-ng-build-與壓縮指令"><a href="#結合-ng-build-與壓縮指令" class="headerlink" title="結合 ng build 與壓縮指令"></a>結合 ng build 與壓縮指令</h2><p>建立一個 deploy.bat 檔案，貼上底下的指令</p>
<ol>
<li>將路徑指定到 Angular 的根目錄</li>
<li>執行 ng build 並將輸出到 F2E 資料夾</li>
<li>執行壓縮</li>
</ol>
<figure class="codeblock codeblock--tabbed"><figcaption><span>deploy.bat</span><ul class="tabs"><li class="tab active">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight bat" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d D:\Projects\Trapac_Web_Payment\TraPacWebPayment.F2EWeb</span><br><span class="line"></span><br><span class="line">ng build --prod --output-<span class="built_in">path</span>=D:\Projects\Publish\Today_Deploy\F2E</span><br><span class="line"></span><br><span class="line">Powershell.exe -executionpolicy remotesigned -File  D:\Projects\zip.ps1</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p><strong>結果:事情不會這麼順利的 !!!!</strong><br><div class="alert danger no-icon"><p>ng build 後，會把命令提示字元關掉，會造成第3行壓縮指令沒有執行 !!!</p>
</div></p>
<h2 id="拆成-3-個-bat，讓後續指令能繼續進行"><a href="#拆成-3-個-bat，讓後續指令能繼續進行" class="headerlink" title="拆成 3 個 bat，讓後續指令能繼續進行"></a>拆成 3 個 bat，讓後續指令能繼續進行</h2><ol>
<li><p>建立 build.bat 貼上前 2 行指令</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>build.bat</span><ul class="tabs"><li class="tab active">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight bat" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /d D:\Projects\Trapac_Web_Payment\TraPacWebPayment.F2EWeb</span><br><span class="line"></span><br><span class="line">ng build --prod --output-<span class="built_in">path</span>=D:\Projects\Publish\Today_Deploy\F2E</span><br></pre></td></tr></tbody></table></figure></div></figure>
</li>
<li><p>建立 zip.bat 貼上第 3 行指令</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>zip.bat</span><ul class="tabs"><li class="tab active">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight bat" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Powershell.exe -executionpolicy remotesigned -File  D:\Projects\zip.ps1</span><br></pre></td></tr></tbody></table></figure></div></figure>
</li>
<li><p>修改 deploy.bat ，呼叫 build.bat 與 zip.bat</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>deploy.bat</span><ul class="tabs"><li class="tab active">bat</li></ul></figcaption><div class="tabs-content"><figure class="highlight bat" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">call</span> D:\Projects\build.bat</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> D:\Projects\zip.bat</span><br></pre></td></tr></tbody></table></figure></div></figure>
</li>
<li><p>執行 deploy.bat，用這種方式，就順利讓 <code>ng build</code> 之後還可以持續執行指令</p>
</li>
</ol>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>目前就自己研究出這種方式，可以讓 <code>ng build</code> 後，可持續執行後面的指令，如果讀者還有更好的方式，歡迎告知。</p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://blogs.technet.microsoft.com/heyscriptingguy/2015/03/09/use-powershell-to-create-zip-archive-of-folder/" title="use-powershell-to-create-zip" target="_blank" rel="external">use-powershell-to-create-zip</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在佈署 Angular 專案的時候為了能夠快速複製到遠端主機上，所以通常會 &lt;code&gt;ng build&lt;/code&gt; 後，將 build 出來的檔案壓縮，要完成這一連串的流程，通常都是寫 cmd 來處理。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
      <category term="Angular CLI" scheme="https://mileslin.github.io/tags/Angular-CLI/"/>
    
  </entry>
  
  <entry>
    <title>Angular CLI 實用小技巧 4</title>
    <link href="https://mileslin.github.io/2017/07/Angular-CLI-%E5%AF%A6%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7-4/"/>
    <id>https://mileslin.github.io/2017/07/Angular-CLI-實用小技巧-4/</id>
    <published>2017-07-09T04:26:50.000Z</published>
    <updated>2017-07-12T15:56:15.959Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>unit tests<ul>
<li>使用 NO_ERROR SCHEMA 處理 known element 問題</li>
</ul>
</li>
<li>end to end tests</li>
<li>如何 debug 測試</li>
</ul>
<a id="more"></a>
<h2 id="執行單元測試"><a href="#執行單元測試" class="headerlink" title="執行單元測試"></a>執行單元測試</h2><p>驗證程式碼的執行邏輯是否如預期。</p>
<div class="alert info no-icon"><p>ng test</p>
</div>
<table>
<thead>
<tr>
<th style="text-align:left">Options</th>
<th style="text-align:left">Alias</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">--code-coverage</td>
<td style="text-align:left">-cc</td>
<td style="text-align:left">建立 code coverage report</td>
</tr>
<tr>
<td style="text-align:left">--coloers</td>
<td style="text-align:left"></td>
<td style="text-align:left">命令提示字元的輸出文字是否要彩色<em>(預設: true)</em></td>
</tr>
<tr>
<td style="text-align:left">--single-run</td>
<td style="text-align:left">-sr</td>
<td style="text-align:left">執行一次測試，輸出結果後就結束，會在 CI 的時候用到 <em>(預設: false)</em></td>
</tr>
<tr>
<td style="text-align:left">--progress</td>
<td style="text-align:left"></td>
<td style="text-align:left">Log grogress to console <em>(預設: true(</em></td>
</tr>
<tr>
<td style="text-align:left">--sourcemaps</td>
<td style="text-align:left">-sm</td>
<td style="text-align:left">可用來 debug test <em>(預設: true)</em></td>
</tr>
<tr>
<td style="text-align:left">--watch</td>
<td style="text-align:left">-w</td>
<td style="text-align:left">偵測檔案變更，並重新執行測試 <em>(預設: true)</em></td>
</tr>
</tbody>
</table>
<h2 id="debug-測試"><a href="#debug-測試" class="headerlink" title="debug 測試"></a>debug 測試</h2><p>在執行 <code>ng test</code> 後，會開啟瀏覽器，顯示測試結果，在測試結果的右上角點選 DEBUG 按鈕，會導向到 Debug 頁面。<br><div class="figure " style="width:;"><a class="fancybox" href="Debug_Index.jpg" title="Debug Button" data-fancybox-group=""><img class="fig-img" src="Debug_Index.jpg" alt="Debug Button"></a><span class="caption">Debug Button</span></div></p>
<p>在 Debug 頁面，開啟開發者工具<em>(F12)</em>，點選 <strong>Source</strong>。<br><div class="figure " style="width:;"><a class="fancybox" href="debug_dev.jpg" title="chrome 開發者工具" data-fancybox-group=""><img class="fig-img" src="debug_dev.jpg" alt="chrome 開發者工具"></a><span class="caption">chrome 開發者工具</span></div></p>
<p>點選快捷鍵 <code>ctrl + p</code>，選取要 debug 的檔案 =&gt; 下中斷點 =&gt; 重新整理網頁，就可以 Debug 測試的程式碼了。<br><div class="figure " style="width:;"><a class="fancybox" href="dev_debug.gif" title="debug" data-fancybox-group=""><img class="fig-img" src="dev_debug.gif" alt="debug"></a><span class="caption">debug</span></div></p>
<h3 id="處理-router-outlet-is-not-a-known-element"><a href="#處理-router-outlet-is-not-a-known-element" class="headerlink" title="處理 router-outlet is not a known element"></a>處理 router-outlet is not a known element</h3><p>Angular 在建立其他 Module <em>(ex: admin.module)</em>，且 Componet 有使用 <code>&lt;router-outlet&gt;&lt;/router-outlet&gt;</code><br><div class="figure " style="width:;"><a class="fancybox" href="admin_folder.jpg" title="" data-fancybox-group=""><img class="fig-img" src="admin_folder.jpg" alt=""></a></div><br><div class="figure " style="width:;"><a class="fancybox" href="router_outlet.jpg" title="" data-fancybox-group=""><img class="fig-img" src="router_outlet.jpg" alt=""></a></div></p>
<p>在什麼都不設定的情況下，跑測試<em>(ng test)</em>，會出現測試失敗的情形，如下。<br><div class="figure " style="width:;"><a class="fancybox" href="router_outlet_unknown.jpg" title="router_outlet_unknown" data-fancybox-group=""><img class="fig-img" src="router_outlet_unknown.jpg" alt="router_outlet_unknown"></a><span class="caption">router_outlet_unknown</span></div></p>
<p>看錯誤訊息可以知道是在跑 AdminComponent 的時候發生失敗的，這時候在 <code>admin.component.spec.ts</code>，加上 <span class="highlight-text primary">NO_ERRORS_SCHEMA</span>，就可以解決這個問題。<br><div class="figure " style="width:;"><a class="fancybox" href="NO_ERRORS_SCHEMA.jpg" title="NO_ERRORS_SCHEMA" data-fancybox-group=""><img class="fig-img" src="NO_ERRORS_SCHEMA.jpg" alt="NO_ERRORS_SCHEMA"></a><span class="caption">NO_ERRORS_SCHEMA</span></div></p>
<h2 id="End-to-End-Tests"><a href="#End-to-End-Tests" class="headerlink" title="End to End Tests"></a>End to End Tests</h2><p>End to End Tests 模仿使用者與網頁互動的方式，來驗證功能是否正確。  而 Angular CLI 使用 <a href="http://www.protractortest.org/#/" title="Protractor" target="_blank" rel="external">Protractor</a> 來處理 e2e tests ，且會開啟瀏覽器執行。</p>
<div class="alert info no-icon"><p>ng e2e</p>
</div>
<table>
<thead>
<tr>
<th style="text-align:left">Options</th>
<th style="text-align:left">Alias</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">--config</td>
<td style="text-align:left">-c</td>
<td style="text-align:left">指定 conf.js <em>(預設:專案根目錄下的 protractor.conf.js)</em></td>
</tr>
<tr>
<td style="text-align:left">--element-explorer</td>
<td style="text-align:left">-ee</td>
<td style="text-align:left">開啟 protractor’s element explorer ，用於 debug</td>
</tr>
<tr>
<td style="text-align:left">--serve</td>
<td style="text-align:left">-s</td>
<td style="text-align:left">編譯並啟動伺服器<em>(預設: true)</em></td>
</tr>
<tr>
<td style="text-align:left">--specs</td>
<td style="text-align:left">-sp</td>
<td style="text-align:left">可指定要執行的 e2e.spec <em>(預設: 全部執行)</em></td>
</tr>
<tr>
<td style="text-align:left">--webdriver-update</td>
<td style="text-align:left">-wu</td>
<td style="text-align:left">update webdriver <em>(預設: true)</em></td>
</tr>
</tbody>
</table>
<h2 id="End-to-End-Tests-Debug"><a href="#End-to-End-Tests-Debug" class="headerlink" title="End to End Tests Debug"></a>End to End Tests Debug</h2><p>執行 <code>ng e2e -ee</code> 會看到開啟的瀏覽器停在測試的那一頁，而且命令提示字元是可以輸入指令的狀態，這時候就可以用命令提示字元 debug。</p>
<p>例如，我現在的頁面是停在首頁，頁面只有簡單的 <span class="highlight-text primary">app works! </span><br><div class="figure " style="width:;"><a class="fancybox" href="e2e_index.jpg" title="e2e_index" data-fancybox-group=""><img class="fig-img" src="e2e_index.jpg" alt="e2e_index"></a><span class="caption">e2e_index</span></div></p>
<p>這時候我們就可以在命令提示字元，用 css selector 的方式取得 h1 的文字內容<br><div class="figure " style="width:;"><a class="fancybox" href="css_selector.jpg" title="" data-fancybox-group=""><img class="fig-img" src="css_selector.jpg" alt=""></a></div></p>
<p>又或者可用 <a href="http://www.protractortest.org/#/" title="Protractor" target="_blank" rel="external">Protractor</a> 提供的 element 取得文字內容<br><div class="figure " style="width:;"><a class="fancybox" href="element_debug.jpg" title="" data-fancybox-group=""><img class="fig-img" src="element_debug.jpg" alt=""></a></div></p>
<p>用以上的方式就可以來 debug 頁面上顯示的資訊是不是如預期的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;unit tests&lt;ul&gt;
&lt;li&gt;使用 NO_ERROR SCHEMA 處理 known element 問題&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;end to end tests&lt;/li&gt;
&lt;li&gt;如何 debug 測試&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
      <category term="Angular CLI" scheme="https://mileslin.github.io/tags/Angular-CLI/"/>
    
  </entry>
  
  <entry>
    <title>Angular CLI 實用小技巧 3</title>
    <link href="https://mileslin.github.io/2017/07/Angular-CLI-%E5%AF%A6%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7-3/"/>
    <id>https://mileslin.github.io/2017/07/Angular-CLI-實用小技巧-3/</id>
    <published>2017-07-08T15:07:00.000Z</published>
    <updated>2017-07-12T15:56:15.957Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>建置專案與環境參數設定</li>
</ul>
<a id="more"></a>
<h2 id="Build-與-Environment"><a href="#Build-與-Environment" class="headerlink" title="Build 與 Environment"></a>Build 與 Environment</h2><p><code>build</code> 可將 Angular 專案打包，之後可以佈署到 server 上，而 <code>environment</code> 是用來設定一些 Angular 會用到的參數，例如: 開發時的 host 是 <a href="http://dev/" target="_blank" rel="external">http://dev/</a> ， production host 是 <a href="http://prod/" target="_blank" rel="external">http://prod/</a> ，就可以將參數寫在 environment.ts。<br><div class="figure " style="width:;"><a class="fancybox" href="environments_setting.jpg" title="environment" data-fancybox-group=""><img class="fig-img" src="environments_setting.jpg" alt="environment"></a><span class="caption">environment</span></div></p>
<h3 id="比較-Dev-Build-與-Prod-Build"><a href="#比較-Dev-Build-與-Prod-Build" class="headerlink" title="比較 Dev Build 與 Prod Build:"></a>比較 Dev Build 與 Prod Build:</h3><table>
<thead>
<tr>
<th style="text-align:left">說明</th>
<th style="text-align:left">ng build</th>
<th style="text-align:left">ng build --prod</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">使用的 Environment 檔案 <div class="figure " style="width:;"><a class="fancybox" href="environments_folder.jpg" title="" data-fancybox-group=""><img class="fig-img" src="environments_folder.jpg" alt=""></a></div></td>
<td style="text-align:left">environment.ts</td>
<td style="text-align:left">environment.prod.ts</td>
</tr>
<tr>
<td style="text-align:left">不要讓檔案被 Cache <em>(Cache-busting)</em></td>
<td style="text-align:left">只有 css 檔案參考到的圖檔</td>
<td style="text-align:left">所有檔案</td>
</tr>
<tr>
<td style="text-align:left">Source maps</td>
<td style="text-align:left">建立</td>
<td style="text-align:left">不建立</td>
</tr>
<tr>
<td style="text-align:left">Extracted CSS</td>
<td style="text-align:left">global CSS output to .js</td>
<td style="text-align:left">yes, to css files</td>
</tr>
<tr>
<td style="text-align:left">醜化 <em>(Uglification)</em></td>
<td style="text-align:left">無</td>
<td style="text-align:left">有</td>
</tr>
<tr>
<td style="text-align:left">移除沒用到的程式碼 <em>(Tree-Shaking)</em></td>
<td style="text-align:left">無</td>
<td style="text-align:left">有</td>
</tr>
<tr>
<td style="text-align:left">Ahead of time compilation <em>AOT</em></td>
<td style="text-align:left">無</td>
<td style="text-align:left">有</td>
</tr>
<tr>
<td style="text-align:left">Bundling</td>
<td style="text-align:left">有</td>
<td style="text-align:left">有</td>
</tr>
</tbody>
</table>
<h3 id="dev-ng-build-參數設定小技巧"><a href="#dev-ng-build-參數設定小技巧" class="headerlink" title="dev ng build 參數設定小技巧"></a>dev ng build 參數設定小技巧</h3><p><em>這四行執行結果都一樣</em><br><div class="alert info no-icon"><p>ng build --target=development --environment=dev<br>ng build --dev -e=dev<br>ng build --dev<br>ng build</p>
</div></p>
<h3 id="prod-ng-build-參數設定小技巧"><a href="#prod-ng-build-參數設定小技巧" class="headerlink" title="prod ng build 參數設定小技巧"></a>prod ng build 參數設定小技巧</h3><p><em>這三行執行結果都一樣</em><br><div class="alert info no-icon"><p>ng build --target=production --environment=prod<br>ng build --prod -e=prod<br>ng build --prod</p>
</div></p>
<h3 id="ng-build-其他參數設定"><a href="#ng-build-其他參數設定" class="headerlink" title="ng build 其他參數設定"></a>ng build 其他參數設定</h3><table>
<thead>
<tr>
<th style="text-align:left">參數</th>
<th style="text-align:left">別名</th>
<th style="text-align:left">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">--sourcemap</td>
<td style="text-align:left">-sm</td>
<td style="text-align:left">建立 source map</td>
</tr>
<tr>
<td style="text-align:left">--aot</td>
<td style="text-align:left"></td>
<td style="text-align:left">Ahead of Time compilation</td>
</tr>
<tr>
<td style="text-align:left">--watch</td>
<td style="text-align:left">-w</td>
<td style="text-align:left">監控程式碼變成，並重新 build</td>
</tr>
</tbody>
</table>
<h4 id="輸出-Build-Bundles-說明"><a href="#輸出-Build-Bundles-說明" class="headerlink" title="輸出 Build Bundles 說明"></a>輸出 Build Bundles 說明</h4><p>專案 build 之後，會將專案用到的 js bundle  起來，每一個 bundle js 都有自己的職責。</p>
<table>
<thead>
<tr>
<th style="text-align:left">js 檔案</th>
<th style="text-align:left">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">inline.bundle.js</td>
<td style="text-align:left">WebPack runtime，應用程式拿來用來讀取 module 用</td>
</tr>
<tr>
<td style="text-align:left">main.bundle.js</td>
<td style="text-align:left">我們寫的程式碼</td>
</tr>
<tr>
<td style="text-align:left">polyfills.bundle.js</td>
<td style="text-align:left">用來支援不同的瀏覽器</td>
</tr>
<tr>
<td style="text-align:left">styles.bundle.js</td>
<td style="text-align:left">紀錄 styles 被放在哪裡</td>
</tr>
<tr>
<td style="text-align:left">vendor.bundle.js</td>
<td style="text-align:left">包含 Angular 和其他 third-party 檔案</td>
</tr>
</tbody>
</table>
<h2 id="啟動-webpack-dev-server"><a href="#啟動-webpack-dev-server" class="headerlink" title="啟動 webpack-dev-server"></a>啟動 webpack-dev-server</h2><div class="alert info no-icon"><p>ng serve</p>
</div>
<h3 id="設定參數說明"><a href="#設定參數說明" class="headerlink" title="設定參數說明:"></a>設定參數說明:</h3><table>
<thead>
<tr>
<th style="text-align:left">參數</th>
<th style="text-align:left">別名</th>
<th style="text-align:left">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">--open</td>
<td style="text-align:left">-o</td>
<td style="text-align:left">ng serve 後，開啟網頁</td>
</tr>
<tr>
<td style="text-align:left">--port</td>
<td style="text-align:left">-p</td>
<td style="text-align:left">指定 port 號</td>
</tr>
<tr>
<td style="text-align:left">--live-reload</td>
<td style="text-align:left">-lr</td>
<td style="text-align:left">檔案發生變更後，是否直接重新整理瀏覽器 <em>(-lr true or false)</em></td>
</tr>
<tr>
<td style="text-align:left">--ssl</td>
<td style="text-align:left"></td>
<td style="text-align:left">使用 https</td>
</tr>
<tr>
<td style="text-align:left">--proxy-config</td>
<td style="text-align:left">-pc</td>
<td style="text-align:left">Proxy configuration file</td>
</tr>
<tr>
<td style="text-align:left">--prod</td>
<td style="text-align:left"></td>
<td style="text-align:left">啟動時 server，使用 --prod 的設定</td>
</tr>
</tbody>
</table>
<h2 id="停掉-Angular-CLI-，-使用-webpack-控制專案"><a href="#停掉-Angular-CLI-，-使用-webpack-控制專案" class="headerlink" title="停掉 Angular CLI ， 使用 webpack 控制專案"></a>停掉 Angular CLI ， 使用 webpack 控制專案</h2><p>這個功能可讓懂前端開發工具的人，能夠有更多靈活的應用。<br><div class="alert info no-icon"><p>ng eject</p>
</div><br>執行指令後 Angular CLI 的功能都將會無法使用，例如 <code>ng build</code>, <code>ng serve</code> 等等…。</p>
<p><code>webpack.config.js</code>會被加入專案中，必且可以比較 <code>package.json</code> 改變的內容，會看到所有控制都交由原生的前端工具來執行。</p>
<div class="figure " style="width:;"><a class="fancybox" href="package.jpg" title="package" data-fancybox-group=""><img class="fig-img" src="package.jpg" alt="package"></a><span class="caption">package</span></div>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;建置專案與環境參數設定&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
      <category term="Angular CLI" scheme="https://mileslin.github.io/tags/Angular-CLI/"/>
    
  </entry>
  
  <entry>
    <title>Angular CLI 實用小技巧 2</title>
    <link href="https://mileslin.github.io/2017/07/Angular-CLI-%E5%AF%A6%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7-2/"/>
    <id>https://mileslin.github.io/2017/07/Angular-CLI-實用小技巧-2/</id>
    <published>2017-07-04T15:26:07.000Z</published>
    <updated>2017-07-12T15:56:15.953Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>建立元件與檔案 <em>(service,class,interface ….)</em></li>
<li>建立檔案時指令的預設值設定</li>
</ul>
<a id="more"></a>
<h2 id="建立-Component-小技巧"><a href="#建立-Component-小技巧" class="headerlink" title="建立 Component 小技巧"></a>建立 Component 小技巧</h2><div class="alert info no-icon"><p>ng g c &lt; options &gt;</p>
</div>
<table>
<thead>
<tr>
<th style="text-align:left">Options</th>
<th style="text-align:left">Alias</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">--flat</td>
<td style="text-align:left"></td>
<td style="text-align:left">不要建立 Component 資料夾</td>
</tr>
<tr>
<td style="text-align:left">--inline-template</td>
<td style="text-align:left">-it</td>
<td style="text-align:left">不會建立 .html，將 html template 寫在 .ts file</td>
</tr>
<tr>
<td style="text-align:left">--inline-style</td>
<td style="text-align:left">-is</td>
<td style="text-align:left">不會建立 .css，將 style 寫在 .ts file</td>
</tr>
<tr>
<td style="text-align:left">--spec false</td>
<td style="text-align:left"></td>
<td style="text-align:left">不會建立 .spec</td>
</tr>
<tr>
<td style="text-align:left">--prefix my</td>
<td style="text-align:left"></td>
<td style="text-align:left">selector 加上 my prefix. ex: my-pet instead of app-pet</td>
</tr>
<tr>
<td style="text-align:left">--dry-run</td>
<td style="text-align:left">-d</td>
<td style="text-align:left">顯示那些檔案會新增跟那些檔案會變更</td>
</tr>
</tbody>
</table>
<h2 id="建立-Service-小技巧"><a href="#建立-Service-小技巧" class="headerlink" title="建立 Service 小技巧"></a>建立 Service 小技巧</h2><p><em>此功能也能用在建立 Component 上</em><br><div class="alert info no-icon"><p>新增 service 並自動加入指定 module providers<br>ng g s my-service -m app.module</p>
</div></p>
<h2 id="建立-Classes-Interfaces-Enums-小技巧"><a href="#建立-Classes-Interfaces-Enums-小技巧" class="headerlink" title="建立 Classes, Interfaces, Enums 小技巧"></a>建立 Classes, Interfaces, Enums 小技巧</h2><div class="alert info no-icon"><p>在 models 底下建立 class<br>ng g cl models/customer</p>
</div>
<div class="alert info no-icon"><p>在 models 底下建立 interface<br>ng g i models/person</p>
</div>
<div class="alert info no-icon"><p>在 models 底下建立 enum<br>ng g e models/gender</p>
</div>
<h2 id="建立預設值-超好用"><a href="#建立預設值-超好用" class="headerlink" title="建立預設值(超好用)"></a>建立<options>預設值(超好用)</options></h2><p>此設定會寫在 .angular-cli.json 底下 defautls 區塊<br><div class="figure " style="width:;"><a class="fancybox" href="defaults.jpg" title="" data-fancybox-group=""><img class="fig-img" src="defaults.jpg" alt=""></a></div></p>
<div class="alert success no-icon"><p>建立 component 時候，自動不產生 .spec<br>ng set defaults.component.spec false</p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;建立元件與檔案 &lt;em&gt;(service,class,interface ….)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;建立檔案時指令的預設值設定&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
      <category term="Angular CLI" scheme="https://mileslin.github.io/tags/Angular-CLI/"/>
    
  </entry>
  
  <entry>
    <title>Angular CLI 實用小技巧 1</title>
    <link href="https://mileslin.github.io/2017/07/Angular-CLI-%E5%AF%A6%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7-1/"/>
    <id>https://mileslin.github.io/2017/07/Angular-CLI-實用小技巧-1/</id>
    <published>2017-07-02T14:47:41.000Z</published>
    <updated>2017-07-12T15:56:15.950Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>建立專案與元件</li>
<li>程式碼一致性 <em>(lint)</em></li>
</ul>
<a id="more"></a>
<h2 id="建立專案與元件類型"><a href="#建立專案與元件類型" class="headerlink" title="建立專案與元件類型"></a>建立專案與元件類型</h2><p><code>--skip-install</code> 建立NG專案的時候，不會執行 <code>npm install</code>。<br><div class="alert info no-icon"><p>ng new ngtest –skip-install</p>
</div></p>
<p><code>--help</code> 顯示建立專案時，有哪些參數可以設定。<br><div class="alert info no-icon"><p>ng new –help</p>
</div></p>
<p><code>--routing</code> 建立專案時，建立 app-routing.module.ts ， 並且 app.module.ts 自動 import AppRoutingModule。   <em>此功能也能用在建立 module 。</em><br><div class="alert info no-icon"><p>ng new ngtest –routing<br>ng g m sales –routing</p>
</div></p>
<p><code>--style scss</code> 使用 sass 寫 css 。<br><div class="alert info no-icon"><p>ng new ngtest –style scss</p>
</div></p>
<p><code>--dry-run</code> 不會建立檔案與修改檔案，但會顯示建立哪些檔案，修改哪些檔案。<br><div class="alert info no-icon"><p>ng g c –dry-run</p>
</div></p>
<p><code>--spec false</code> 建立 component 的時候不要建立 *.spec 測試檔。<br><div class="alert info no-icon"><p>ng g c my-component  –spec false</p>
</div></p>
<h2 id="其他類型"><a href="#其他類型" class="headerlink" title="其他類型"></a>其他類型</h2><p>啟動 Angular 專案，並且開啟瀏覽器。<br><div class="alert info no-icon"><p>ng serve -o</p>
</div></p>
<p>檢查 typescript 程式碼的一致性。 加上參數 <code>--help</code> 會顯示有哪些設定參數可用。<br><div class="alert info no-icon"><p>ng lint </p>
</div></p>
<p><code>--format stylish</code> cmd 顯示的輸出結果經過格式化，閱讀性更佳。<br><div class="alert info no-icon"><p>ng lint –format stylish</p>
</div></p>
<p><code>--fix</code> 嘗試自動修正程式碼。<br><div class="alert info no-icon"><p>ng lint –fix</p>
</div></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://app.pluralsight.com/library/courses/angular-cli/table-of-contents" title="PluralSight Angular CLI Course" target="_blank" rel="external">PluralSight Angular CLI Course</a>
<a href="https://github.com/angular/angular-cli" title="Angular-CLI" target="_blank" rel="external">Angular-CLI</a>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;建立專案與元件&lt;/li&gt;
&lt;li&gt;程式碼一致性 &lt;em&gt;(lint)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
      <category term="Angular CLI" scheme="https://mileslin.github.io/tags/Angular-CLI/"/>
    
  </entry>
  
  <entry>
    <title>DI 地雷之生命週期很重要</title>
    <link href="https://mileslin.github.io/2017/06/DI-%E5%9C%B0%E9%9B%B7%E4%B9%8B%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F%E5%BE%88%E9%87%8D%E8%A6%81/"/>
    <id>https://mileslin.github.io/2017/06/DI-地雷之生命週期很重要/</id>
    <published>2017-06-30T10:50:44.000Z</published>
    <updated>2017-07-02T11:35:37.714Z</updated>
    
    <content type="html"><![CDATA[<p>目前為止設定 DI 都是按照官方的文件設定一下，就放著不理他了。  結果今天踩到一個超級大雷，所以我要鄭重地說:</p>
<div class="alert warning"><p>DI 的三種生命週期很重要!!  不要亂設定!!</p>
</div>
<a id="more"></a>
<h2 id="前提概要"><a href="#前提概要" class="headerlink" title="前提概要"></a>前提概要</h2><p>因為我最近都在整合 PayPal 的服務，所以很常要寫程式發 <code>http request</code>，而我用的則是 <a href="http://restsharp.org/" title="RestSharp" target="_blank" rel="external">RestSharp</a> 這個套件，他是一個只要設定網址、header、body等等…就能夠很輕易地發送 <code>http request</code>。</p>
<p>根據 PayPal API 的規範，在使用付款或者建立發票等等的 API ，要先去呼叫 OAuth API 取的 token。</p>
<p>所以我程式就這樣設計</p>
<ul>
<li>使用 <a href="http://restsharp.org/" title="RestSharp" target="_blank" rel="external">RestSharp</a> 套件的 RestClient 發送 <code>http request</code></li>
<li>PayPalService 使用 <span class="highlight-text success">RestClient
 </span> 呼叫 OAuth API 取得 token。</li>
<li>InvoiceService 使用 <span class="highlight-text success">RestClient
 </span> 呼叫發票相關 API 建立發票，而在呼叫建立發票 request 的時後，要傳入 token。</li>
</ul>
<h2 id="程式範例"><a href="#程式範例" class="headerlink" title="程式範例"></a>程式範例</h2><p>為了讓程式能夠更容易了解，我有將原本的程式碼簡化，而這三個類別程式碼如下</p>
<!-- classes : info success warning danger no-icon -->
<div class="alert info no-icon"><p>PayPalService 與 InvoiceService 都是呼叫 restClient.Url 設定網址，接下來就是發送 request</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>code</span><ul class="tabs"><li class="tab active">RestClient</li><li class="tab">PayPalService</li><li class="tab">InvoiceService</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class RestClient : IRestClient</span><br><span class="line">{</span><br><span class="line">    public string Url { get; set; }</span><br><span class="line"></span><br><span class="line">    public string SendRequest(RestRequest request)</span><br><span class="line">    {</span><br><span class="line">        return $"I use this url:{Url} send request";</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class PayPalService : IPayPalService</span><br><span class="line">{</span><br><span class="line">    private IRestClient _restClient;</span><br><span class="line"></span><br><span class="line">    public PayPalService(IRestClient restClient)</span><br><span class="line">    {</span><br><span class="line">        this._restClient = restClient;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public string GetToken()</span><br><span class="line">    {</span><br><span class="line">        string url = @"https://api.PayPal/GetToken/xxx";</span><br><span class="line">        _restClient.Url = url;</span><br><span class="line"></span><br><span class="line">        var request = new RestRequest(Method.POST);            </span><br><span class="line">        string result = _restClient.SendRequest(request);</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class InvoiceService : IInvoiceService</span><br><span class="line">{</span><br><span class="line">    private IRestClient _restClient;</span><br><span class="line">    private IPayPalService _payPalService;</span><br><span class="line">    public InvoiceService(</span><br><span class="line">        IRestClient restClient,</span><br><span class="line">        IPayPalService payPalService)</span><br><span class="line">    {</span><br><span class="line">        this._restClient = restClient;</span><br><span class="line">        this._payPalService = payPalService;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void CreateInvoice()</span><br><span class="line">    {</span><br><span class="line">        string url = @"https://api.PayPal/xxx/invoice";</span><br><span class="line">        _restClient.Url = url;</span><br><span class="line"></span><br><span class="line">        string token = this._payPalService.GetToken();</span><br><span class="line"></span><br><span class="line">        var request = new RestRequest(Method.POST);            </span><br><span class="line">        request.AddHeader("authorization", $"{token}");                        </span><br><span class="line">        string result = _restClient.SendRequest(request);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>接下來我有一個 <code>ValuesController</code> 建構式注入 <code>IInvoiceService</code>， 並且有一個建立發票的API。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>ValuesController</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ValuesController</span> : <span class="title">ApiController</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">private</span> IInvoiceService _invoiceService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValuesController</span>(<span class="params">IInvoiceService invoiceService</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        <span class="keyword">this</span>._invoiceService = invoiceService;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    [HttpGet]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IHttpActionResult <span class="title">CreateInvoice</span>(<span class="params"></span>)</span><br><span class="line">    </span>{</span><br><span class="line">        <span class="keyword">this</span>._invoiceService.CreateInvoice();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Ok();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h4 id="程式碼跑執行之網址改變了"><a href="#程式碼跑執行之網址改變了" class="headerlink" title="程式碼跑執行之網址改變了"></a>程式碼跑執行之網址改變了</h4><div class="figure " style="width:;"><a class="fancybox" href="UrlChange.gif" title="Url 改變了 !!" data-fancybox-group=""><img class="fig-img" src="UrlChange.gif" alt="Url 改變了 !!"></a><span class="caption">Url 改變了 !!</span></div><div style="clear:both;"></div>
<h3 id="為什麼會這樣"><a href="#為什麼會這樣" class="headerlink" title="為什麼會這樣"></a>為什麼會這樣</h3><p>因為我 DI 注入的時候使用 <code>InstancePerLifetimeScope</code> 的生命週期</p>
<div class="figure " style="width:;"><a class="fancybox" href="Inject.jpg" title="" data-fancybox-group=""><img class="fig-img" src="Inject.jpg" alt=""></a></div>
<div class="alert danger no-icon"><p>意思是說，只要是同一個 request 就會使用同一個物件 !!!</p>
<p>PayPalService 與 InvoiceService 使用的是同一個 RestClient 物件</p>
<p>所以在取得 Token 的時候，把 InvoiceService 設定好的 Url 覆寫掉了</p>
</div>
<h3 id="DI-三種生命週期"><a href="#DI-三種生命週期" class="headerlink" title="DI 三種生命週期"></a>DI 三種生命週期</h3><ul>
<li>SingleInstance           : 整個應用程式都是使用同一個物件</li>
<li>InstancePerLifetimeScope : 只要是同一個 request 則使用同一個物件</li>
<li>InstancePerDependency    : 只要有注入都是一個全新的物件</li>
</ul>
<p>所以我只要將 RestClient 注入的生命週期改成 <code>InstancePerDependency</code>，問題就會解決了。</p>
<div class="figure " style="width:;"><a class="fancybox" href="InstancePerDependency.jpg" title="" data-fancybox-group=""><img class="fig-img" src="InstancePerDependency.jpg" alt=""></a></div>
<p>執行結果<br><div class="figure " style="width:;"><a class="fancybox" href="UrlNoChange.gif" title="Url 沒有改變 !!" data-fancybox-group=""><img class="fig-img" src="UrlNoChange.gif" alt="Url 沒有改變 !!"></a><span class="caption">Url 沒有改變 !!</span></div><div style="clear:both;"></div></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="http://docs.autofac.org/en/latest/lifetime/instance-scope.html#" title="Autofac" target="_blank" rel="external">docs.autofac.org</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前為止設定 DI 都是按照官方的文件設定一下，就放著不理他了。  結果今天踩到一個超級大雷，所以我要鄭重地說:&lt;/p&gt;
&lt;div class=&quot;alert warning&quot;&gt;&lt;p&gt;DI 的三種生命週期很重要!!  不要亂設定!!&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="Autofac" scheme="https://mileslin.github.io/categories/Autofac/"/>
    
    
      <category term=".NET" scheme="https://mileslin.github.io/tags/NET/"/>
    
      <category term="C#" scheme="https://mileslin.github.io/tags/C/"/>
    
      <category term="Autofac" scheme="https://mileslin.github.io/tags/Autofac/"/>
    
  </entry>
  
  <entry>
    <title>單元測試 Model 驗證</title>
    <link href="https://mileslin.github.io/2017/06/%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6Model%E9%A9%97%E8%AD%89/"/>
    <id>https://mileslin.github.io/2017/06/單元測試Model驗證/</id>
    <published>2017-06-30T04:17:39.000Z</published>
    <updated>2017-07-02T11:35:37.761Z</updated>
    
    <content type="html"><![CDATA[<p>MVC 在寫商業邏輯驗證的時候，通常都會寫在Model裡面，這好處除了統一的寫法之外，單元測試也很好寫，今天就來說明如何單元測試 Model 驗證。</p>
<a id="more"></a>
<p>首先我們會有一個要被驗證的 Model<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Model</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VM</span> : <span class="title">IValidatableObject</span></span><br><span class="line">{        </span><br><span class="line">    [Required]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Email { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;ValidationResult&gt; <span class="title">Validate</span>(<span class="params">ValidationContext validationContext</span>)</span><br><span class="line">    </span>{            </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Name == <span class="string">"Test"</span>)            </span><br><span class="line">        {</span><br><span class="line">            <span class="function"><span class="keyword">yield</span> return new <span class="title">ValidationResult</span>(<span class="params"><span class="string">"Please, set right name"</span></span>)</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="使用-Validator-驗證-Model"><a href="#使用-Validator-驗證-Model" class="headerlink" title="使用 Validator 驗證 Model"></a>使用 Validator 驗證 Model</h2><p>寫單元測試的話，其實很簡單，只要用 <code>Validator.TryValidateObject</code> 就能夠知道是否驗證成功，以及取得錯誤訊息。<br>所以寫單元測試就兩個重點要記得，這樣就能輕易寫 Model 驗證的單元測試了:</p>
<ul>
<li><code>Validator.TryValidateObject</code> 回傳是否驗證成功</li>
<li>傳入 <code>List&lt;ValidationResult&gt;</code> 取得錯誤訊息</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Unit Test</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[TestMethod()]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ValidateTest</span>(<span class="params"></span>)</span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">// Arrange</span></span><br><span class="line">    <span class="keyword">var</span> model = <span class="keyword">new</span> VM()</span><br><span class="line">    {</span><br><span class="line">        Email = <span class="literal">null</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act</span></span><br><span class="line">    <span class="keyword">var</span> validationResults = <span class="keyword">new</span> List&lt;ValidationResult&gt;();</span><br><span class="line">    <span class="keyword">var</span> actual = Validator.TryValidateObject(model, <span class="keyword">new</span> ValidationContext(model), validationResults, validateAllProperties: <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assert</span></span><br><span class="line">    Assert.IsFalse(actual, <span class="string">"Expected validation to fail."</span>);</span><br><span class="line">    Assert.IsTrue(validationResults[<span class="number">0</span>].MemberNames.ElementAt(<span class="number">0</span>) == <span class="keyword">nameof</span>(model.Email));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://www.intertech.com/Blog/unit-test-net-entity-validation/" title="How to Unit Test .NET Entity Validation" target="_blank" rel="external">How to Unit Test .NET Entity Validation</a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MVC 在寫商業邏輯驗證的時候，通常都會寫在Model裡面，這好處除了統一的寫法之外，單元測試也很好寫，今天就來說明如何單元測試 Model 驗證。&lt;/p&gt;
    
    </summary>
    
      <category term="Unit Test" scheme="https://mileslin.github.io/categories/Unit-Test/"/>
    
    
      <category term="MVC" scheme="https://mileslin.github.io/tags/MVC/"/>
    
      <category term="Unit Test" scheme="https://mileslin.github.io/tags/Unit-Test/"/>
    
  </entry>
  
</feed>
