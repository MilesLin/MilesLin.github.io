<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miles&#39;s Journey</title>
  <subtitle>Dot Net Tourist</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mileslin.github.io/"/>
  <updated>2017-01-31T14:55:39.253Z</updated>
  <id>https://mileslin.github.io/</id>
  
  <author>
    <name>Miles</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welecome to Miles&#39;s Journey</title>
    <link href="https://mileslin.github.io/2100/12/Welecome-to-Miles-s-Journey/"/>
    <id>https://mileslin.github.io/2100/12/Welecome-to-Miles-s-Journey/</id>
    <published>2100-12-31T15:59:59.000Z</published>
    <updated>2017-01-31T14:55:39.253Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to my blog.</p>
<a id="more"></a>
<p>I’m Miles, from Taiwan and I’m a web developer.</p>
<p>There are many new techniques coming out each year. I really need a blog to record what I learn.</p>
<p>This blog is exactly that. To share my web development experiences, problems with work, new techniques, Angular2, .NET MVC.. etc,. I will share all of these here.</p>
<p>I’m enthusiastic about learning languages, like Japanese and English, and jogging. I’ve participated in several half marathons. I’ll sometimes discuss these topics in my blog as well, but my main focus will be web developing.</p>
<p>Anyway, if my posts can help you solve some problems, that’s my goal.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to my blog.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular CLI 實用小技巧 3</title>
    <link href="https://mileslin.github.io/2017/07/Angular-CLI-%E5%AF%A6%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7-3/"/>
    <id>https://mileslin.github.io/2017/07/Angular-CLI-實用小技巧-3/</id>
    <published>2017-07-08T15:07:00.000Z</published>
    <updated>2017-07-08T16:59:33.795Z</updated>
    
    <content type="html"><![CDATA[<p>Angular CLI 實用小技巧</p>
<ul>
<li>建置專案與環境參數設定</li>
</ul>
<a id="more"></a>
<h2 id="Build-與-Environment"><a href="#Build-與-Environment" class="headerlink" title="Build 與 Environment"></a>Build 與 Environment</h2><p><code>build</code> 可將 Angular 專案打包，之後可以部屬到 serve 上，而 <code>environment</code> 是用來設定一些 Angular 會用到的參數，例如: 開發時的 host 是 <a href="http://dev/" target="_blank" rel="external">http://dev/</a> ， production host 是 <a href="http://prod/" target="_blank" rel="external">http://prod/</a> ，就可以將參數寫在 environment.ts。<br><div class="figure " style="width:;"><a class="fancybox" href="environments_setting.jpg" title="environment" data-fancybox-group=""><img class="fig-img" src="environments_setting.jpg" alt="environment"></a><span class="caption">environment</span></div></p>
<h3 id="比較-Dev-Build-與-Prod-Build"><a href="#比較-Dev-Build-與-Prod-Build" class="headerlink" title="比較 Dev Build 與 Prod Build:"></a>比較 Dev Build 與 Prod Build:</h3><table>
<thead>
<tr>
<th style="text-align:left">說明</th>
<th style="text-align:left">ng build</th>
<th style="text-align:left">ng build --prod</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">使用的 Environment 檔案 <div class="figure " style="width:;"><a class="fancybox" href="environments_folder.jpg" title="" data-fancybox-group=""><img class="fig-img" src="environments_folder.jpg" alt=""></a></div></td>
<td style="text-align:left">environment.ts</td>
<td style="text-align:left">environment.prod.ts</td>
</tr>
<tr>
<td style="text-align:left">不要讓檔案被 Cache <em>(Cache-busting)</em></td>
<td style="text-align:left">只有 css 檔案參考到的圖檔</td>
<td style="text-align:left">所有檔案</td>
</tr>
<tr>
<td style="text-align:left">Source maps</td>
<td style="text-align:left">建立</td>
<td style="text-align:left">不建立</td>
</tr>
<tr>
<td style="text-align:left">Extracted CSS</td>
<td style="text-align:left">global CSS output to .js</td>
<td style="text-align:left">yes, to css files</td>
</tr>
<tr>
<td style="text-align:left">醜化 <em>(Uglification)</em></td>
<td style="text-align:left">無</td>
<td style="text-align:left">有</td>
</tr>
<tr>
<td style="text-align:left">移除沒用到的程式碼 <em>(Tree-Shaking)</em></td>
<td style="text-align:left">無</td>
<td style="text-align:left">有</td>
</tr>
<tr>
<td style="text-align:left">Ahead of time compilation <em>AOT</em></td>
<td style="text-align:left">無</td>
<td style="text-align:left">有</td>
</tr>
<tr>
<td style="text-align:left">Bundling</td>
<td style="text-align:left">有</td>
<td style="text-align:left">有</td>
</tr>
</tbody>
</table>
<h3 id="dev-ng-build-參數設定小技巧"><a href="#dev-ng-build-參數設定小技巧" class="headerlink" title="dev ng build 參數設定小技巧"></a>dev ng build 參數設定小技巧</h3><p><em>這四行執行結果都一樣</em><br><div class="alert info no-icon"><p>ng build --target=development --environment=dev<br>ng build --dev -e=dev<br>ng build --dev<br>ng build</p>
</div></p>
<h3 id="prod-ng-build-參數設定小技巧"><a href="#prod-ng-build-參數設定小技巧" class="headerlink" title="prod ng build 參數設定小技巧"></a>prod ng build 參數設定小技巧</h3><p><em>這三行執行結果都一樣</em><br><div class="alert info no-icon"><p>ng build --target=production --environment=prod<br>ng build --prod -e=prod<br>ng build --prod</p>
</div></p>
<h3 id="ng-build-其他參數設定"><a href="#ng-build-其他參數設定" class="headerlink" title="ng build 其他參數設定"></a>ng build 其他參數設定</h3><table>
<thead>
<tr>
<th style="text-align:left">參數</th>
<th style="text-align:left">別名</th>
<th style="text-align:left">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">--sourcemap</td>
<td style="text-align:left">-sm</td>
<td style="text-align:left">建立 source map</td>
</tr>
<tr>
<td style="text-align:left">--aot</td>
<td style="text-align:left"></td>
<td style="text-align:left">Ahead of Time compilation</td>
</tr>
<tr>
<td style="text-align:left">--watch</td>
<td style="text-align:left">-w</td>
<td style="text-align:left">監控程式碼變成，並重新 build</td>
</tr>
</tbody>
</table>
<h4 id="輸出-Build-Bundles-說明"><a href="#輸出-Build-Bundles-說明" class="headerlink" title="輸出 Build Bundles 說明"></a>輸出 Build Bundles 說明</h4><p>專案 build 之後，會將專案用到的 js bundle  起來，每一個 bundle js 都有自己的職責。</p>
<table>
<thead>
<tr>
<th style="text-align:left">js 檔案</th>
<th style="text-align:left">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">inline.bundle.js</td>
<td style="text-align:left">WebPack runtime，應用程式拿來用來讀取 module 用</td>
</tr>
<tr>
<td style="text-align:left">main.bundle.js</td>
<td style="text-align:left">我們寫的程式碼</td>
</tr>
<tr>
<td style="text-align:left">polyfills.bundle.js</td>
<td style="text-align:left">用來支援不同的瀏覽器</td>
</tr>
<tr>
<td style="text-align:left">styles.bundle.js</td>
<td style="text-align:left">紀錄 styles 被放在哪裡</td>
</tr>
<tr>
<td style="text-align:left">vendor.bundle.js</td>
<td style="text-align:left">包含 Angular 和其他 third-party 檔案</td>
</tr>
</tbody>
</table>
<h2 id="啟動-webpack-dev-server"><a href="#啟動-webpack-dev-server" class="headerlink" title="啟動 webpack-dev-server"></a>啟動 webpack-dev-server</h2><div class="alert info no-icon"><p>ng serve</p>
</div>
<h3 id="設定參數說明"><a href="#設定參數說明" class="headerlink" title="設定參數說明:"></a>設定參數說明:</h3><table>
<thead>
<tr>
<th style="text-align:left">參數</th>
<th style="text-align:left">別名</th>
<th style="text-align:left">說明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">--open</td>
<td style="text-align:left">-o</td>
<td style="text-align:left">ng serve 後，開啟網頁</td>
</tr>
<tr>
<td style="text-align:left">--port</td>
<td style="text-align:left">-p</td>
<td style="text-align:left">指定 port 號</td>
</tr>
<tr>
<td style="text-align:left">--live-reload</td>
<td style="text-align:left">-lr</td>
<td style="text-align:left">檔案發生變更後，是否直接重新整理瀏覽器 <em>(-lr true or false)</em></td>
</tr>
<tr>
<td style="text-align:left">--ssl</td>
<td style="text-align:left"></td>
<td style="text-align:left">使用 https</td>
</tr>
<tr>
<td style="text-align:left">--proxy-config</td>
<td style="text-align:left">-pc</td>
<td style="text-align:left">Proxy configuration file</td>
</tr>
<tr>
<td style="text-align:left">--prod</td>
<td style="text-align:left"></td>
<td style="text-align:left">啟動時 server，使用 --prod 的設定</td>
</tr>
</tbody>
</table>
<h2 id="停掉-Angular-CLI-，-使用-webpack-控制專案"><a href="#停掉-Angular-CLI-，-使用-webpack-控制專案" class="headerlink" title="停掉 Angular CLI ， 使用 webpack 控制專案"></a>停掉 Angular CLI ， 使用 webpack 控制專案</h2><p>這個功能可讓懂前端開發工具的人，能夠有更多靈活的應用。<br><div class="alert info no-icon"><p>ng eject</p>
</div><br>執行指令後 Angular CLI 的功能都將會無法使用，例如 <code>ng build</code>, <code>ng serve</code> 等等…。</p>
<p><code>webpack.config.js</code>會被加入專案中，必且可以比較 <code>package.json</code> 改變的內容，會看到所有控制都交由原生的前端工具來執行。</p>
<div class="figure " style="width:;"><a class="fancybox" href="package.jpg" title="package" data-fancybox-group=""><img class="fig-img" src="package.jpg" alt="package"></a><span class="caption">package</span></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular CLI 實用小技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建置專案與環境參數設定&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular CLI" scheme="https://mileslin.github.io/tags/Angular-CLI/"/>
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular CLI 實用小技巧 2</title>
    <link href="https://mileslin.github.io/2017/07/Angular-CLI-%E5%AF%A6%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7-2/"/>
    <id>https://mileslin.github.io/2017/07/Angular-CLI-實用小技巧-2/</id>
    <published>2017-07-04T15:26:07.000Z</published>
    <updated>2017-07-08T17:00:11.656Z</updated>
    
    <content type="html"><![CDATA[<p>Angular CLI 實用小技巧</p>
<ul>
<li>建立元件與檔案 <em>(service,class,interface ….)</em></li>
<li>建立檔案時指令的預設值設定</li>
</ul>
<a id="more"></a>
<h2 id="建立-Component-小技巧"><a href="#建立-Component-小技巧" class="headerlink" title="建立 Component 小技巧"></a>建立 Component 小技巧</h2><div class="alert info no-icon"><p>ng g c &lt; options &gt;</p>
</div>
<table>
<thead>
<tr>
<th style="text-align:left">Options</th>
<th style="text-align:left">Alias</th>
<th style="text-align:left">Description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">--flat</td>
<td style="text-align:left"></td>
<td style="text-align:left">不要建立 Component 資料夾</td>
</tr>
<tr>
<td style="text-align:left">--inline-template</td>
<td style="text-align:left">-it</td>
<td style="text-align:left">不會建立 .html，將 html template 寫在 .ts file</td>
</tr>
<tr>
<td style="text-align:left">--inline-style</td>
<td style="text-align:left">-is</td>
<td style="text-align:left">不會建立 .css，將 style 寫在 .ts file</td>
</tr>
<tr>
<td style="text-align:left">--spec false</td>
<td style="text-align:left"></td>
<td style="text-align:left">不會建立 .spec</td>
</tr>
<tr>
<td style="text-align:left">--prefix my</td>
<td style="text-align:left"></td>
<td style="text-align:left">selector 加上 my prefix. ex: my-pet instead of app-pet</td>
</tr>
<tr>
<td style="text-align:left">--dry-run</td>
<td style="text-align:left">-d</td>
<td style="text-align:left">顯示那些檔案會新增跟那些檔案會變更</td>
</tr>
</tbody>
</table>
<h2 id="建立-Service-小技巧"><a href="#建立-Service-小技巧" class="headerlink" title="建立 Service 小技巧"></a>建立 Service 小技巧</h2><p><em>此功能也能用在建立 Component 上</em><br><div class="alert info no-icon"><p>新增 service 並自動加入指定 module providers<br>ng g s my-service -m app.module</p>
</div></p>
<h2 id="建立-Classes-Interfaces-Enums-小技巧"><a href="#建立-Classes-Interfaces-Enums-小技巧" class="headerlink" title="建立 Classes, Interfaces, Enums 小技巧"></a>建立 Classes, Interfaces, Enums 小技巧</h2><div class="alert info no-icon"><p>在 models 底下建立 class<br>ng g cl models/customer</p>
</div>
<div class="alert info no-icon"><p>在 models 底下建立 interface<br>ng g i models/person</p>
</div>
<div class="alert info no-icon"><p>在 models 底下建立 enum<br>ng g e models/gender</p>
</div>
<h2 id="建立預設值-超好用"><a href="#建立預設值-超好用" class="headerlink" title="建立預設值(超好用)"></a>建立<options>預設值(超好用)</options></h2><p>此設定會寫在 .angular-cli.json 底下 defautls 區塊<br><div class="figure " style="width:;"><a class="fancybox" href="defaults.jpg" title="" data-fancybox-group=""><img class="fig-img" src="defaults.jpg" alt=""></a></div></p>
<div class="alert success no-icon"><p>建立 component 時候，自動不產生 .spec<br>ng set sefaults.component.spec false</p>
</div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular CLI 實用小技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立元件與檔案 &lt;em&gt;(service,class,interface ….)&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;建立檔案時指令的預設值設定&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular CLI" scheme="https://mileslin.github.io/tags/Angular-CLI/"/>
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Angular CLI 實用小技巧 1</title>
    <link href="https://mileslin.github.io/2017/07/Angular-CLI-%E5%AF%A6%E7%94%A8%E5%B0%8F%E6%8A%80%E5%B7%A7-1/"/>
    <id>https://mileslin.github.io/2017/07/Angular-CLI-實用小技巧-1/</id>
    <published>2017-07-02T14:47:41.000Z</published>
    <updated>2017-07-08T16:59:48.044Z</updated>
    
    <content type="html"><![CDATA[<p>Angular CLI 實用小技巧</p>
<ul>
<li>建立專案與元件</li>
<li>程式碼一致性 <em>(lint)</em></li>
</ul>
<a id="more"></a>
<h2 id="建立專案與元件類型"><a href="#建立專案與元件類型" class="headerlink" title="建立專案與元件類型"></a>建立專案與元件類型</h2><p><code>--skip-install</code> 建立NG專案的時候，不會執行 <code>npm install</code>。<br><div class="alert info no-icon"><p>ng new ngtest –skip-install</p>
</div></p>
<p><code>--help</code> 顯示建立專案時，有哪些參數可以設定。<br><div class="alert info no-icon"><p>ng new –help</p>
</div></p>
<p><code>--routing</code> 建立專案時，建立 app-routing.module.ts ， 並且 app.module.ts 自動 import AppRoutingModule。   <em>此功能也能用在建立 module 。</em><br><div class="alert info no-icon"><p>ng new ngtest –routing<br>ng g m sales –routing</p>
</div></p>
<p><code>--style scss</code> 使用 sass 寫 css 。<br><div class="alert info no-icon"><p>ng new ngtest –style scss</p>
</div></p>
<p><code>--dry-run</code> 不會建立檔案與修改檔案，但會顯示建立哪些檔案，修改哪些檔案。<br><div class="alert info no-icon"><p>ng g c –dry-run</p>
</div></p>
<p><code>--spec false</code> 建立 component 的時候不要建立 *.spec 測試檔。<br><div class="alert info no-icon"><p>ng g c my-component  –spec false</p>
</div></p>
<h2 id="其他類型"><a href="#其他類型" class="headerlink" title="其他類型"></a>其他類型</h2><p>啟動 Angular 專案，並且開啟瀏覽器。<br><div class="alert info no-icon"><p>ng serve -o</p>
</div></p>
<p>檢查 typescript 程式碼的一致性。 加上參數 <code>--help</code> 會顯示有哪些設定參數可用。<br><div class="alert info no-icon"><p>ng lint </p>
</div></p>
<p><code>--format stylish</code> cmd 顯示的輸出結果經過格式化，閱讀性更佳。<br><div class="alert info no-icon"><p>ng lint –format stylish</p>
</div></p>
<p><code>--fix</code> 嘗試自動修正程式碼。<br><div class="alert info no-icon"><p>ng lint –fix</p>
</div></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://app.pluralsight.com/library/courses/angular-cli/table-of-contents" title="PluralSight Angular CLI Course" target="_blank" rel="external">PluralSight Angular CLI Course</a>
<a href="https://github.com/angular/angular-cli" title="Angular-CLI" target="_blank" rel="external">Angular-CLI</a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Angular CLI 實用小技巧&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;建立專案與元件&lt;/li&gt;
&lt;li&gt;程式碼一致性 &lt;em&gt;(lint)&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular CLI" scheme="https://mileslin.github.io/tags/Angular-CLI/"/>
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>DI 地雷之生命週期很重要</title>
    <link href="https://mileslin.github.io/2017/06/DI-%E5%9C%B0%E9%9B%B7%E4%B9%8B%E7%94%9F%E5%91%BD%E9%80%B1%E6%9C%9F%E5%BE%88%E9%87%8D%E8%A6%81/"/>
    <id>https://mileslin.github.io/2017/06/DI-地雷之生命週期很重要/</id>
    <published>2017-06-30T10:50:44.000Z</published>
    <updated>2017-07-02T11:35:37.714Z</updated>
    
    <content type="html"><![CDATA[<p>目前為止設定 DI 都是按照官方的文件設定一下，就放著不理他了。  結果今天踩到一個超級大雷，所以我要鄭重地說:</p>
<div class="alert warning"><p>DI 的三種生命週期很重要!!  不要亂設定!!</p>
</div>
<a id="more"></a>
<h2 id="前提概要"><a href="#前提概要" class="headerlink" title="前提概要"></a>前提概要</h2><p>因為我最近都在整合 PayPal 的服務，所以很常要寫程式發 <code>http request</code>，而我用的則是 <a href="http://restsharp.org/" title="RestSharp" target="_blank" rel="external">RestSharp</a> 這個套件，他是一個只要設定網址、header、body等等…就能夠很輕易地發送 <code>http request</code>。</p>
<p>根據 PayPal API 的規範，在使用付款或者建立發票等等的 API ，要先去呼叫 OAuth API 取的 token。</p>
<p>所以我程式就這樣設計</p>
<ul>
<li>使用 <a href="http://restsharp.org/" title="RestSharp" target="_blank" rel="external">RestSharp</a> 套件的 RestClient 發送 <code>http request</code></li>
<li>PayPalService 使用 <span class="highlight-text success">RestClient
 </span> 呼叫 OAuth API 取得 token。</li>
<li>InvoiceService 使用 <span class="highlight-text success">RestClient
 </span> 呼叫發票相關 API 建立發票，而在呼叫建立發票 request 的時後，要傳入 token。</li>
</ul>
<h2 id="程式範例"><a href="#程式範例" class="headerlink" title="程式範例"></a>程式範例</h2><p>為了讓程式能夠更容易了解，我有將原本的程式碼簡化，而這三個類別程式碼如下</p>
<!-- classes : info success warning danger no-icon -->
<div class="alert info no-icon"><p>PayPalService 與 InvoiceService 都是呼叫 restClient.Url 設定網址，接下來就是發送 request</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>code</span><ul class="tabs"><li class="tab active">RestClient</li><li class="tab">PayPalService</li><li class="tab">InvoiceService</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class RestClient : IRestClient</span><br><span class="line">{</span><br><span class="line">    public string Url { get; set; }</span><br><span class="line"></span><br><span class="line">    public string SendRequest(RestRequest request)</span><br><span class="line">    {</span><br><span class="line">        return $"I use this url:{Url} send request";</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public class PayPalService : IPayPalService</span><br><span class="line">{</span><br><span class="line">    private IRestClient _restClient;</span><br><span class="line"></span><br><span class="line">    public PayPalService(IRestClient restClient)</span><br><span class="line">    {</span><br><span class="line">        this._restClient = restClient;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public string GetToken()</span><br><span class="line">    {</span><br><span class="line">        string url = @"https://api.PayPal/GetToken/xxx";</span><br><span class="line">        _restClient.Url = url;</span><br><span class="line"></span><br><span class="line">        var request = new RestRequest(Method.POST);            </span><br><span class="line">        string result = _restClient.SendRequest(request);</span><br><span class="line"></span><br><span class="line">        return result;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class InvoiceService : IInvoiceService</span><br><span class="line">{</span><br><span class="line">    private IRestClient _restClient;</span><br><span class="line">    private IPayPalService _payPalService;</span><br><span class="line">    public InvoiceService(</span><br><span class="line">        IRestClient restClient,</span><br><span class="line">        IPayPalService payPalService)</span><br><span class="line">    {</span><br><span class="line">        this._restClient = restClient;</span><br><span class="line">        this._payPalService = payPalService;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    public void CreateInvoice()</span><br><span class="line">    {</span><br><span class="line">        string url = @"https://api.PayPal/xxx/invoice";</span><br><span class="line">        _restClient.Url = url;</span><br><span class="line"></span><br><span class="line">        string token = this._payPalService.GetToken();</span><br><span class="line"></span><br><span class="line">        var request = new RestRequest(Method.POST);            </span><br><span class="line">        request.AddHeader("authorization", $"{token}");                        </span><br><span class="line">        string result = _restClient.SendRequest(request);</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>接下來我有一個 <code>ValuesController</code> 建構式注入 <code>IInvoiceService</code>， 並且有一個建立發票的API。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>ValuesController</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ValuesController</span> : <span class="title">ApiController</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">private</span> IInvoiceService _invoiceService;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValuesController</span>(<span class="params">IInvoiceService invoiceService</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        <span class="keyword">this</span>._invoiceService = invoiceService;</span><br><span class="line">    }</span><br><span class="line">    </span><br><span class="line">    [HttpGet]</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IHttpActionResult <span class="title">CreateInvoice</span>(<span class="params"></span>)</span><br><span class="line">    </span>{</span><br><span class="line">        <span class="keyword">this</span>._invoiceService.CreateInvoice();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Ok();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h4 id="程式碼跑執行之網址改變了"><a href="#程式碼跑執行之網址改變了" class="headerlink" title="程式碼跑執行之網址改變了"></a>程式碼跑執行之網址改變了</h4><div class="figure " style="width:;"><a class="fancybox" href="UrlChange.gif" title="Url 改變了 !!" data-fancybox-group=""><img class="fig-img" src="UrlChange.gif" alt="Url 改變了 !!"></a><span class="caption">Url 改變了 !!</span></div><div style="clear:both;"></div>
<h3 id="為什麼會這樣"><a href="#為什麼會這樣" class="headerlink" title="為什麼會這樣"></a>為什麼會這樣</h3><p>因為我 DI 注入的時候使用 <code>InstancePerLifetimeScope</code> 的生命週期</p>
<div class="figure " style="width:;"><a class="fancybox" href="Inject.jpg" title="" data-fancybox-group=""><img class="fig-img" src="Inject.jpg" alt=""></a></div>
<div class="alert danger no-icon"><p>意思是說，只要是同一個 request 就會使用同一個物件 !!!</p>
<p>PayPalService 與 InvoiceService 使用的是同一個 RestClient 物件</p>
<p>所以在取得 Token 的時候，把 InvoiceService 設定好的 Url 覆寫掉了</p>
</div>
<h3 id="DI-三種生命週期"><a href="#DI-三種生命週期" class="headerlink" title="DI 三種生命週期"></a>DI 三種生命週期</h3><ul>
<li>SingleInstance           : 整個應用程式都是使用同一個物件</li>
<li>InstancePerLifetimeScope : 只要是同一個 request 則使用同一個物件</li>
<li>InstancePerDependency    : 只要有注入都是一個全新的物件</li>
</ul>
<p>所以我只要將 RestClient 注入的生命週期改成 <code>InstancePerDependency</code>，問題就會解決了。</p>
<div class="figure " style="width:;"><a class="fancybox" href="InstancePerDependency.jpg" title="" data-fancybox-group=""><img class="fig-img" src="InstancePerDependency.jpg" alt=""></a></div>
<p>執行結果<br><div class="figure " style="width:;"><a class="fancybox" href="UrlNoChange.gif" title="Url 沒有改變 !!" data-fancybox-group=""><img class="fig-img" src="UrlNoChange.gif" alt="Url 沒有改變 !!"></a><span class="caption">Url 沒有改變 !!</span></div><div style="clear:both;"></div></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="http://docs.autofac.org/en/latest/lifetime/instance-scope.html#" title="Autofac" target="_blank" rel="external">docs.autofac.org</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前為止設定 DI 都是按照官方的文件設定一下，就放著不理他了。  結果今天踩到一個超級大雷，所以我要鄭重地說:&lt;/p&gt;
&lt;div class=&quot;alert warning&quot;&gt;&lt;p&gt;DI 的三種生命週期很重要!!  不要亂設定!!&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="Autofac" scheme="https://mileslin.github.io/categories/Autofac/"/>
    
    
      <category term="C#" scheme="https://mileslin.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://mileslin.github.io/tags/NET/"/>
    
      <category term="Autofac" scheme="https://mileslin.github.io/tags/Autofac/"/>
    
  </entry>
  
  <entry>
    <title>單元測試 Model 驗證</title>
    <link href="https://mileslin.github.io/2017/06/%E5%96%AE%E5%85%83%E6%B8%AC%E8%A9%A6Model%E9%A9%97%E8%AD%89/"/>
    <id>https://mileslin.github.io/2017/06/單元測試Model驗證/</id>
    <published>2017-06-30T04:17:39.000Z</published>
    <updated>2017-07-02T11:35:37.761Z</updated>
    
    <content type="html"><![CDATA[<p>MVC 在寫商業邏輯驗證的時候，通常都會寫在Model裡面，這好處除了統一的寫法之外，單元測試也很好寫，今天就來說明如何單元測試 Model 驗證。</p>
<a id="more"></a>
<p>首先我們會有一個要被驗證的 Model<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Model</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">VM</span> : <span class="title">IValidatableObject</span></span><br><span class="line">{        </span><br><span class="line">    [Required]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Email { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">string</span> Name { <span class="keyword">get</span>; <span class="keyword">set</span>; }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IEnumerable&lt;ValidationResult&gt; <span class="title">Validate</span>(<span class="params">ValidationContext validationContext</span>)</span><br><span class="line">    </span>{            </span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Name == <span class="string">"Test"</span>)            </span><br><span class="line">        {</span><br><span class="line">            <span class="function"><span class="keyword">yield</span> return new <span class="title">ValidationResult</span>(<span class="params"><span class="string">"Please, set right name"</span></span>)</span>;</span><br><span class="line">        }</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="使用-Validator-驗證-Model"><a href="#使用-Validator-驗證-Model" class="headerlink" title="使用 Validator 驗證 Model"></a>使用 Validator 驗證 Model</h2><p>寫單元測試的話，其實很簡單，只要用 <code>Validator.TryValidateObject</code> 就能夠知道是否驗證成功，以及取得錯誤訊息。<br>所以寫單元測試就兩個重點要記得，這樣就能輕易寫 Model 驗證的單元測試了:</p>
<ul>
<li><code>Validator.TryValidateObject</code> 回傳是否驗證成功</li>
<li>傳入 <code>List&lt;ValidationResult&gt;</code> 取得錯誤訊息</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Unit Test</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[TestMethod()]</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ValidateTest</span>(<span class="params"></span>)</span><br><span class="line"></span>{</span><br><span class="line">    <span class="comment">// Arrange</span></span><br><span class="line">    <span class="keyword">var</span> model = <span class="keyword">new</span> VM()</span><br><span class="line">    {</span><br><span class="line">        Email = <span class="literal">null</span></span><br><span class="line">    };</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Act</span></span><br><span class="line">    <span class="keyword">var</span> validationResults = <span class="keyword">new</span> List&lt;ValidationResult&gt;();</span><br><span class="line">    <span class="keyword">var</span> actual = Validator.TryValidateObject(model, <span class="keyword">new</span> ValidationContext(model), validationResults, validateAllProperties: <span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Assert</span></span><br><span class="line">    Assert.IsFalse(actual, <span class="string">"Expected validation to fail."</span>);</span><br><span class="line">    Assert.IsTrue(validationResults[<span class="number">0</span>].MemberNames.ElementAt(<span class="number">0</span>) == <span class="keyword">nameof</span>(model.Email));</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://www.intertech.com/Blog/unit-test-net-entity-validation/" title="How to Unit Test .NET Entity Validation" target="_blank" rel="external">How to Unit Test .NET Entity Validation</a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;MVC 在寫商業邏輯驗證的時候，通常都會寫在Model裡面，這好處除了統一的寫法之外，單元測試也很好寫，今天就來說明如何單元測試 Model 驗證。&lt;/p&gt;
    
    </summary>
    
      <category term="Unit Test" scheme="https://mileslin.github.io/categories/Unit-Test/"/>
    
    
      <category term="MVC" scheme="https://mileslin.github.io/tags/MVC/"/>
    
      <category term="Unit Test" scheme="https://mileslin.github.io/tags/Unit-Test/"/>
    
  </entry>
  
  <entry>
    <title>Destructuring assignment</title>
    <link href="https://mileslin.github.io/2017/06/Destructuring-assignment/"/>
    <id>https://mileslin.github.io/2017/06/Destructuring-assignment/</id>
    <published>2017-06-28T15:52:51.000Z</published>
    <updated>2017-06-28T16:22:23.450Z</updated>
    
    <content type="html"><![CDATA[<p>解構賦值是一種優雅的方式能夠將<code>{}</code>與<code>[]</code>的值讀出來<br><a id="more"></a></p>
<h2 id="讀取陣列並-assign-到變數上"><a href="#讀取陣列並-assign-到變數上" class="headerlink" title="讀取陣列並 assign 到變數上"></a>讀取陣列並 assign 到變數上</h2><p><em>陣列的解構賦值用陣列去接</em><br><figure class="codeblock codeblock--tabbed"><figcaption><span>JavaScript</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> foo = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</span><br><span class="line"><span class="keyword">let</span> [one, two, three] = foo;</span><br><span class="line"><span class="built_in">console</span>.log(one); <span class="comment">// 'one'</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="物件的解構賦值"><a href="#物件的解構賦值" class="headerlink" title="物件的解構賦值"></a>物件的解構賦值</h2><p>在ES6有支援物件的解構賦值，這就能用在更多的用途上。  例如這有點像 import module 的用法。<br><em>物件的解構賦值用物件去接</em><br><figure class="codeblock codeblock--tabbed"><figcaption><span>js</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> myModule = {</span><br><span class="line">  <span class="attr">drawSquare</span>: <span class="function"><span class="keyword">function</span> <span class="title">drawSquare</span>(<span class="params">length</span>) </span>{ <span class="comment">/* implementation */</span> },</span><br><span class="line">  <span class="attr">drawCircle</span>: <span class="function"><span class="keyword">function</span> <span class="title">drawCircle</span>(<span class="params">radius</span>) </span>{ <span class="comment">/* implementation */</span> },</span><br><span class="line">  <span class="attr">drawText</span>: <span class="function"><span class="keyword">function</span> <span class="title">drawText</span>(<span class="params">text</span>) </span>{ <span class="comment">/* implementation */</span> },</span><br><span class="line">};</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> {drawSquare, drawText} = myModule;</span><br><span class="line"></span><br><span class="line">drawSquare(<span class="number">5</span>);</span><br><span class="line">drawText(<span class="string">'hello'</span>);</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="傳入-function-的解構賦值"><a href="#傳入-function-的解構賦值" class="headerlink" title="傳入 function 的解構賦值"></a>傳入 function 的解構賦值</h2><p>解構賦值也允許你傳入 function ，並且 function’s parameter 指定要讀取哪一個 properties。<br><!-- classes : info success warning danger no-icon --><br><div class="alert info no-icon"><p>function 參數的 property 名稱要與傳入物件的 property 名稱一致，否額會 undefined</p>
</div><br><figure class="codeblock codeblock--tabbed"><figcaption><span>js</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> jane = { <span class="attr">firstName</span>: <span class="string">'Jane'</span>, <span class="attr">lastName</span>: <span class="string">'Doe'</span>};</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayName</span>(<span class="params">{firstName, lastName, middleName = <span class="string">'N/A'</span>}</span>) </span>{</span><br><span class="line">  <span class="built_in">console</span>.log(firstName);  <span class="comment">// Jane</span></span><br><span class="line">  <span class="built_in">console</span>.log(lastName);   <span class="comment">// Doe</span></span><br><span class="line">  <span class="built_in">console</span>.log(middleName); <span class="comment">// N/A</span></span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">sayName(jane)</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="陣列變數交換的用法"><a href="#陣列變數交換的用法" class="headerlink" title="陣列變數交換的用法"></a>陣列變數交換的用法</h2><p>陣列可以用解構賦值的方式，交換陣列的值<br><figure class="codeblock codeblock--tabbed"><figcaption><span>js</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line">[a, b] = [b, a];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://angular-2-training-book.rangle.io/handout/features/destructuring.html" title="angular-2-training-book" target="_blank" rel="external">angular-2-training-book</a> <a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment" title="MDN" target="_blank" rel="external">MDN</a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解構賦值是一種優雅的方式能夠將&lt;code&gt;{}&lt;/code&gt;與&lt;code&gt;[]&lt;/code&gt;的值讀出來&lt;br&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>擴充套件屬性，以sweetalert為例</title>
    <link href="https://mileslin.github.io/2017/06/%E6%93%B4%E5%85%85%E5%A5%97%E4%BB%B6%E5%B1%AC%E6%80%A7%EF%BC%8C%E4%BB%A5sweetalert%E7%82%BA%E4%BE%8B/"/>
    <id>https://mileslin.github.io/2017/06/擴充套件屬性，以sweetalert為例/</id>
    <published>2017-06-23T06:25:13.000Z</published>
    <updated>2017-06-28T15:51:45.274Z</updated>
    
    <content type="html"><![CDATA[<p>最近專案上有使用到 <a href="https://limonte.github.io/sweetalert2/" title="Sweetalter2" target="_blank" rel="external">Sweetalter2</a> ，可是目前 typescript 的 typing 檔案，只有 Sweetalter 的版本，導致有很多屬性在使用的時候，typescript 看不懂，例如 <span class="highlight-text danger">input </span>  這個屬性。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>error_input</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">swal({</span><br><span class="line">  title: <span class="string">'Oops !!!'</span>,</span><br><span class="line">  input: <span class="string">'email'</span> <span class="comment">// &lt;- error</span></span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div></figure>
<a id="more"></a>
<p>要解決這個問題呢，我們首先要先知道 <code>swal({})</code> 是傳入什麼型別，這時候就要找 sweetalert typing 定義檔，就可以看到 <code>swal({})</code> 傳入的型別是什麼。<br><div class="figure " style="width:;"><a class="fancybox" href="sweetalter_typing.jpg" title="sweetalter_typing" data-fancybox-group=""><img class="fig-img" src="sweetalter_typing.jpg" alt="sweetalter_typing"></a><span class="caption">sweetalter_typing</span></div></p>
<div class="alert info"><p>declare namespace SweetAlert 底下的 interface SettingsBase</p>
</div>
<p>型別定義在 namespace SweetAlert 底下的 interface ，知道定義型別的地方後，接下就當然不能直接在這邊新增，因為這是 npm 下載下來的 package。  我們要直接去 typescript 的 typing 新增 SettingsBase 的擴充。</p>
<p>在 Angular 專案底下的 <code>src\typings.d.ts</code>，新增同樣 namespace 與 interface<br><div class="figure " style="width:;"><a class="fancybox" href="extend_typing.jpg" title="extend_typing" data-fancybox-group=""><img class="fig-img" src="extend_typing.jpg" alt="extend_typing"></a><span class="caption">extend_typing</span></div></p>
<p>就可以發現，我們使用 <code>swal({})</code> 就可以傳入 input 屬性了。<br><div class="figure " style="width:;"><a class="fancybox" href="success.jpg" title="success" data-fancybox-group=""><img class="fig-img" src="success.jpg" alt="success"></a><span class="caption">success</span></div></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近專案上有使用到 &lt;a href=&quot;https://limonte.github.io/sweetalert2/&quot; title=&quot;Sweetalter2&quot;&gt;Sweetalter2&lt;/a&gt; ，可是目前 typescript 的 typing 檔案，只有 Sweetalter 的版本，導致有很多屬性在使用的時候，typescript 看不懂，例如 &lt;span class=&quot;highlight-text danger&quot;&gt;input &lt;/span&gt;  這個屬性。&lt;/p&gt;
&lt;figure class=&quot;codeblock codeblock--tabbed&quot;&gt;&lt;figcaption&gt;&lt;span&gt;error_input&lt;/span&gt;&lt;ul class=&quot;tabs&quot;&gt;&lt;li class=&quot;tab active&quot;&gt;ts&lt;/li&gt;&lt;/ul&gt;&lt;/figcaption&gt;&lt;div class=&quot;tabs-content&quot;&gt;&lt;figure class=&quot;highlight ts&quot; style=&quot;display: block;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;swal({&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  title: &lt;span class=&quot;string&quot;&gt;&#39;Oops !!!&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  input: &lt;span class=&quot;string&quot;&gt;&#39;email&#39;&lt;/span&gt; &lt;span class=&quot;comment&quot;&gt;// &amp;lt;- error&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;});&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
      <category term="typescript" scheme="https://mileslin.github.io/tags/typescript/"/>
    
  </entry>
  
  <entry>
    <title>為什麼需要 Domain-Driven Design</title>
    <link href="https://mileslin.github.io/2017/05/%E7%82%BA%E4%BB%80%E9%BA%BC%E9%9C%80%E8%A6%81-Domain-Driven-Design/"/>
    <id>https://mileslin.github.io/2017/05/為什麼需要-Domain-Driven-Design/</id>
    <published>2017-05-21T15:51:09.000Z</published>
    <updated>2017-06-07T17:29:51.270Z</updated>
    
    <content type="html"><![CDATA[<p>最近開始看 Donmain-Driven Design 的 <a href="https://app.pluralsight.com/library/courses/domain-driven-design-fundamentals/table-of-contents" title="TitleAttribute" target="_blank" rel="external">plurasight 的影片</a> ，其裡面有一句話深深吸引我，而當我開始看 DDD 的教學影片時，發現需要知道的內容，是多麼的廣泛，這句話當之無愧。。<br> <blockquote><p>The more you know, the more you realize you know nothing</p>
<footer><strong>Socrates</strong></footer></blockquote></p>
<a id="more"></a> 
<h2 id="為什麼需要-DDD"><a href="#為什麼需要-DDD" class="headerlink" title="為什麼需要 DDD?"></a>為什麼需要 DDD?</h2><p>DDD 開發專注在理解使用者的需求，專注在 <span class="highlight-text primary">Domain</span> 上，理解之後才開始寫程式碼。
t
DDD 有其準則跟模式，幫助我們解決困難複雜的問題。  能夠幫助我們寫出代表 <span class="highlight-text primary">Domain</span> 乾淨且可測試的程式碼，</p>
<p>DDD 幫助我們專注在更小、獨立 <span class="highlight-text primary">Domain</span>，讓我們在開發上更為準確。 </p>
<h2 id="需要一位-Domain-Experts"><a href="#需要一位-Domain-Experts" class="headerlink" title="需要一位 Domain Experts"></a>需要一位 Domain Experts</h2><p>在 DDD 開發上，是非常重視溝通，其需要一位懂專業領域的專家，幫助我們釐清問題，其 Domain Experts 可以是合作的客戶、可以是專案上的 PM 等等….</p>
<h2 id="用一張大圖來表示-DDD"><a href="#用一張大圖來表示-DDD" class="headerlink" title="用一張大圖來表示 DDD"></a>用一張大圖來表示 DDD</h2><p>Slides 的這張投影片，這就 DDD 需要懂的概念，因為剛開始在學習，目前懂的東西還不多，為了呼應開頭的引言，就先放在這邊嚇嚇大家XD</p>
<div class="figure " style="width:;"><a class="fancybox" href="DDD_Big_Picture.jpg" title="DDD_Big_Picture" data-fancybox-group=""><img class="fig-img" src="DDD_Big_Picture.jpg" alt="DDD_Big_Picture"></a><span class="caption">DDD_Big_Picture</span></div>
<h2 id="DDD-的優點"><a href="#DDD-的優點" class="headerlink" title="DDD 的優點"></a>DDD 的優點</h2><ul>
<li>延展性  </li>
<li>站在使用者的角度來看問題</li>
<li>有一套流程處理複雜的問題</li>
<li>幫助我們寫有組織且可測試的程式碼</li>
<li>所有的商業邏輯集中在一個地方</li>
<li>有很多 patterns 可以在專案中使用</li>
</ul>
<p>雖然 DDD 提供很優點，像是好維護，並有一套的溝通方式幫助我們理解複雜的商業邏輯，但是這應該是用在有複雜商業邏輯的專案上。</p>
 <blockquote><p>While Domain-Driven Design provides many technical benefits, such as maintainability, it should be applied only to complex domains where the model and the linguistic processes provide clear benefits in the communication of complex information, and in the formulation of a common understanding of the domain.</p>
<footer><strong>Eric Evans</strong><cite>Domain-Driven Design</cite></footer></blockquote>
<h2 id="DDD-的缺點"><a href="#DDD-的缺點" class="headerlink" title="DDD 的缺點"></a>DDD 的缺點</h2><ul>
<li>花時間<ul>
<li>溝通並理解商業邏輯，理解什麼問題該被解決</li>
<li>將商業邏從應用程式中獨立出來</li>
</ul>
</li>
<li>學習曲線<ul>
<li>不同的開發原則</li>
<li>新的 patterns</li>
<li>新的開發方式</li>
</ul>
</li>
<li>只用在擁有複雜商業邏輯的專案上<ul>
<li>不適合用無複雜商業邏輯的專案，只有在做 CRUD 的情境上</li>
<li>技術複雜但是商業邏輯簡單的情境，也不適用</li>
</ul>
</li>
<li>公司也需要同意執行 DDD 才可以!!!!</li>
</ul>
<h3 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h3><p>DDD 真的是一個很大的主題，在看影片上，常常同一個影片也要多看幾次，才稍微理解裡面講的內容。  也因為剛開始學習的關係，若提及的內容與讀者理解稍有不同，也歡迎留言告知。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近開始看 Donmain-Driven Design 的 &lt;a href=&quot;https://app.pluralsight.com/library/courses/domain-driven-design-fundamentals/table-of-contents&quot; title=&quot;TitleAttribute&quot;&gt;plurasight 的影片&lt;/a&gt; ，其裡面有一句話深深吸引我，而當我開始看 DDD 的教學影片時，發現需要知道的內容，是多麼的廣泛，這句話當之無愧。。&lt;br&gt; &lt;blockquote&gt;&lt;p&gt;The more you know, the more you realize you know nothing&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;Socrates&lt;/strong&gt;&lt;/footer&gt;&lt;/blockquote&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Domain-Driven Design" scheme="https://mileslin.github.io/categories/Domain-Driven-Design/"/>
    
    
      <category term="Domain-Driven Design" scheme="https://mileslin.github.io/tags/Domain-Driven-Design/"/>
    
  </entry>
  
  <entry>
    <title>vscode 設定自動觸發 suggestions</title>
    <link href="https://mileslin.github.io/2017/05/vscode-%E8%A8%AD%E5%AE%9A%E8%87%AA%E5%8B%95%E8%A7%B8%E7%99%BC-suggestions/"/>
    <id>https://mileslin.github.io/2017/05/vscode-設定自動觸發-suggestions/</id>
    <published>2017-05-09T11:07:21.000Z</published>
    <updated>2017-06-02T17:03:33.848Z</updated>
    
    <content type="html"><![CDATA[<p>某一版 vscode 更新後，寫 markdown 文件時不會自動跑出小視窗提醒能輸入的 snippet，需要點 <span class="highlight-text primary">ctrl + space</span>
才會出現視窗，可是中文輸入法的 <span class="highlight-text primary">ctrl + space</span> 有自己的預設行為啊 !! 。</p>
<a id="more"></a>
<p>於是乎，我上 github 上去詢問是否有解決的方案，感謝官方的大神們有回我，結論是只要設定 markdown 的 quickSuggestions 就好了。  <a href="https://github.com/Microsoft/vscode/issues/26108#issuecomment-299738939" title="github回應" target="_blank" rel="external">github回應</a></p>
<h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><p>首先開啟 Command Palette (<code>Ctrl+Shift+P</code>)，輸入 <code>Configure language specific settings</code> 後按enter， 然後選擇 <code>markdown</code>。</p>
<p>在設定檔加入這段就可以了</p>
<div class="alert info"><p>“[markdown]”: {<br>    “editor.quickSuggestions”: true<br>}</p>
</div>
<p>完整片段<br><div class="figure " style="width:;"><a class="fancybox" href="setting.jpg" title="" data-fancybox-group=""><img class="fig-img" src="setting.jpg" alt=""></a></div><div style="clear:both;"></div></p>
<p>詳細設定說明: <a href="https://code.visualstudio.com/updates/v1_9#_language-specific-settings" title="language-specific-settings" target="_blank" rel="external">language-specific-settings</a></p>
<p>能解決這問題，太令人感動了&gt;&lt;”</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;某一版 vscode 更新後，寫 markdown 文件時不會自動跑出小視窗提醒能輸入的 snippet，需要點 &lt;span class=&quot;highlight-text primary&quot;&gt;ctrl + space&lt;/span&gt;
才會出現視窗，可是中文輸入法的 &lt;span class=&quot;highlight-text primary&quot;&gt;ctrl + space&lt;/span&gt; 有自己的預設行為啊 !! 。&lt;/p&gt;
    
    </summary>
    
      <category term="vscode" scheme="https://mileslin.github.io/categories/vscode/"/>
    
    
      <category term="vscode" scheme="https://mileslin.github.io/tags/vscode/"/>
    
      <category term="trigger" scheme="https://mileslin.github.io/tags/trigger/"/>
    
      <category term="suggestion" scheme="https://mileslin.github.io/tags/suggestion/"/>
    
  </entry>
  
  <entry>
    <title>Two way data binding event 的寫法</title>
    <link href="https://mileslin.github.io/2017/05/Two-way-data-binding-event-%E7%9A%84%E5%AF%AB%E6%B3%95/"/>
    <id>https://mileslin.github.io/2017/05/Two-way-data-binding-event-的寫法/</id>
    <published>2017-05-06T08:26:25.000Z</published>
    <updated>2017-05-09T12:53:24.643Z</updated>
    
    <content type="html"><![CDATA[<p>之前學的 two way binding 的寫法如下</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>[(ngModel)]</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstName"</span> [(<span class="attr">ngModel</span>)]=<span class="string">"firstName"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>今天要說明的是，如何把<code>( )</code>與<code>[ ]</code>分開寫，這樣就可以在使用者輸入的時候加入一些邏輯進入</p>
<a id="more"></a>
<h2 id="將小括號-另外寫"><a href="#將小括號-另外寫" class="headerlink" title="將小括號( )另外寫"></a>將小括號<code>( )</code>另外寫</h2><figure class="codeblock codeblock--tabbed"><figcaption><span>[(ngModel)]</span><ul class="tabs"><li class="tab active">html</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstName"</span> [<span class="attr">ngModel</span>]=<span class="string">"firstName"</span>(<span class="attr">ngModelChange</span>)= <span class="string">"firstName=$event"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>那這樣寫有什麼好處呢?  就是當我們想要在使用者輸入的時候增加一些邏輯，我們就可以這樣寫。</p>
<p>例如:強制使用者第一個字輸入大寫，我們就可以改寫成這樣</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>ToUpperCase</span><ul class="tabs"><li class="tab active">html</li><li class="tab">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"firstName"</span> [<span class="attr">ngModel</span>]=<span class="string">"firstName"</span> (<span class="attr">ngModelChange</span>)= <span class="string">"firstLetterToUpperCase($event)"</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight ts" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> AppComponent {</span><br><span class="line"></span><br><span class="line">  firstName = <span class="string">''</span>;</span><br><span class="line">  firstLetterToUpperCase(value: <span class="built_in">string</span>){</span><br><span class="line">    <span class="keyword">if</span> (value.length &gt;<span class="number">0</span>) {</span><br><span class="line">      <span class="keyword">this</span>.firstName = value.charAt(<span class="number">0</span>).toUpperCase() + value.slice(<span class="number">1</span>);</span><br><span class="line">    }<span class="keyword">else</span>{</span><br><span class="line">      <span class="keyword">this</span>.firstName = value;</span><br><span class="line">    }</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>我覺得這個小技巧還蠻不錯的，甚至可以拿來更改使用者的輸入內容，防止使用者打錯格式之類的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前學的 two way binding 的寫法如下&lt;/p&gt;
&lt;figure class=&quot;codeblock codeblock--tabbed&quot;&gt;&lt;figcaption&gt;&lt;span&gt;[(ngModel)]&lt;/span&gt;&lt;ul class=&quot;tabs&quot;&gt;&lt;li class=&quot;tab active&quot;&gt;html&lt;/li&gt;&lt;/ul&gt;&lt;/figcaption&gt;&lt;div class=&quot;tabs-content&quot;&gt;&lt;figure class=&quot;highlight html&quot; style=&quot;display: block;&quot;&gt;&lt;table&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;input&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;text&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;name&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;firstName&quot;&lt;/span&gt; [(&lt;span class=&quot;attr&quot;&gt;ngModel&lt;/span&gt;)]=&lt;span class=&quot;string&quot;&gt;&quot;firstName&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/div&gt;&lt;/figure&gt;
&lt;p&gt;今天要說明的是，如何把&lt;code&gt;( )&lt;/code&gt;與&lt;code&gt;[ ]&lt;/code&gt;分開寫，這樣就可以在使用者輸入的時候加入一些邏輯進入&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
      <category term="binding" scheme="https://mileslin.github.io/tags/binding/"/>
    
  </entry>
  
  <entry>
    <title>User input 實用的 key 事件</title>
    <link href="https://mileslin.github.io/2017/05/User-input-%E5%AF%A6%E7%94%A8%E7%9A%84-key-%E4%BA%8B%E4%BB%B6/"/>
    <id>https://mileslin.github.io/2017/05/User-input-實用的-key-事件/</id>
    <published>2017-05-02T16:30:27.000Z</published>
    <updated>2017-05-02T16:54:44.208Z</updated>
    
    <content type="html"><![CDATA[<p>使用者輸入資料的時候，通常會綁定一些事情，做一些邏輯之類的，例如:使用者點選 Enter 則執行搜尋功能等等….</p>
<a id="more"></a>
<h2 id="keyup-事件"><a href="#keyup-事件" class="headerlink" title="keyup 事件"></a>keyup 事件</h2><p>keyup 顧名思義就是鍵盤按下之後放開會觸發的事情，其中傳入 <code>$event</code> 就是傳入 <code>KeyboardEvent</code> 的事件<br><figure class="codeblock codeblock--tabbed"><figcaption><span>keyup template</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>({  </span><br><span class="line">  template: <span class="string">`</span><br><span class="line">    &lt;input (keyup)="onKey($event)"&gt;    </span><br><span class="line">  `</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> KeyUpComponent {</span><br><span class="line">  </span><br><span class="line">  onKey(event: KeyboardEvent) {</span><br><span class="line">    <span class="keyword">let</span> value = (&lt;HTMLInputElement&gt;event.target).value;</span><br><span class="line">    ...</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="使用-template-reference-variable"><a href="#使用-template-reference-variable" class="headerlink" title="使用 template reference variable"></a>使用 template reference variable</h2><p>如果沒有一些特殊邏輯，傳入整個 keyboardEvent 並不是一個很棒的作法，而我們可以用  <a href="https://angular.io/docs/ts/latest/guide/template-syntax.html#ref-vars" title="template reference variable" target="_blank" rel="external">template reference variable</a> 單純傳入 input 物件 或者 input 物件的 value。</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>template reference variable</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>({  </span><br><span class="line">  template: <span class="string">`</span><br><span class="line">    &lt;input #box (keyup)="onKey(box.value)"&gt;    </span><br><span class="line">  `</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> KeyUpComponent_v2 {</span><br><span class="line">  </span><br><span class="line">  onKey(value: <span class="built_in">string</span>) {</span><br><span class="line">    ...</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="為了-enter-而生-gt-keyup-enter"><a href="#為了-enter-而生-gt-keyup-enter" class="headerlink" title="為了 enter 而生 =&gt; keyup.enter"></a>為了 enter 而生 =&gt; keyup.enter</h2><p>當使用者點擊 enter 的時候，才觸發事件</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>keyup.enter</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>({  </span><br><span class="line">  template: <span class="string">`</span><br><span class="line">    &lt;input #box (keyup.enter)="onEnter(box.value)"&gt;    </span><br><span class="line">  `</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> KeyUpComponent {  </span><br><span class="line">  onEnter(value: <span class="built_in">string</span>) { ...; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="順便的-blur-事件"><a href="#順便的-blur-事件" class="headerlink" title="順便的 blur 事件"></a>順便的 blur 事件</h2><p>當滑鼠點擊到其他地方的時候，或者是游標離開當下物件的時候才會觸發</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>keyup.enter</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span>({  </span><br><span class="line">  template: <span class="string">`</span><br><span class="line">    &lt;input #box (blur)="update(box.value)"&gt;    </span><br><span class="line">  `</span></span><br><span class="line">})</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> KeyUpComponent {  </span><br><span class="line">  update(value: <span class="built_in">string</span>) { ... }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://angular.io/docs/ts/latest/guide/user-input.html" title="User Input" target="_blank" rel="external">User Input</a>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用者輸入資料的時候，通常會綁定一些事情，做一些邏輯之類的，例如:使用者點選 Enter 則執行搜尋功能等等….&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
      <category term="input" scheme="https://mileslin.github.io/tags/input/"/>
    
  </entry>
  
  <entry>
    <title>使用 Angular CLI 建立 Angular 專案架構說明</title>
    <link href="https://mileslin.github.io/2017/04/%E4%BD%BF%E7%94%A8-Angular-CLI-%E5%BB%BA%E7%AB%8B-Angular-%E5%B0%88%E6%A1%88%E6%9E%B6%E6%A7%8B%E8%AA%AA%E6%98%8E/"/>
    <id>https://mileslin.github.io/2017/04/使用-Angular-CLI-建立-Angular-專案架構說明/</id>
    <published>2017-04-30T09:46:33.000Z</published>
    <updated>2017-04-30T15:19:26.000Z</updated>
    
    <content type="html"><![CDATA[<p>從頭建立 Angular 專案是一件很麻煩的事情，所以通常都會用 <a href="https://github.com/angular/angular-cli" title="Angular CLI" target="_blank" rel="external">Angular CLI</a> 建立 Anuglar 專案，而今天則要說明 Angular CLI 建立 Angular 專案的檔案內容。</p>
<a id="more"></a>
<h2 id="建立專案"><a href="#建立專案" class="headerlink" title="建立專案"></a>建立專案</h2><p>首先我們要執行 cmd 指令 <code>ng new my-app</code> 建立 Angular 專案，Angular CLI 會幫我們建立這樣專案架構的專案<br><div class="figure " style="width:;"><a class="fancybox" href="Structure.jpg" title="Structure" data-fancybox-group=""><img class="fig-img" src="Structure.jpg" alt="Structure"></a><span class="caption">Structure</span></div></p>
<h2 id="The-root-folder"><a href="#The-root-folder" class="headerlink" title="The root folder"></a>The root folder</h2><p>負責放支援建置 app 的設定檔</p>
<table>
<thead>
<tr>
<th>檔案</th>
<th>說明</th>
</tr>
</thead>
<tbody>
<tr>
<td>e2e/</td>
<td>負責放 End-to-End 測試程式碼的資料夾</td>
</tr>
<tr>
<td>node_modules/</td>
<td><code>Node.js</code> 建立的資料夾，負責放 third party modules 的資料夾，其 thrid party modules 清單則放在 <code>package.json</code>裡面</td>
</tr>
<tr>
<td>.angular-cli.json</td>
<td>放 Angular CLI 的設定檔 <a href="https://github.com/angular/angular-cli/wiki/angular-cli" title="Angular CLI Config Schema" target="_blank" rel="external">Angular CLI Config Schema</a></td>
</tr>
<tr>
<td>.editorconfig</td>
<td>幫助開發者使用不同的 IDEs 保持檔案格式一致性的設定檔 <a href="http://editorconfig.org" title="http://editorconfig.org editorconfig" target="_blank" rel="external"></a></td>
</tr>
<tr>
<td>.gitignore</td>
<td>Git 的設定檔，讓指定檔案不會 commit 到 Source control</td>
</tr>
<tr>
<td>karma.conf.js</td>
<td>Karma test 的 unit tests 設定 <a href="https://karma-runner.github.io/1.0/index.html" title="Karma" target="_blank" rel="external">Karma</a></td>
</tr>
<tr>
<td>package.json</td>
<td>npm 設定檔， third party 清單與版本資訊</td>
</tr>
<tr>
<td>protractor.conf.js</td>
<td>Angular end-to-end test framework <a href="http://www.protractortest.org/#/" title="Protractor" target="_blank" rel="external">Protractor</a> 設定檔</td>
</tr>
<tr>
<td>README.md</td>
<td>Angular CLI 基本指令文件</td>
</tr>
<tr>
<td>tsconfig.json</td>
<td>TypeScript 編譯器設定檔案</td>
</tr>
<tr>
<td>tslint.json</td>
<td>保持 code style 一致性的 <a href="https://palantir.github.io/tslint/" title="TSLint" target="_blank" rel="external">TSLint</a> 設定檔</td>
</tr>
</tbody>
</table>
<h2 id="The-src-folder"><a href="#The-src-folder" class="headerlink" title="The src folder"></a>The src folder</h2><p>寫程式碼的地方。  所有的 Angular components, templates, styles, images 等等…都放這邊。</p>
<div class="figure " style="width:;"><a class="fancybox" href="Src.jpg" title="Src" data-fancybox-group=""><img class="fig-img" src="Src.jpg" alt="Src"></a><span class="caption">Src</span></div>
<table>
<thead>
<tr>
<th>檔案</th>
<th>說明</th>
</tr>
</thead>
<tbody>
<tr>
<td>app/app.component.{ts,html,css,spec.ts}</td>
<td>所有的 Componet、Service、Pipe、Unit test 等等..程式碼都是放在這個資料夾，而 <code>app.component</code> 則是 Angular CLI 預設建立的 root component</td>
</tr>
<tr>
<td>app/app.module.ts</td>
<td>預設的 <a href="https://angular.io/docs/ts/latest/guide/appmodule.html" title="root module" target="_blank" rel="external">root module</a> ， 告訴 Angular 有哪些 Components 、Modules、 Services，讓 Angular 知道如何 assemble the application</td>
</tr>
<tr>
<td>assets/*</td>
<td>放圖片或者是建立 application 需要用的到材料</td>
</tr>
<tr>
<td>environments/*</td>
<td>設定 Angular 程式碼會用到的參數，很像 Web.config 的東西。  預設為 environment.ts ， 要產生不同的 environment 的話，參考命名規則為 environment.xxx.ts，在執行或者 build Angular application 的時候加入 xxx 的參數，則可以指定到該 environmnet ，例如 : <code>ng build -xxx</code>、 <code>ng serve -xxx</code></td>
</tr>
<tr>
<td>favicon.ico</td>
<td>網頁頁籤的 icon <div class="figure " style="width:;"><a class="fancybox" href="icon.jpg" title="" data-fancybox-group=""><img class="fig-img" src="icon.jpg" alt=""></a></div><div style="clear:both;"></div></td>
</tr>
<tr>
<td>index.html</td>
<td>網頁進入點，當使用者拜訪網站的時候，是執行到這個頁面。  在大部分的情況，是不需用編輯的， Angular CLI 在 build application 的時候會自動加入 js 和 css</td>
</tr>
<tr>
<td>main.ts</td>
<td>啟動 application root module(<span class="highlight-text primary">AppModule</span>) 的編譯起始點</td>
</tr>
<tr>
<td>polyfills.ts</td>
<td>因為不同的瀏覽器會支援不同的 web standards， polyfills 就像補丁的概念，補足些沒有支援的部分。 <a href="https://angular.io/docs/ts/latest/guide/browser-support.html" title="Browser Support" target="_blank" rel="external">Browser Support</a></td>
</tr>
<tr>
<td>styles.css</td>
<td>放置 global styles 的 CSS</td>
</tr>
<tr>
<td>test.ts</td>
<td>unit tests 的進入點，有些 unit tests 的設定也寫在這邊</td>
</tr>
<tr>
<td>tsconfig.{app,spec}.json</td>
<td>TypeScript 編譯設定檔 ，<code>tsconfig.app.json</code> for Angular app、 <code>tsconfig.spec.json</code> for unit tests</td>
</tr>
</tbody>
</table>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://angular.io/docs/ts/latest/cli-quickstart.html" title="cli-quickstart" target="_blank" rel="external">CLI QUICKSTART</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;從頭建立 Angular 專案是一件很麻煩的事情，所以通常都會用 &lt;a href=&quot;https://github.com/angular/angular-cli&quot; title=&quot;Angular CLI&quot;&gt;Angular CLI&lt;/a&gt; 建立 Anuglar 專案，而今天則要說明 Angular CLI 建立 Angular 專案的檔案內容。&lt;/p&gt;
    
    </summary>
    
      <category term="Angular" scheme="https://mileslin.github.io/categories/Angular/"/>
    
    
      <category term="Angular CLI" scheme="https://mileslin.github.io/tags/Angular-CLI/"/>
    
      <category term="Angular" scheme="https://mileslin.github.io/tags/Angular/"/>
    
  </entry>
  
  <entry>
    <title>Autofac 設定 Web API Register Controller 筆記</title>
    <link href="https://mileslin.github.io/2017/04/Autofac-%E8%A8%AD%E5%AE%9A-Web-API-Register-Controller-%E7%AD%86%E8%A8%98/"/>
    <id>https://mileslin.github.io/2017/04/Autofac-設定-Web-API-Register-Controller-筆記/</id>
    <published>2017-04-28T12:52:13.000Z</published>
    <updated>2017-07-02T11:35:37.711Z</updated>
    
    <content type="html"><![CDATA[<p>Autofac 是一種幫忙管理物件注入的容器，能夠幫助我們在 Controller 建構式注入物件，這樣才有辦法與實體隔離，幫助我們寫單元測試。  今天就來說明怎麼設定 Autofac 使 Controller 建構式注入物件。  今天會以 Web API 為例子。(要注意:MVC的註冊方式有點不同)</p>
<a id="more"></a>
<h2 id="使用容器註冊物件"><a href="#使用容器註冊物件" class="headerlink" title="使用容器註冊物件"></a>使用容器註冊物件</h2><p>為了方便整理，我會先新增 <code>AutofacConfig.cs</code> 放在 App_Start 資料夾裡面， <code>AutofacConfig.cs</code> 則負責註冊。</p>
<ul>
<li>安裝 <a href="https://www.nuget.org/packages/Autofac.WebApi2/" title="Autofac.WebAPi2" target="_blank" rel="external">Autofac.WebAPi2</a></li>
<li>先註冊所有 Web API Controller 到 ContainerBuilder</li>
<li>註冊所有 Controller 要相依的物件，這邊以 IConfiguration 為例子，表示 Controller 建構式注入 IConfiguration 時會取得 Configuration 物件</li>
<li>開啟 <code>Global.asax.cs</code> 加入 <code>AutofacConfig.Bootstrapper()</code><figure class="codeblock codeblock--tabbed"><figcaption><span>AutofacConfig</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AutofacConfig</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bootstrapper</span>(<span class="params"></span>)</span><br><span class="line">    </span>{</span><br><span class="line">        <span class="keyword">var</span> builder = <span class="keyword">new</span> ContainerBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get your HttpConfiguration.</span></span><br><span class="line">        <span class="keyword">var</span> config = GlobalConfiguration.Configuration;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register your Web API controllers.</span></span><br><span class="line">        builder.RegisterApiControllers(Assembly.GetExecutingAssembly());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// OPTIONAL: Register the Autofac filter provider.</span></span><br><span class="line">        builder.RegisterWebApiFilterProvider(config);</span><br><span class="line"></span><br><span class="line">        builder.RegisterType&lt;Configuration&gt;()</span><br><span class="line">           .As&lt;IConfiguration&gt;()</span><br><span class="line">           .InstancePerLifetimeScope();</span><br><span class="line"></span><br><span class="line">        builder.RegisterType&lt;Configuration&gt;()</span><br><span class="line">           .As&lt;IConfiguration&gt;()</span><br><span class="line">           .InstancePerLifetimeScope();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> container = builder.Build();</span><br><span class="line"></span><br><span class="line">        config.DependencyResolver = <span class="keyword">new</span> AutofacWebApiDependencyResolver(container);</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
</li>
</ul>
<p>打開 <code>Global.asax.cs</code> 加入 <code>AutofacConfig.Bootstrapper();</code><br><figure class="codeblock codeblock--tabbed"><figcaption><span>Global.asax.cs</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class WebApiApplication : System.Web.HttpApplication</span><br><span class="line">{</span><br><span class="line">    protected void Application_Start()</span><br><span class="line">    {</span><br><span class="line">        AreaRegistration.RegisterAllAreas();</span><br><span class="line">        GlobalConfiguration.Configure(WebApiConfig.Register);</span><br><span class="line">        FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);</span><br><span class="line">        RouteConfig.RegisterRoutes(RouteTable.Routes);</span><br><span class="line">        BundleConfig.RegisterBundles(BundleTable.Bundles);</span><br><span class="line">        </span><br><span class="line">        // 加入這行</span><br><span class="line">        AutofacConfig.Bootstrapper();</span><br><span class="line"></span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>接下來 Controller 就可以建構式注入 IConfiguration 取得 Configuration 物件<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Controller</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ValuesController</span> : <span class="title">ApiController</span></span><br><span class="line">{</span><br><span class="line">    IConfiguration _configuration;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ValuesController</span>(<span class="params">IConfiguration configuration</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        _configuration = configuration;</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="建立-Autofac-Module"><a href="#建立-Autofac-Module" class="headerlink" title="建立 Autofac.Module"></a>建立 Autofac.Module</h2><p>當註冊物件一多的時候，我們可以建立 <code>Aufofac.Module</code> 把註冊這件事情分散在各個 Module 處理。</p>
<p>例如我建立一個 EFModule ，註冊 Entities。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>EFModule</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">public class EFModule : Autofac.Module</span><br><span class="line">{</span><br><span class="line">    protected override void Load(ContainerBuilder builder)</span><br><span class="line">    {</span><br><span class="line">        builder.RegisterType&lt;WebPaymentEntities&gt;()</span><br><span class="line">           .As&lt;WebPaymentEntities&gt;()</span><br><span class="line">           .InstancePerLifetimeScope();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>我的 ContainerBuilder 只要註冊 Module 就好<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Register Module</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Bootstrapper</span>(<span class="params"></span>)</span><br><span class="line">    </span>{</span><br><span class="line">        <span class="keyword">var</span> builder = <span class="keyword">new</span> ContainerBuilder();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Get your HttpConfiguration.</span></span><br><span class="line">        <span class="keyword">var</span> config = GlobalConfiguration.Configuration;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Register your Web API controllers.</span></span><br><span class="line">        builder.RegisterApiControllers(Assembly.GetExecutingAssembly());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// OPTIONAL: Register the Autofac filter provider.</span></span><br><span class="line">        builder.RegisterWebApiFilterProvider(config);</span><br><span class="line"></span><br><span class="line">        builder.RegisterType&lt;Configuration&gt;()</span><br><span class="line">           .As&lt;IConfiguration&gt;()</span><br><span class="line">           .InstancePerLifetimeScope();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 註冊 Module</span></span><br><span class="line">        builder.RegisterModule(<span class="keyword">new</span> EFModule());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">var</span> container = builder.Build();</span><br><span class="line"></span><br><span class="line">        config.DependencyResolver = <span class="keyword">new</span> AutofacWebApiDependencyResolver(container);</span><br><span class="line">    }</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="一次註冊多個物件"><a href="#一次註冊多個物件" class="headerlink" title="一次註冊多個物件"></a>一次註冊多個物件</h2><p>在寫 MVC 或 Web API 的時候可以常見到 <a href="https://msdn.microsoft.com/en-us/library/ff649690.aspx" title="Repository Pattern" target="_blank" rel="external">Repository Pattern</a> 而 Repository Pattern 有一定的命名規格，例如: 介面 <code>IxxxRepository</code> 會對應到一個類別 <code>xxxRepository</code>。<br><figure class="codeblock codeblock--tabbed"><figcaption><span>Repository</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductRepository</span> : <span class="title">IProductRepository</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">private</span> WebPaymentEntities context;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImportContainerRepository</span>(<span class="params">WebPaymentEntities context</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        <span class="keyword">this</span>.context = context;</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>我們就可以用這命名的 Pattern 建立一個 Autofac Module 註冊所有的 Repository</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Respository Module</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public class RepositoryModule : Autofac.Module</span><br><span class="line">{</span><br><span class="line">    protected override void Load(ContainerBuilder builder)</span><br><span class="line">    {</span><br><span class="line">        builder.RegisterAssemblyTypes(typeof(WebApiApplication).Assembly)</span><br><span class="line">               .Where(t =&gt; t.Name.EndsWith("Repository"))</span><br><span class="line">               .AsImplementedInterfaces()</span><br><span class="line">              .InstancePerLifetimeScope();</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>通常 Autofac 設定一次就很少再設定了，所以沒有研究很深，就先筆記到這邊，等之後需要其他應用的時候，再來詳細閱讀官方文件。</p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="http://autofac.readthedocs.io/en/latest/integration/webapi.html#register-controllers" title="Autofac官方文件" target="_blank" rel="external">Autofac 官方文件</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Autofac 是一種幫忙管理物件注入的容器，能夠幫助我們在 Controller 建構式注入物件，這樣才有辦法與實體隔離，幫助我們寫單元測試。  今天就來說明怎麼設定 Autofac 使 Controller 建構式注入物件。  今天會以 Web API 為例子。(要注意:MVC的註冊方式有點不同)&lt;/p&gt;
    
    </summary>
    
      <category term="Autofac" scheme="https://mileslin.github.io/categories/Autofac/"/>
    
    
      <category term="C#" scheme="https://mileslin.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://mileslin.github.io/tags/NET/"/>
    
      <category term="Autofac" scheme="https://mileslin.github.io/tags/Autofac/"/>
    
  </entry>
  
  <entry>
    <title>NLog 建置筆記</title>
    <link href="https://mileslin.github.io/2017/04/NLog-%E5%BB%BA%E7%BD%AE%E7%AD%86%E8%A8%98/"/>
    <id>https://mileslin.github.io/2017/04/NLog-建置筆記/</id>
    <published>2017-04-26T13:54:29.000Z</published>
    <updated>2017-04-28T14:04:32.657Z</updated>
    
    <content type="html"><![CDATA[<p>最近的專案有用到 NLog 來記錄 Log ，在環境建置上處理了一段時間，但是最後還是成功設定好，把 Log 存到資料庫，趁記憶新鮮，趕快紀錄。</p>
<a id="more"></a>
<h2 id="使用-NuGet-安裝-NLog"><a href="#使用-NuGet-安裝-NLog" class="headerlink" title="使用 NuGet 安裝 NLog"></a>使用 NuGet 安裝 NLog</h2><p>至少要安裝紅色圈起來的 package:</p>
<ul>
<li>NLog</li>
<li>NLog.Config</li>
<li>NLog.Extended</li>
<li>NLog.Web</li>
</ul>
<div class="figure " style="width:;"><a class="fancybox" href="NLogInstall.jpg" title="NLogInstall" data-fancybox-group=""><img class="fig-img" src="NLogInstall.jpg" alt="NLogInstall"></a><span class="caption">NLogInstall</span></div>
<h2 id="新增-Table"><a href="#新增-Table" class="headerlink" title="新增 Table"></a>新增 Table</h2><p>在使用 NLog 將 Log 新增到資料庫裡面之前，一定要先有 Table ，我參考官方給的範例，直接新增。<br><a href="https://github.com/nlog/nlog/wiki/Database-Target" title="官方文件" target="_blank" rel="external">官方文件</a><br><figure class="codeblock codeblock--tabbed"><figcaption><span>SQL</span><ul class="tabs"><li class="tab active">sql</li></ul></figcaption><div class="tabs-content"><figure class="highlight sql" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [dbo].[NLog] (</span><br><span class="line">   [<span class="keyword">ID</span>] [<span class="built_in">int</span>] <span class="keyword">IDENTITY</span>(<span class="number">1</span>,<span class="number">1</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   [MachineName] [<span class="keyword">nvarchar</span>](<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">   [SiteName] [<span class="keyword">nvarchar</span>](<span class="number">200</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   [Logged] [datetime] <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   [<span class="keyword">Level</span>] [<span class="built_in">varchar</span>](<span class="number">5</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   [UserName] [<span class="keyword">nvarchar</span>](<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">   [Message] [<span class="keyword">nvarchar</span>](<span class="keyword">max</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">   [Logger] [<span class="keyword">nvarchar</span>](<span class="number">300</span>) <span class="literal">NULL</span>,</span><br><span class="line">   [Properties] [<span class="keyword">nvarchar</span>](<span class="keyword">max</span>) <span class="literal">NULL</span>,</span><br><span class="line">   [ServerName] [<span class="keyword">nvarchar</span>](<span class="number">200</span>) <span class="literal">NULL</span>,</span><br><span class="line">   [Port] [<span class="keyword">nvarchar</span>](<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">   [<span class="keyword">Url</span>] [<span class="keyword">nvarchar</span>](<span class="number">2000</span>) <span class="literal">NULL</span>,</span><br><span class="line">   [Https] [<span class="built_in">bit</span>] <span class="literal">NULL</span>,</span><br><span class="line">   [ServerAddress] [<span class="keyword">nvarchar</span>](<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">   [RemoteAddress] [<span class="keyword">nvarchar</span>](<span class="number">100</span>) <span class="literal">NULL</span>,</span><br><span class="line">   [Callsite] [<span class="keyword">nvarchar</span>](<span class="number">300</span>) <span class="literal">NULL</span>,</span><br><span class="line">   [<span class="keyword">Exception</span>] [<span class="keyword">nvarchar</span>](<span class="keyword">max</span>) <span class="literal">NULL</span>,</span><br><span class="line"> <span class="keyword">CONSTRAINT</span> [PK_dbo.Log] PRIMARY <span class="keyword">KEY</span> CLUSTERED ([<span class="keyword">ID</span>] <span class="keyword">ASC</span>) </span><br><span class="line">   <span class="keyword">WITH</span> (PAD_INDEX = <span class="keyword">OFF</span>, STATISTICS_NORECOMPUTE = <span class="keyword">OFF</span>, IGNORE_DUP_KEY = <span class="keyword">OFF</span>, ALLOW_ROW_LOCKS = <span class="keyword">ON</span>, ALLOW_PAGE_LOCKS = <span class="keyword">ON</span>) <span class="keyword">ON</span> [PRIMARY]</span><br><span class="line">) <span class="keyword">ON</span> [PRIMARY] TEXTIMAGE_ON [PRIMARY];</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h2 id="設定-NLog-config"><a href="#設定-NLog-config" class="headerlink" title="設定 NLog.config"></a>設定 NLog.config</h2><p>這個步驟最重要，因為設定錯也不知道怎麼 debug XD<br>XML Elements 說明</p>
<ul>
<li>extensions : 經由擴充功能，來取得一些特定欄位，例如: Web.config的值，或者是 IP 等等….</li>
<li>targets : 就是我們 NLog 要寫 Log 的目標，這邊我設定是資料庫</li>
<li>target : 資料庫設定的說明，請參考:  <a href="https://github.com/nlog/nlog/wiki/Database-Target" title="資料庫設定" target="_blank" rel="external">資料庫 target 設定</a></li>
<li>rule : 說明什麼層級的訊息要存入 database 這個 target，(共有 6 各層級)<ul>
<li>Trace</li>
<li>Debug</li>
<li>Info</li>
<li>Warn</li>
<li>Error</li>
<li>Fatal</li>
</ul>
</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>NLog.config</span><ul class="tabs"><li class="tab active">xml</li></ul></figcaption><div class="tabs-content"><figure class="highlight xml" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="utf-8" ?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">nlog</span> <span class="attr">xmlns</span>=<span class="string">"http://www.nlog-project.org/schemas/NLog.xsd"</span></span><br><span class="line">      <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span><br><span class="line">      <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"</span></span><br><span class="line">      <span class="attr">autoReload</span>=<span class="string">"true"</span></span><br><span class="line">      <span class="attr">throwExceptions</span>=<span class="string">"false"</span></span><br><span class="line">      <span class="attr">internalLogLevel</span>=<span class="string">"Off"</span> <span class="attr">internalLogFile</span>=<span class="string">"c:\temp\nlog-internal.log"</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">extensions</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- load NLog.Extended to enable ASP.NET-specific functionality --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">assembly</span>=<span class="string">"NLog.Extended"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">add</span> <span class="attr">assembly</span>=<span class="string">"NLog.Web"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">extensions</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">targets</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- write log message to database --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">target</span> <span class="attr">name</span>=<span class="string">"database"</span> <span class="attr">xsi:type</span>=<span class="string">"Database"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">dbProvider</span>&gt;</span>System.Data.SqlClient<span class="tag">&lt;/<span class="name">dbProvider</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="comment">&lt;!--帳密驗證--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--&lt;connectionString&gt;server=192.168.0.1;database=TetNlog;user id = abc;password=xxxx&lt;/connectionString&gt;--&gt;</span></span><br><span class="line">      <span class="comment">&lt;!--Windows驗證--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">connectionString</span>&gt;</span>(localdb)\ProjectsV12;database=TetNlog;integrated security=True<span class="tag">&lt;/<span class="name">connectionString</span>&gt;</span></span><br><span class="line">      </span><br><span class="line">      <span class="tag">&lt;<span class="name">commandText</span>&gt;</span></span><br><span class="line">        insert into dbo.Log (</span><br><span class="line">        Application, Logged, Level, Message,</span><br><span class="line">        Username,</span><br><span class="line">        ServerName, Port, Url, Https,</span><br><span class="line">        ServerAddress, RemoteAddress,</span><br><span class="line">        Logger, CallSite, Exception</span><br><span class="line">        ) values (</span><br><span class="line">        @Application, @Logged, @Level, @Message,</span><br><span class="line">        @Username,</span><br><span class="line">        @ServerName, @Port, @Url, @Https,</span><br><span class="line">        @ServerAddress, @RemoteAddress,</span><br><span class="line">        @Logger, @Callsite, @Exception</span><br><span class="line">        );</span><br><span class="line">      <span class="tag">&lt;/<span class="name">commandText</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@application"</span> <span class="attr">layout</span>=<span class="string">"${appsetting:name=AppName:default=Unknown\: set AppName in appSettings}"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@logged"</span> <span class="attr">layout</span>=<span class="string">"${date}"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@level"</span> <span class="attr">layout</span>=<span class="string">"${level}"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@message"</span> <span class="attr">layout</span>=<span class="string">"${message}"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@username"</span> <span class="attr">layout</span>=<span class="string">"${identity}"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@serverName"</span> <span class="attr">layout</span>=<span class="string">"${aspnet-request:serverVariable=SERVER_NAME}"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@port"</span> <span class="attr">layout</span>=<span class="string">"${aspnet-request:serverVariable=SERVER_PORT}"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@url"</span> <span class="attr">layout</span>=<span class="string">"${aspnet-request:serverVariable=HTTP_URL}"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@https"</span> <span class="attr">layout</span>=<span class="string">"${when:inner=1:when='${aspnet-request:serverVariable=HTTPS}' == 'on'}${when:inner=0:when='${aspnet-request:serverVariable=HTTPS}' != 'on'}"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@serverAddress"</span> <span class="attr">layout</span>=<span class="string">"${aspnet-request:serverVariable=LOCAL_ADDR}"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@remoteAddress"</span> <span class="attr">layout</span>=<span class="string">"${aspnet-request:serverVariable=REMOTE_ADDR}:${aspnet-request:serverVariable=REMOTE_PORT}"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@logger"</span> <span class="attr">layout</span>=<span class="string">"${logger}"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@callSite"</span> <span class="attr">layout</span>=<span class="string">"${callsite}"</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">parameter</span> <span class="attr">name</span>=<span class="string">"@exception"</span> <span class="attr">layout</span>=<span class="string">"${exception:tostring}"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">targets</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">rules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">minlevel</span>=<span class="string">"Trace"</span> <span class="attr">writeTo</span>=<span class="string">"database"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">rules</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">nlog</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="紀錄-Log-使用方式"><a href="#紀錄-Log-使用方式" class="headerlink" title="紀錄 Log 使用方式"></a>紀錄 Log 使用方式</h2><div class="alert info"><p>一般的使用方式 <code>LogManager.GetCurrentClassLogger()</code>，這個會取得當下 class 的類別存到資料庫</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Log 一般使用方式</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MyClass</span></span><br><span class="line">{</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Logger logger = LogManager.GetCurrentClassLogger();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">MyMethod1</span>(<span class="params"></span>)</span><br><span class="line">  </span>{</span><br><span class="line">    logger.Trace(<span class="string">"Sample trace message"</span>);</span><br><span class="line">    logger.Debug(<span class="string">"Sample debug message"</span>);</span><br><span class="line">    logger.Info(<span class="string">"Sample informational message"</span>);</span><br><span class="line">    logger.Warn(<span class="string">"Sample warning message"</span>);</span><br><span class="line">    logger.Error(<span class="string">"Sample error message"</span>);</span><br><span class="line">    logger.Fatal(<span class="string">"Sample fatal error message"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// alternatively you can call the Log() method</span></span><br><span class="line">    <span class="comment">// and pass log level as the parameter.</span></span><br><span class="line">    logger.Log(LogLevel.Info, <span class="string">"Sample informational message"</span>);</span><br><span class="line">  }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>如果是在 BaseClass 的話，則只要呼叫這個方法，則可以取得當下的 class 。</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Log BaseClass 使用方式</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BaseApiController</span>  : <span class="title">ApiController</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BaseApiController</span>(<span class="params"></span>)</span><br><span class="line">    </span>{</span><br><span class="line">        Logger = LogManager.GetLogger(GetType().FullName);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Logger Logger { <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>使用 autofac 注入的方式</p>
</div>
<p>完成 ILog 介面跟 Logger 實體 class<br><figure class="codeblock codeblock--tabbed"><figcaption><span>ILogger 和 Logger</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight cs" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">ILog</span></span><br><span class="line">{</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Trace</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Debug</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Warn</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Error</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Error</span>(<span class="params">Exception ex</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Error</span>(<span class="params">Exception ex, <span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params">Exception ex, <span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span>;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Logger</span> : <span class="title">ILog</span></span><br><span class="line">{</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">readonly</span> Logger _log;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">NLogLogger</span>(<span class="params">Type type</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        _log = LogManager.GetLogger(type.FullName);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Trace</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        Log(LogLevel.Trace, format, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Debug</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        Log(LogLevel.Debug, format, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Info</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        Log(LogLevel.Info, format, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Warn</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        Log(LogLevel.Warn, format, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Error</span>(<span class="params"><span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        Log(LogLevel.Error, format, args);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Error</span>(<span class="params">Exception ex</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        Log(LogLevel.Error, <span class="literal">null</span>, <span class="literal">null</span>, ex);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Error</span>(<span class="params">Exception ex, <span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        Log(LogLevel.Error, format, args, ex);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Fatal</span>(<span class="params">Exception ex, <span class="keyword">string</span> format, <span class="keyword">params</span> <span class="keyword">object</span>[] args</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        Log(LogLevel.Fatal, format, args, ex);</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params">LogLevel level, <span class="keyword">string</span> format, <span class="keyword">object</span>[] args</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        _log.Log(<span class="keyword">typeof</span>(NLogLogger), <span class="keyword">new</span> LogEventInfo(level, _log.Name, <span class="literal">null</span>, format, args));</span><br><span class="line">    }</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">Log</span>(<span class="params">LogLevel level, <span class="keyword">string</span> format, <span class="keyword">object</span>[] args, Exception ex</span>)</span><br><span class="line">    </span>{</span><br><span class="line">        _log.Log(<span class="keyword">typeof</span>(NLogLogger), <span class="keyword">new</span> LogEventInfo(level, _log.Name, <span class="literal">null</span>, format, args, ex));</span><br><span class="line">    }</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>新增有 Autofac.Module，註冊 ILog 與 logger ，然後加入 Autofac builder 裡面</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Autofac.Module</span><ul class="tabs"><li class="tab active">cs</li></ul></figcaption><div class="tabs-content"><figure class="highlight" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">public static void Bootstrapper()</span><br><span class="line">      {</span><br><span class="line">        // web api 的 autofac 設定方式</span><br><span class="line">          var builder = new ContainerBuilder();</span><br><span class="line"></span><br><span class="line">          // Get your HttpConfiguration.</span><br><span class="line">          var config = GlobalConfiguration.Configuration;</span><br><span class="line"></span><br><span class="line">          // Register your Web API controllers.</span><br><span class="line">          builder.RegisterApiControllers(Assembly.GetExecutingAssembly());</span><br><span class="line"></span><br><span class="line">          // OPTIONAL: Register the Autofac filter provider.</span><br><span class="line">          builder.RegisterWebApiFilterProvider(config);</span><br><span class="line"></span><br><span class="line">          builder.RegisterModule(new LoggingModule());</span><br><span class="line"></span><br><span class="line">          var container = builder.Build();</span><br><span class="line"></span><br><span class="line">          config.DependencyResolver = new AutofacWebApiDependencyResolver(container);</span><br><span class="line">      }</span><br><span class="line">      public class LoggingModule : Autofac.Module</span><br><span class="line">  {</span><br><span class="line">      protected override void Load(ContainerBuilder builder)</span><br><span class="line">      {</span><br><span class="line">          builder</span><br><span class="line">              .Register((c, p) =&gt; new NLogLogger(p.TypedAs&lt;Type&gt;()))</span><br><span class="line">              .AsImplementedInterfaces();</span><br><span class="line">      }</span><br><span class="line"></span><br><span class="line">      protected override void AttachToComponentRegistration(IComponentRegistry componentRegistry, IComponentRegistration registration)</span><br><span class="line">      {</span><br><span class="line">          registration.Preparing +=</span><br><span class="line">              (sender, args) =&gt;</span><br><span class="line">              {</span><br><span class="line">                  var forType = args.Component.Activator.LimitType;</span><br><span class="line"></span><br><span class="line">                  var logParameter = new ResolvedParameter(</span><br><span class="line">                      (p, c) =&gt; p.ParameterType == typeof(ILog),</span><br><span class="line">                      (p, c) =&gt; c.Resolve&lt;ILog&gt;(TypedParameter.From(forType)));</span><br><span class="line"></span><br><span class="line">                  args.Parameters = args.Parameters.Union(new[] { logParameter });</span><br><span class="line">              };</span><br><span class="line">      }</span><br><span class="line">  }</span><br></pre></td></tr></tbody></table></figure></div></figure>
<p>這樣就可以在 Controller 注入，並且還可以取得當下 class 的資訊</p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://github.com/NLog/NLog/wiki" title="官方文件" target="_blank" rel="external">官方文件</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近的專案有用到 NLog 來記錄 Log ，在環境建置上處理了一段時間，但是最後還是成功設定好，把 Log 存到資料庫，趁記憶新鮮，趕快紀錄。&lt;/p&gt;
    
    </summary>
    
      <category term="NLog" scheme="https://mileslin.github.io/categories/NLog/"/>
    
    
      <category term="C#" scheme="https://mileslin.github.io/tags/C/"/>
    
      <category term=".NET" scheme="https://mileslin.github.io/tags/NET/"/>
    
      <category term="Nlog" scheme="https://mileslin.github.io/tags/Nlog/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice summary</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-summary/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-summary/</id>
    <published>2017-04-23T14:43:07.000Z</published>
    <updated>2017-04-28T14:04:32.746Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt -->
<ul>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-I/#Array-from" title="Array.from">Array.from()</a>
: 從現有 Array 建立新 Array 物件，也可以對要複製的 Array 做一些操作</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-I/#Array-isArray" title="Array.isArray">Array.isArray()</a>
: 判斷物件是不是一個 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-I/#Array-prototype-concat" title="Array.prototype.concat">Array.prototype.concat()</a> : 串接兩個 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-II/#Array-prototype-copyWithin" title="Array.prototype.copyWithin">Array.prototype.copyWithin()</a> : 複製 Array 自己的元素，到自己的 Array 裡面</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-II/#Array-prototype-entries" title="Array.prototype.entries">Array.prototype.entries()</a> : 回傳 Array Iterator object ，iterator object可取得 index 跟 value</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-II/#Array-prototype-every" title="Array.prototype.every">Array.prototype.every()</a> : 對 Array 的所有元素做驗證，都驗證過了，則回傳 true</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-III/#Array-prototype-fill" title="Array.prototype.fill">Array.prototype.fill()</a> : 使 Array 填滿指定的值</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-III/#Array-prototype-filter" title="Array.prototype.filter">Array.prototype.filter()</a> : 過濾 Array 的資料，用起來跟 LINQ 的 <strong>where</strong> 一樣</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-III/#Array-prototype-find" title="Array.prototype.find">Array.prototype.find()</a> : 找到第一筆相符的資料</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-III/#Array-prototype-findIndex" title="Array.prototype.findIndex">Array.prototype.findIndex()</a> : 找到第一筆相符資料的 index</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-IV/#Array-prototype-includes" title="Array.prototype.includes">Array.prototype.includes()</a> : 判斷 Array 是否有包含某一個值</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-IV/#Array-prototype-indexOf" title="Array.prototype.indexOf">Array.prototype.indexOf()</a> : 判斷該元素是 Array 哪一個 Index</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-IV/#Array-prototype-join" title="Array.prototype.join">Array.prototype.join()</a> : 將 Array 用指定的值 join 成一個字串</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-IV/#Array-prototype-lastIndexOf" title="Array.prototype.lastIndexOf">Array.prototype.lastIndexOf()</a> : 斷該元素是 Array 哪一個 Index，但是是從右邊開始算起</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-V/#Array-prototype-map" title="Array.prototype.map">Array.prototype.map()</a> : 建立一個全新運算過後的 Array，且不會改到原本的 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-V/#Array-prototype-pop" title="Array.prototype.pop">Array.prototype.pop()</a> : 建除 Array 最後一個元素</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-V/#Array-prototype-push" title="Array.prototype.push">Array.prototype.push()</a> : 從最後面開始新增元素到 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/#Array-prototype-reduce" title="Array.prototype.reduce">Array.prototype.reduce()</a> : 可累加 Array 的元素，也可以用來操作元素的值然後回傳</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/#Array-prototype-reduceRight" title="Array.prototype.reduceRight">Array.prototype.reduceRight()</a> : 與 <code>Array.prototype.reduce()</code> 相似，差別在於是從右邊開始執行</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/#Array-prototype-reverse" title="Array.prototype.reverse">Array.prototype.reverse()</a> : 反向 Array 本身的值</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/#Array-prototype-shift" title="Array.prototype.shift">Array.prototype.shift()</a> : 移除 Array 的第一個元素</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VII/#Array-prototype-slice" title="Array.prototype.slice">Array.prototype.slice()</a> : 回傳淺複製的 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VII/#Array-prototype-some" title="Array.prototype.some">Array.prototype.some()</a> : 驗證其中一個元素是否符合規則，若符合則回傳 true</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VII/#Array-prototype-sort" title="Array.prototype.sort">Array.prototype.sort()</a> : 排序 Array</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VIII/#Array-prototype-splice" title="Array.prototype.splice">Array.prototype.splice()</a> : 移除元素功能跟 insert 元素功能</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VIII/#Array-prototype-toString" title="Array.prototype.toString">Array.prototype.toString()</a> :將 Array 元素toString，並且用 <code>,</code> 隔開</li>
<li><a href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VIII/#Array-prototype-unshift" title="Array.prototype.unshift">Array.prototype.unshift()</a> : 從 Array 前面增加元素</li>
</ul>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">官方參考連結</a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Array 每一個 method 的簡短說明&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice VIII</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VIII/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-VIII/</id>
    <published>2017-04-22T15:57:37.000Z</published>
    <updated>2017-04-28T14:04:32.743Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>移除元素功能跟 insert 元素功能 <code>Array.prototype.splice()</code></li>
<li>將 Array 元素toString，並且用 <code>,</code> 隔開 <code>Array.prototype.toString()</code></li>
<li>從 Array 前面增加元素 <code>Array.prototype.unshift()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-prototype-splice"><a href="#Array-prototype-splice" class="headerlink" title="Array.prototype.splice()"></a>Array.prototype.splice()</h2><p>移除元素功能跟 insert 元素功能。</p>
<h4 id="參數說明"><a href="#參數說明" class="headerlink" title="參數說明"></a>參數說明</h4><ul>
<li>start : 第幾個元素開始執行，從 0 開始計算</li>
<li>deleteCount : 要移除幾個元素，若沒指定，則移除全部 (optional)</li>
<li>item1, item2, … : 要被 insert 的元素 (optional)</li>
</ul>
<p>回傳值 : 回傳被移除的元素，若沒有元素被移除，則回傳空 Array</p>
<!-- classes : info success warning danger no-icon -->
<div class="alert info"><p>insert 元素</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>splice</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'mandarin'</span>, <span class="string">'sturgeon'</span>];</span><br><span class="line"><span class="keyword">var</span> removed = myFish.splice(<span class="number">2</span>, <span class="number">0</span>, <span class="string">'drum'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// myFish is ["angel", "clown", "drum", "mandarin", "sturgeon"] </span></span><br><span class="line"><span class="comment">// removed is [], no elements removed</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>移除元素</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>splice</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'drum'</span>, <span class="string">'mandarin'</span>, <span class="string">'sturgeon'</span>];</span><br><span class="line"><span class="keyword">var</span> removed = myFish.splice(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// removed is ["mandarin"]</span></span><br><span class="line"><span class="comment">// myFish is ["angel", "clown", "drum", "sturgeon"]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>移除元素與 insert 元素</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>splice</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'drum'</span>, <span class="string">'sturgeon'</span>];</span><br><span class="line"><span class="keyword">var</span> removed = myFish.splice(<span class="number">2</span>, <span class="number">1</span>, <span class="string">'trumpet'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// myFish is ["angel", "clown", "trumpet", "sturgeon"]</span></span><br><span class="line"><span class="comment">// removed is ["drum"]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-toString"><a href="#Array-prototype-toString" class="headerlink" title="Array.prototype.toString()"></a>Array.prototype.toString()</h2><p>將 Array 元素toString，並且用 <code>,</code> 隔開</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>toString</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="number">3</span>,{<span class="attr">abc</span> : <span class="number">123</span>}]; </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr.toString()); <span class="comment">//a,b,3,[object Object]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-unshift"><a href="#Array-prototype-unshift" class="headerlink" title="Array.prototype.unshift()"></a>Array.prototype.unshift()</h2><p>從 Array 前面增加元素</p>
<p>回傳值 : 回傳增加元素後 Array 的 length</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>unshift</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"></span><br><span class="line">arr.unshift(<span class="number">0</span>); <span class="comment">// result of call is 3, the new array length</span></span><br><span class="line"><span class="comment">// arr is [0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">arr.unshift(<span class="number">-2</span>, <span class="number">-1</span>); <span class="comment">// = 5</span></span><br><span class="line"><span class="comment">// arr is [-2, -1, 0, 1, 2]</span></span><br><span class="line"></span><br><span class="line">arr.unshift([<span class="number">-3</span>]);</span><br><span class="line"><span class="comment">// arr is [[-3], -2, -1, 0, 1, 2]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;移除元素功能跟 insert 元素功能 &lt;code&gt;Array.prototype.splice()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;將 Array 元素toString，並且用 &lt;code&gt;,&lt;/code&gt; 隔開 &lt;code&gt;Array.prototype.toString()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;從 Array 前面增加元素 &lt;code&gt;Array.prototype.unshift()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice VII</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VII/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-VII/</id>
    <published>2017-04-21T15:08:58.000Z</published>
    <updated>2017-04-21T16:06:26.725Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>回傳淺複製的 Array ，<code>Array.prototype.slice()</code></li>
<li>驗證其中一個元素是否符合規則，若符合則回傳 true <code>Array.prototype.some()</code></li>
<li>排序 Array <code>Array.prototype.sort()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-prototype-slice"><a href="#Array-prototype-slice" class="headerlink" title="Array.prototype.slice()"></a>Array.prototype.slice()</h2><p>淺複製 Array 並回傳，不會影響到原本的。  Array 原生型別會被完整複製，Array 裡面若有 object 的話，則只會複製參考位址，這表示參考位址的內容改變後，複製後的內容也會跟著改變。</p>
<h4 id="參數說明"><a href="#參數說明" class="headerlink" title="參數說明"></a>參數說明</h4><ul>
<li>begin : 要從哪一個元素開始複製的 index (會包含該元素) (optional)</li>
<li>end : 要複製到哪一個元素的 index (不會包含該元素) (optional)</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>slice</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fruits = [<span class="string">'Banana'</span>, <span class="string">'Orange'</span>, <span class="string">'Lemon'</span>, <span class="string">'Apple'</span>, <span class="string">'Mango'</span>];</span><br><span class="line"><span class="keyword">var</span> citrus = fruits.slice(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// fruits contains ['Banana', 'Orange', 'Lemon', 'Apple', 'Mango']</span></span><br><span class="line"><span class="comment">// citrus contains ['Orange','Lemon']</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-some"><a href="#Array-prototype-some" class="headerlink" title="Array.prototype.some()"></a>Array.prototype.some()</h2><p>驗證其中一個元素是否符合規則，若符合則回傳 true，這與 every 的功能很相似，差別在於</p>
<ul>
<li>Array.prototype.some() 只要有一個符合條件，就回傳 true ，否則回傳 false</li>
<li>Array.prototype.every() 全部都要符合條件，才回傳 true ，否則回傳 false</li>
</ul>
<h4 id="參數說明-1"><a href="#參數說明-1" class="headerlink" title="參數說明"></a>參數說明</h4><ul>
<li>element : 當下元素的 value</li>
<li>index : 當下元素的 index ，從 0 開始</li>
<li>array : array 本身</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>some</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">10</span>);  <span class="comment">// false</span></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(<span class="function"><span class="params">x</span> =&gt;</span> x &gt; <span class="number">10</span>); <span class="comment">// true</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-sort"><a href="#Array-prototype-sort" class="headerlink" title="Array.prototype.sort()"></a>Array.prototype.sort()</h2><p>排序 Array ， 會改變原本 Array 的值。</p>
<div class="alert danger no-icon"><p>sort的預設排序方式，是把元素轉成 string Unicode code 來排序，所以在排序數字大小的時候可能會出錯，例如[80, 9]，因為”80”的 Unicode 在 “9” Unicode 的前面，所以排序的話 80 會在前。 為避免這個情況發生，排序數字一定要傳入 function 排序</p>
</div>
<h4 id="function-說明-optional"><a href="#function-說明-optional" class="headerlink" title="function 說明 (optional)"></a>function 說明 (optional)</h4><ul>
<li>回傳負數表示 a 的元素會被排在 b 前面</li>
<li>回傳正書表示 b 的元素會被排在 a 前面</li>
<li>回傳 0 表示，保持原本的排序</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>function說明</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">  <span class="keyword">if</span> (a is less than b by some ordering criterion) {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (a is greater than b by the ordering criterion) {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="comment">// a must be equal to b</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h4 id="正向排序與反向排序-function-的寫法"><a href="#正向排序與反向排序-function-的寫法" class="headerlink" title="正向排序與反向排序 function 的寫法"></a>正向排序與反向排序 function 的寫法</h4><figure class="codeblock codeblock--tabbed"><figcaption><span>排序方式</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正向排序</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 反向排序  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> b - a;</span><br><span class="line">}</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 使用方式</span></span><br><span class="line">  <span class="keyword">var</span> numbers = [<span class="number">4</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">1</span>, <span class="number">3</span>];</span><br><span class="line">numbers.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> a - b;</span><br><span class="line">});</span><br><span class="line"><span class="built_in">console</span>.log(numbers);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h4 id="排序名字的方式"><a href="#排序名字的方式" class="headerlink" title="排序名字的方式"></a>排序名字的方式</h4><figure class="codeblock codeblock--tabbed"><figcaption><span>排序名字</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> items = [</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'Edward'</span>, <span class="attr">value</span>: <span class="number">21</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'Sharpe'</span>, <span class="attr">value</span>: <span class="number">37</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'And'</span>, <span class="attr">value</span>: <span class="number">45</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'The'</span>, <span class="attr">value</span>: <span class="number">-12</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'Magnetic'</span>, <span class="attr">value</span>: <span class="number">13</span> },</span><br><span class="line">  { <span class="attr">name</span>: <span class="string">'Zeros'</span>, <span class="attr">value</span>: <span class="number">37</span> }</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">// sort by name</span></span><br><span class="line">items.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>{</span><br><span class="line">  <span class="keyword">var</span> nameA = a.name.toUpperCase(); <span class="comment">// ignore upper and lowercase</span></span><br><span class="line">  <span class="keyword">var</span> nameB = b.name.toUpperCase(); <span class="comment">// ignore upper and lowercase</span></span><br><span class="line">  <span class="keyword">if</span> (nameA &lt; nameB) {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">if</span> (nameA &gt; nameB) {</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line"></span><br><span class="line">  <span class="comment">// names must be equal</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;回傳淺複製的 Array ，&lt;code&gt;Array.prototype.slice()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;驗證其中一個元素是否符合規則，若符合則回傳 true &lt;code&gt;Array.prototype.some()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;排序 Array &lt;code&gt;Array.prototype.sort()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice VI</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-VI/</id>
    <published>2017-04-20T15:55:24.000Z</published>
    <updated>2017-04-20T17:21:08.856Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>可累加 Array 的元素，也可以用來操作元素的值然後回傳 <code>Array.prototype.reduce()</code></li>
<li>與 <code>Array.prototype.reduce()</code> 相似，差別在於是從右邊開始執行 <code>Array.prototype.reduceRight()</code></li>
<li>反向 Array 本身的值 <code>Array.prototype.reverse()</code></li>
<li>移除 Array 的第一個元素 <code>Array.prototype.shift()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-prototype-reduce"><a href="#Array-prototype-reduce" class="headerlink" title="Array.prototype.reduce()"></a>Array.prototype.reduce()</h2><p>可累加 Array 的元素，累加元素的方式</p>
<h4 id="參數說明"><a href="#參數說明" class="headerlink" title="參數說明"></a>參數說明</h4><ul>
<li>initialValue : 給 accumulator 的初始值，如果沒有給此參數的話，accumulator 會取 Array 第一個元素的值，且會少跑 index = 0 的第一個迴圈</li>
<li>accumulator : 累加過後的值</li>
<li>currentValue : 現在的 value</li>
<li>array : 整個 Array 的值</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>reduce int</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> initialValue = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> result = [<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].reduce(</span><br><span class="line">  <span class="function">(<span class="params">accumulator, currentValue, currentIndex, array</span>) =&gt;</span> {</span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">  },</span><br><span class="line">  initialValue</span><br><span class="line">);</span><br><span class="line">  <span class="comment">// result = 20</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>用來攤平 Array</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Flatten an array of arrays</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> flattened = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(</span><br><span class="line">  <span class="function">(<span class="params"> acc, cur </span>) =&gt;</span> acc.concat(cur),</span><br><span class="line">  []</span><br><span class="line">);</span><br><span class="line"><span class="comment">// flattened is [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>用來計算 Array 裡面相同元素有幾個</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Counting instances of values in an object</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> names = [<span class="string">'Alice'</span>, <span class="string">'Bob'</span>, <span class="string">'Tiff'</span>, <span class="string">'Bruce'</span>, <span class="string">'Alice'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> countedNames = names.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">allNames, name</span>) </span>{ </span><br><span class="line">  <span class="keyword">if</span> (name <span class="keyword">in</span> allNames) {</span><br><span class="line">    allNames[name]++;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">else</span> {</span><br><span class="line">    allNames[name] = <span class="number">1</span>;</span><br><span class="line">  }</span><br><span class="line">  <span class="keyword">return</span> allNames;</span><br><span class="line">}, {});</span><br><span class="line"><span class="comment">// countedNames is:</span></span><br><span class="line"><span class="comment">// { 'Alice': 2, 'Bob': 1, 'Tiff': 1, 'Bruce': 1 }</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<div class="alert info"><p>與 spread operator 混用，取得某一個欄位的所有值</p>
</div>
<figure class="codeblock codeblock--tabbed"><figcaption><span>Bonding arrays contained in an array</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// friends - an array of objects </span></span><br><span class="line"><span class="comment">// where object field "books" - list of favorite books </span></span><br><span class="line"><span class="keyword">var</span> friends = [{</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'Anna'</span>,</span><br><span class="line">  <span class="attr">books</span>: [<span class="string">'Bible'</span>, <span class="string">'Harry Potter'</span>],</span><br><span class="line">  <span class="attr">age</span>: <span class="number">21</span></span><br><span class="line">}, {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'Bob'</span>,</span><br><span class="line">  <span class="attr">books</span>: [<span class="string">'War and peace'</span>, <span class="string">'Romeo and Juliet'</span>],</span><br><span class="line">  <span class="attr">age</span>: <span class="number">26</span></span><br><span class="line">}, {</span><br><span class="line">  <span class="attr">name</span>: <span class="string">'Alice'</span>,</span><br><span class="line">  <span class="attr">books</span>: [<span class="string">'The Lord of the Rings'</span>, <span class="string">'The Shining'</span>],</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span></span><br><span class="line">}];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果 initialValue 沒有傳會造成 undefined is not a function 的 Exception</span></span><br><span class="line"><span class="comment">// allbooks - list which will contain all friends' books +  </span></span><br><span class="line"><span class="comment">// additional list contained in initialValue</span></span><br><span class="line"><span class="keyword">var</span> allbooks = friends.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, curr</span>) </span>{</span><br><span class="line">  <span class="keyword">return</span> [...prev, ...curr.books];</span><br><span class="line">}, []);</span><br><span class="line"></span><br><span class="line"><span class="comment">// allbooks = [</span></span><br><span class="line"><span class="comment">//   'Bible', 'Harry Potter', 'War and peace', </span></span><br><span class="line"><span class="comment">//   'Romeo and Juliet', 'The Lord of the Rings',</span></span><br><span class="line"><span class="comment">//   'The Shining'</span></span><br><span class="line"><span class="comment">// ]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-reduceRight"><a href="#Array-prototype-reduceRight" class="headerlink" title="Array.prototype.reduceRight()"></a>Array.prototype.reduceRight()</h2><ul>
<li>與 <code>Array.prototype.reduce()</code> 的差別，是從右邊開始執行。</li>
</ul>
<figure class="codeblock codeblock--tabbed"><figcaption><span>reduceRight</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'1'</span>, <span class="string">'2'</span>, <span class="string">'3'</span>, <span class="string">'4'</span>, <span class="string">'5'</span>]; </span><br><span class="line"><span class="keyword">var</span> left  = a.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>)      </span>{ <span class="keyword">return</span> prev + cur; }); </span><br><span class="line"><span class="keyword">var</span> right = a.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur</span>) </span>{ <span class="keyword">return</span> prev + cur; }); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(left);  <span class="comment">// "12345"</span></span><br><span class="line"><span class="built_in">console</span>.log(right); <span class="comment">// "54321"</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-reverse"><a href="#Array-prototype-reverse" class="headerlink" title="Array.prototype.reverse()"></a>Array.prototype.reverse()</h2><p>反向 Array 的值</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>reverse</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">'one'</span>, <span class="string">'two'</span>, <span class="string">'three'</span>];</span><br><span class="line"><span class="keyword">var</span> reversed = a.reverse(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a);        <span class="comment">// ['three', 'two', 'one']</span></span><br><span class="line"><span class="built_in">console</span>.log(reversed); <span class="comment">// ['three', 'two', 'one']</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-shift"><a href="#Array-prototype-shift" class="headerlink" title="Array.prototype.shift()"></a>Array.prototype.shift()</h2><p>pop() 是移除 Array 最後一個元素，而 shift 是移除 Array 的第一個元素，</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>shift</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'mandarin'</span>, <span class="string">'surgeon'</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myFish before:'</span>, myFish);</span><br><span class="line"><span class="comment">// myFish before: ['angel', 'clown', 'mandarin', 'surgeon']</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> shifted = myFish.shift(); </span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'myFish after:'</span>, myFish); </span><br><span class="line"><span class="comment">// myFish after: ['clown', 'mandarin', 'surgeon']</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Removed this element:'</span>, shifted); </span><br><span class="line"><span class="comment">// Removed this element: angel</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;可累加 Array 的元素，也可以用來操作元素的值然後回傳 &lt;code&gt;Array.prototype.reduce()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;與 &lt;code&gt;Array.prototype.reduce()&lt;/code&gt; 相似，差別在於是從右邊開始執行 &lt;code&gt;Array.prototype.reduceRight()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;反向 Array 本身的值 &lt;code&gt;Array.prototype.reverse()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;移除 Array 的第一個元素 &lt;code&gt;Array.prototype.shift()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
  <entry>
    <title>javascript array methods practice V</title>
    <link href="https://mileslin.github.io/2017/04/javascript-array-methods-practice-V/"/>
    <id>https://mileslin.github.io/2017/04/javascript-array-methods-practice-V/</id>
    <published>2017-04-18T16:06:55.000Z</published>
    <updated>2017-04-20T15:52:47.860Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li>建立一個全新運算過後的 Array，且不會改到原本的 Array <code>Array.prototype.map()</code></li>
<li>移除 Array 最後一個元素 <code>Array.prototype.pop()</code></li>
<li>從最後面開始新增元素到 Array <code>Array.prototype.push()</code></li>
</ul>
<a id="more"></a>
<h2 id="Array-prototype-map"><a href="#Array-prototype-map" class="headerlink" title="Array.prototype.map()"></a>Array.prototype.map()</h2><p>建立一個全新運算過後的 Array，且不會改到原本的 Array<br><figure class="codeblock codeblock--tabbed"><figcaption><span>map</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">15</span>];</span><br><span class="line"><span class="keyword">var</span> roots = numbers.map(<span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{</span><br><span class="line">   <span class="keyword">return</span> x * <span class="number">2</span>;</span><br><span class="line">});</span><br><span class="line"><span class="comment">// roots is now [2, 10, 20, 30]</span></span><br><span class="line"><span class="comment">// numbers is still [1, 5, 10, 15]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">var</span> roots = numbers.map(<span class="built_in">Math</span>.sqrt);</span><br><span class="line"><span class="comment">// roots is now [1, 2, 3]</span></span><br><span class="line"><span class="comment">// numbers is still [1, 4, 9]</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>也可以用在字串上，例如取得每一個字元的 ASCII</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>string.map</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="built_in">Array</span>.prototype.map;</span><br><span class="line"><span class="keyword">var</span> a = map.call(<span class="string">'Hello World'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>{ </span><br><span class="line">  <span class="keyword">return</span> x.charCodeAt(<span class="number">0</span>); </span><br><span class="line">});</span><br><span class="line"><span class="comment">// a now equals [72, 101, 108, 108, 111, 32, 87, 111, 114, 108, 100]</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-pop"><a href="#Array-prototype-pop" class="headerlink" title="Array.prototype.pop()"></a>Array.prototype.pop()</h2><p>移除 Array 最後一個元素，且當下會回傳被移除的 value</p>
<figure class="codeblock codeblock--tabbed"><figcaption><span>pop</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> myFish = [<span class="string">'angel'</span>, <span class="string">'clown'</span>, <span class="string">'mandarin'</span>, <span class="string">'sturgeon'</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> popped = myFish.pop();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(myFish); <span class="comment">// ['angel', 'clown', 'mandarin' ] </span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(popped); <span class="comment">// 'sturgeon'</span></span><br></pre></td></tr></tbody></table></figure></div></figure>
<h2 id="Array-prototype-push"><a href="#Array-prototype-push" class="headerlink" title="Array.prototype.push()"></a>Array.prototype.push()</h2><p>從最後面開始新增元素到 Array ，回傳 push 後 Array的長度<br><figure class="codeblock codeblock--tabbed"><figcaption><span>push</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">numbers.push(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(numbers); <span class="comment">// [1, 2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sports = [<span class="string">'soccer'</span>, <span class="string">'baseball'</span>];</span><br><span class="line"><span class="keyword">var</span> total = sports.push(<span class="string">'football'</span>, <span class="string">'swimming'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sports); <span class="comment">// ['soccer', 'baseball', 'football', 'swimming']</span></span><br><span class="line"><span class="built_in">console</span>.log(total);  <span class="comment">// 4</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>合併兩個 Array 的方式<br><figure class="codeblock codeblock--tabbed"><figcaption><span>merge array</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vegetables = [<span class="string">'parsnip'</span>, <span class="string">'potato'</span>];</span><br><span class="line"><span class="keyword">var</span> moreVegs = [<span class="string">'celery'</span>, <span class="string">'beetroot'</span>];</span><br><span class="line">vegetables.push(...moreVegs);</span><br><span class="line"></span><br><span class="line"><span class="comment">//此方法也行</span></span><br><span class="line"><span class="comment">//Array.prototype.push.apply(vegetables, moreVegs);</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(vegetables); <span class="comment">// ["parsnip", "potato", "celery", "beetroot"]</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<h3 id="參考"><a href="#參考" class="headerlink" title="參考"></a>參考</h3><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array" title="參考連結" target="_blank" rel="external">參考連結</a>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;建立一個全新運算過後的 Array，且不會改到原本的 Array &lt;code&gt;Array.prototype.map()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;移除 Array 最後一個元素 &lt;code&gt;Array.prototype.pop()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;從最後面開始新增元素到 Array &lt;code&gt;Array.prototype.push()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://mileslin.github.io/categories/javascript/"/>
    
    
      <category term="javascript" scheme="https://mileslin.github.io/tags/javascript/"/>
    
      <category term="array" scheme="https://mileslin.github.io/tags/array/"/>
    
  </entry>
  
</feed>
