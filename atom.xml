<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miles&#39;s Journey</title>
  <subtitle>Dot Net Tourist</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mileslin.github.io/"/>
  <updated>2017-01-25T15:33:33.896Z</updated>
  <id>https://mileslin.github.io/</id>
  
  <author>
    <name>Miles</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Welecome to Miles&#39;s Journey</title>
    <link href="https://mileslin.github.io/2100/12/Welecome-to-Miles-s-Journey/"/>
    <id>https://mileslin.github.io/2100/12/Welecome-to-Miles-s-Journey/</id>
    <published>2100-12-31T15:59:59.000Z</published>
    <updated>2017-01-25T15:33:33.896Z</updated>
    
    <content type="html"><![CDATA[<p>Welecome to my blog. I’m Miles, from Taiwan.<br><a id="more"></a></p>
<p>My job is web developing, there are some many new technique coming up these year, it’s really need a blog to record what I learned.</p>
<p>This blog is that share my web development experience, problems in the working,new technique,Angular2,.NET MVC..etc,these all I will share here.</p>
<p>And I’m enthusiastic about learning languages, like Japanese and English. I’m enthusiastic about jogging, I participated half marathon many times.</p>
<p>Anyway, if my post could help you solve problem, that’s my pleasure.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welecome to my blog. I’m Miles, from Taiwan.&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Angular2 Modules</title>
    <link href="https://mileslin.github.io/2017/01/Angular2-Modules/"/>
    <id>https://mileslin.github.io/2017/01/Angular2-Modules/</id>
    <published>2017-01-29T16:30:10.000Z</published>
    <updated>2017-01-29T17:25:44.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>javascrip一直存在著Namespaces的問題，意思是指很容易將variables或者functions定義在global namespace。  另一方便javascript並沒有提供管理javascript code的方式。</p>
<!-- classes : info success warning danger no-icon -->
<div class="alert info"><p>Modules 幫我們解決了這個問題</p>
</div>
<a id="more"></a>
<h2 id="說明"><a href="#說明" class="headerlink" title="說明"></a>說明</h2><ul>
<li>TypeScript有提供Modules幫助我處理global namespace的問題</li>
<li>ES 2015 有定義標準來處理Module，ES 2015一個Module就是一個檔案，一個檔案就是一個Module。  所以只要建立一個js檔，使用export或者import的方式，js檔就是一個Module了。</li>
<li>Angular2有自己的Angular2 Modules，Angular2 Modules跟ES 2015 Modules是不太一樣的東西。</li>
</ul>
<h3 id="ES-2015-Modules"><a href="#ES-2015-Modules" class="headerlink" title="ES 2015 Modules"></a>ES 2015 Modules</h3><p>ES 2015 Modules的運作方式。<br>1.首先我們要有一個export的class<br><figure class="codeblock codeblock--tabbed"><figcaption><span>product.ts</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">class</span> Product{</span><br><span class="line"></span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>上面的ts code會Transpile成這樣的js code<br><figure class="codeblock codeblock--tabbed"><figcaption><span>product.js</span><ul class="tabs"><li class="tab active">js</li></ul></figcaption><div class="tabs-content"><figure class="highlight js" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Product</span>(<span class="params"></span>)</span>{}</span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<p>2.我們就可以Import該class<br><figure class="codeblock codeblock--tabbed"><figcaption><span>useProduct.ts</span><ul class="tabs"><li class="tab active">ts</li></ul></figcaption><div class="tabs-content"><figure class="highlight ts" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> { Product } from <span class="string">'./product'</span></span><br></pre></td></tr></tbody></table></figure></div></figure></p>
<div class="alert info"><p>import { Product } &lt;= 定義我們要import哪一個class</p>
</div>
<div class="alert info"><p>from ‘./product’ &lt;= 定義我們要讀取哪一個js檔案</p>
</div>
<h3 id="Angular-Modules"><a href="#Angular-Modules" class="headerlink" title="Angular Modules"></a>Angular Modules</h3><ul>
<li>Angular Modules 幫助我們組織Applicaiton與functionality的區塊結合在一起，每一個Angular application至少有一個Angular Module，預設為app.module。</li>
<li>當我們的application有越來越多功能的時候，則可以增加Feature Angular module。</li>
<li>我們甚至可以定義Shared Module。讓各個Angular Modules使用。</li>
</ul>
<h3 id="ES-2015-Modules-vs-Angular-Modules"><a href="#ES-2015-Modules-vs-Angular-Modules" class="headerlink" title="ES 2015 Modules vs Angular Modules"></a>ES 2015 Modules vs Angular Modules</h3><table>
<thead>
<tr>
<th>ES Modules</th>
<th>Angular Modules</th>
</tr>
</thead>
<tbody>
<tr>
<td>Code files用來import 或 export</td>
<td>Code files幫我們組織application的functionality區塊</td>
</tr>
<tr>
<td>組織code files</td>
<td>組織application</td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;javascrip一直存在著Namespaces的問題，意思是指很容易將variables或者functions定義在global namespace。  另一方便javascript並沒有提供管理javascript code的方式。&lt;/p&gt;
&lt;!-- classes : info success warning danger no-icon --&gt;
&lt;div class=&quot;alert info&quot;&gt;&lt;p&gt;Modules 幫我們解決了這個問題&lt;/p&gt;
&lt;/div&gt;
    
    </summary>
    
      <category term="Angular2" scheme="https://mileslin.github.io/categories/Angular2/"/>
    
    
      <category term="Angular2" scheme="https://mileslin.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Anatomy of an Angular 2 Application</title>
    <link href="https://mileslin.github.io/2017/01/Anatomy-of-an-Angular-2-Application/"/>
    <id>https://mileslin.github.io/2017/01/Anatomy-of-an-Angular-2-Application/</id>
    <published>2017-01-28T08:38:44.000Z</published>
    <updated>2017-01-28T09:26:01.165Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><p><strong>Angular2 Application</strong> 的都是由Component組合而成的，而Services則就是提供功能，可以在Component之間使用。<br><a id="more"></a><br><div class="figure " style="width:;"><a class="fancybox" href="1_Comprised-of-Angular2.jpg" title="Comprised-of-Angular2" data-fancybox-group=""><img class="fig-img" src="1_Comprised-of-Angular2.jpg" alt="Comprised-of-Angular2"></a><span class="caption">Comprised-of-Angular2</span></div></p>
<h2 id="What-is-Component"><a href="#What-is-Component" class="headerlink" title="What is Component?"></a>What is Component?</h2><p>每一個<strong>Component</strong>是經由 <span class="highlight-text primary">Template</span> + <span class="highlight-text primary">Class</span> + <span class="highlight-text primary">Metadata</span></p>
<ul>
<li>Template : User看到的HTML畫面，俗稱的View</li>
<li>Class : 使View相關的Code</li>
<li>Metadata : 提供一些Component額外的資訊</li>
</ul>
<div class="figure " style="width:;"><a class="fancybox" href="2_Comprised-of-Component.jpg" title="Comprised-of-Component" data-fancybox-group=""><img class="fig-img" src="2_Comprised-of-Component.jpg" alt="Comprised-of-Component"></a><span class="caption">Comprised-of-Component</span></div>
<h2 id="Angular-Modules"><a href="#Angular-Modules" class="headerlink" title="Angular Modules"></a>Angular Modules</h2><ul>
<li><strong>Angular Modules</strong>負責管理我們的Application，讓所有的Component之間都有相關聯</li>
<li>Angular Application最少會有一個Angular Modules叫做 <strong>Application’s root Angular module</strong></li>
<li>一個Application可以擁有很多個額外的<strong>Angular Modules</strong></li>
</ul>
<h2 id="小結"><a href="#小結" class="headerlink" title="小結"></a>小結</h2><p>Angular 的組成大概是這樣子，而之後會持續介紹每個元件的說明。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Application&quot;&gt;&lt;a href=&quot;#Application&quot; class=&quot;headerlink&quot; title=&quot;Application&quot;&gt;&lt;/a&gt;Application&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Angular2 Application&lt;/strong&gt; 的都是由Component組合而成的，而Services則就是提供功能，可以在Component之間使用。&lt;br&gt;
    
    </summary>
    
      <category term="Angular2" scheme="https://mileslin.github.io/categories/Angular2/"/>
    
    
      <category term="Angular2" scheme="https://mileslin.github.io/tags/Angular2/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://mileslin.github.io/2017/01/hello-world/"/>
    <id>https://mileslin.github.io/2017/01/hello-world/</id>
    <published>2017-01-15T03:24:13.263Z</published>
    <updated>2017-01-15T03:24:13.264Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
    
    </summary>
    
    
  </entry>
  
</feed>
